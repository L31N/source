   1               		.file	"mcp2515.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
  91               		.section	.init3,"ax",@progbits
  93               	.global	mcp2515_init
  95               	mcp2515_init:
  96               		.stabd	46,0,0
   1:mcp2515.c     **** // coding: utf-8
   2:mcp2515.c     **** // ----------------------------------------------------------------------------
   3:mcp2515.c     **** /* Copyright (c) 2010, Roboterclub Aachen e.V.
   4:mcp2515.c     ****  * All rights reserved.
   5:mcp2515.c     ****  *
   6:mcp2515.c     ****  * Redistribution and use in source and binary forms, with or without
   7:mcp2515.c     ****  * modification, are permitted provided that the following conditions are met:
   8:mcp2515.c     ****  *
   9:mcp2515.c     ****  *  * Redistributions of source code must retain the above copyright
  10:mcp2515.c     ****  *    notice, this list of conditions and the following disclaimer.
  11:mcp2515.c     ****  *  * Redistributions in binary form must reproduce the above copyright
  12:mcp2515.c     ****  *    notice, this list of conditions and the following disclaimer in the
  13:mcp2515.c     ****  *    documentation and/or other materials provided with the distribution.
  14:mcp2515.c     ****  *  * Neither the name of the Roboterclub Aachen e.V. nor the
  15:mcp2515.c     ****  *    names of its contributors may be used to endorse or promote products
  16:mcp2515.c     ****  *    derived from this software without specific prior written permission.
  17:mcp2515.c     ****  *
  18:mcp2515.c     ****  * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
  19:mcp2515.c     ****  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  20:mcp2515.c     ****  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  21:mcp2515.c     ****  * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
  22:mcp2515.c     ****  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  23:mcp2515.c     ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  24:mcp2515.c     ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  25:mcp2515.c     ****  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  26:mcp2515.c     ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  27:mcp2515.c     ****  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  28:mcp2515.c     ****  *
  29:mcp2515.c     ****  * $Id: mcp2515.c 434 2010-11-21 19:56:49Z dergraaf $
  30:mcp2515.c     ****  */
  31:mcp2515.c     **** // ----------------------------------------------------------------------------
  32:mcp2515.c     **** 
  33:mcp2515.c     **** #include <avr/pgmspace.h>
  34:mcp2515.c     **** #include <util/delay.h>
  35:mcp2515.c     **** 
  36:mcp2515.c     **** #include "utils.h"
  37:mcp2515.c     **** #include "defaults.h"
  38:mcp2515.c     **** 
  39:mcp2515.c     **** // ----------------------------------------------------------------------------
  40:mcp2515.c     **** // Prototypes for the functions defined in assembler
  41:mcp2515.c     **** uint8_t
  42:mcp2515.c     **** spi_putc(uint8_t data);
  43:mcp2515.c     **** 
  44:mcp2515.c     **** void
  45:mcp2515.c     **** mcp2515_write_register(uint8_t adress, uint8_t data);
  46:mcp2515.c     **** 
  47:mcp2515.c     **** // ----------------------------------------------------------------------------
  48:mcp2515.c     **** static uint8_t PROGMEM mcp2515_register_map[45] = {
  49:mcp2515.c     **** 	0xff, 0xc0, 0x00, 0x00,				// Filter 0
  50:mcp2515.c     **** 	0xff, 0xc0, 0x00, 0x00,				// Filter 1
  51:mcp2515.c     **** 	0xff, 0xc0, 0x00, 0x00,				// Filter 2
  52:mcp2515.c     **** 	0,									// BFPCTRL
  53:mcp2515.c     **** 	0,									// TXRTSCTRL
  54:mcp2515.c     **** 	0,									// CANSTAT (read-only)
  55:mcp2515.c     **** 	(1<<REQOP2) | CLKOUT_PRESCALER_,	// CANCTRL
  56:mcp2515.c     **** 	0xff, 0xc0, 0x00, 0x00,				// Filter 3
  57:mcp2515.c     **** 	0xff, 0xc0, 0x00, 0x00,				// Filter 4
  58:mcp2515.c     **** 	0xff, 0xc0, 0x00, 0x00,				// Filter 5
  59:mcp2515.c     **** 	0,									// TEC (read-only)
  60:mcp2515.c     **** 	0,									// REC (read-only)
  61:mcp2515.c     **** 	0,									// CANSTAT (read-only)
  62:mcp2515.c     **** 	(1<<REQOP2) | CLKOUT_PRESCALER_,	// CANCTRL
  63:mcp2515.c     **** 	0xff, 0xc0, 0x00, 0x00,				// Mask 0
  64:mcp2515.c     **** 	0xff, 0xc0, 0x00, 0x00,				// Mask 1
  65:mcp2515.c     **** 	R_CNF3,
  66:mcp2515.c     **** 	R_CNF2,
  67:mcp2515.c     **** 	R_CNF1,
  68:mcp2515.c     **** 	MCP2515_INTERRUPTS,
  69:mcp2515.c     **** 	0							// clear interrupt flags
  70:mcp2515.c     **** };
  71:mcp2515.c     **** 
  72:mcp2515.c     **** // ----------------------------------------------------------------------------
  73:mcp2515.c     **** // abgespeckte Variante der "normalen" MCP2515 Initialisierung
  74:mcp2515.c     **** 
  75:mcp2515.c     **** void mcp2515_init(void)	__attribute__((naked)) \
  76:mcp2515.c     **** 						__attribute__((section(".init3")));
  77:mcp2515.c     **** void mcp2515_init(void)
  78:mcp2515.c     **** {
  98               	.LM0:
  99               	.LFBB1:
 100               	/* prologue: naked */
 101               	/* frame size = 0 */
 102               	/* stack size = 0 */
 103               	.L__stack_usage = 0
  79:mcp2515.c     **** 	// Aktivieren der Pins fuer das SPI Interface
  80:mcp2515.c     **** 	PORT_SPI &=  ~((1 << PIN_NUM(P_SCK)) | (1 << PIN_NUM(P_MOSI)));
 105               	.LM1:
 106 0000 85B1      		in r24,37-32
 107 0002 8F75      		andi r24,lo8(95)
 108 0004 85B9      		out 37-32,r24
  81:mcp2515.c     **** 	DDR_SPI |= (1 << PIN_NUM(P_SCK)) | (1 << PIN_NUM(P_MOSI));
 110               	.LM2:
 111 0006 84B1      		in r24,36-32
 112 0008 806A      		ori r24,lo8(-96)
 113 000a 84B9      		out 36-32,r24
  82:mcp2515.c     **** 	
  83:mcp2515.c     **** 	SET(MCP2515_CS);
 115               	.LM3:
 116 000c 2C9A      		sbi 37-32,4
  84:mcp2515.c     **** 	SET_OUTPUT(MCP2515_CS);
 118               	.LM4:
 119 000e 249A      		sbi 36-32,4
  85:mcp2515.c     **** 	
  86:mcp2515.c     **** 	// Aktivieren des SPI Master Interfaces
  87:mcp2515.c     **** 	SPCR = (1 << SPE) | (1 << MSTR) | R_SPCR;
 121               	.LM5:
 122 0010 81E5      		ldi r24,lo8(81)
 123 0012 8CBD      		out 76-32,r24
  88:mcp2515.c     **** 	SPSR = R_SPSR;
 125               	.LM6:
 126 0014 81E0      		ldi r24,lo8(1)
 127 0016 8DBD      		out 77-32,r24
 128               	.LBB8:
 129               	.LBB9:
 131               	.Ltext1:
   1:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2189 2010-10-13 09:39:34Z aboyapati $ */
  34:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \code
  49:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  54:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     used.
  58:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  77:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  81:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** */
  82:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  87:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  88:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  93:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  94:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  97:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /**
  99:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    \ingroup util_delay
 100:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 101:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 102:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 103:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 104:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 105:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 106:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 107:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 108:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 109:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 110:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 111:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 112:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 113:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 115:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 116:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 117:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 118:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 119:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 120:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 121:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 122:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 123:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 124:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 125:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 126:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 127:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 128:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay
 129:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    although this will be deprecated in future.
 130:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 131:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****  */
 132:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** void
 133:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 134:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** {
 135:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 136:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	double __tmp ; 
 137:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && !defined(__DELAY_BACKWARD_COMPATIBLE__)
 138:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 139:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 140:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 141:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 142:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 143:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 144:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 145:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 146:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 147:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 148:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#else
 149:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		//round up by default
 150:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 151:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#endif
 152:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 153:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 154:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 155:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BAC
 156:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 157:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 158:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks = 1;
 159:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 160:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	{
 161:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 162:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 163:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		while(__ticks)
 164:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		{
 165:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 			// wait 1/10 ms
 166:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 167:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 			__ticks --;
 168:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		}
 169:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		return;
 170:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	}
 171:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	else
 172:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 173:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 174:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
 175:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** }
 176:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 177:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /**
 178:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    \ingroup util_delay
 179:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 180:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 181:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 182:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 183:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 184:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 185:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 186:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 187:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 188:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 189:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    will not be informed about this case.
 190:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 191:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 192:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 193:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 194:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    no delay i.e., 0us.
 195:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   
 196:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 197:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 198:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 199:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 200:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 201:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 202:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****  
 203:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 204:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 205:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay
 206:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    although this will be deprecated in future.
 207:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 208:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****  */
 209:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** void
 210:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** _delay_us(double __us)
 211:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** {
 212:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	uint8_t __ticks;
 213:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	double __tmp ; 
 214:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && !defined(__DELAY_BACKWARD_COMPATIBLE__)
 215:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 216:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 217:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 218:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 219:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 220:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 221:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 222:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 223:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 224:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 225:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#else
 226:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		//round up by default
 227:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 228:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#endif
 229:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 230:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 133               	.LM7:
 134 0018 85E0      		 ldi r24,lo8(5)
 135 001a 8A95      	    1:dec r24
 136 001c 01F4      	    brne 1b
 137               	.LBE9:
 138               	.LBE8:
 140               	.Ltext2:
  89:mcp2515.c     **** 	
  90:mcp2515.c     **** 	_delay_us(1);
  91:mcp2515.c     **** 	
  92:mcp2515.c     **** 	// MCP2515 per Software Reset zuruecksetzten,
  93:mcp2515.c     **** 	// danach ist er automatisch im Konfigurations Modus
  94:mcp2515.c     **** 	RESET(MCP2515_CS);
 142               	.LM8:
 143 001e 2C98      		cbi 37-32,4
  95:mcp2515.c     **** 	spi_putc(SPI_RESET);
 145               	.LM9:
 146 0020 80EC      		ldi r24,lo8(-64)
 147 0022 00D0      		rcall spi_putc
  96:mcp2515.c     **** 	SET(MCP2515_CS);
 149               	.LM10:
 150 0024 2C9A      		sbi 37-32,4
 151               	.LBB10:
 152               	.LBB11:
 154               	.Ltext3:
 153:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 156               	.LM11:
 157 0026 80E7      		 ldi r24,lo8(368)
 158 0028 91E0      	    ldi r25,hi8(368)
 159 002a 0197      	    1:sbiw r24,1
 160 002c 01F4      	    brne 1b
 161 002e 00C0      		rjmp .
 162               	.LBE11:
 163               	.LBE10:
 165               	.Ltext4:
  97:mcp2515.c     **** 	
  98:mcp2515.c     **** 	// ein bisschen warten bis der MCP2515 sich neu gestartet hat
  99:mcp2515.c     **** 	_delay_ms(0.1);
 100:mcp2515.c     **** 	
 101:mcp2515.c     **** 	// Filter usw. setzen
 102:mcp2515.c     **** 	RESET(MCP2515_CS);
 167               	.LM12:
 168 0030 2C98      		cbi 37-32,4
 103:mcp2515.c     **** 	spi_putc(SPI_WRITE);
 170               	.LM13:
 171 0032 82E0      		ldi r24,lo8(2)
 172 0034 00D0      		rcall spi_putc
 104:mcp2515.c     **** 	spi_putc(RXF0SIDH);
 174               	.LM14:
 175 0036 80E0      		ldi r24,lo8(0)
 176 0038 00D0      		rcall spi_putc
 177 003a C0E0      		ldi r28,lo8(0)
 178 003c D0E0      		ldi r29,hi8(0)
 179               	.L2:
 180               	.LBB12:
 181               	.LBB13:
 105:mcp2515.c     **** 	for (uint8_t i = 0; i < sizeof(mcp2515_register_map); i++) {
 106:mcp2515.c     **** 		spi_putc(pgm_read_byte(&mcp2515_register_map[i]));
 183               	.LM15:
 184 003e FE01      		movw r30,r28
 185 0040 E050      		subi r30,lo8(-(mcp2515_register_map))
 186 0042 F040      		sbci r31,hi8(-(mcp2515_register_map))
 187               	/* #APP */
 188               	 ;  106 "mcp2515.c" 1
 189 0044 8491      		lpm r24, Z
 190               		
 191               	 ;  0 "" 2
 192               	/* #NOAPP */
 193               	.LBE13:
 194 0046 00D0      		rcall spi_putc
 195 0048 2196      		adiw r28,1
 105:mcp2515.c     **** 	for (uint8_t i = 0; i < sizeof(mcp2515_register_map); i++) {
 197               	.LM16:
 198 004a CD32      		cpi r28,45
 199 004c D105      		cpc r29,__zero_reg__
 200 004e 01F4      		brne .L2
 201               	.LBE12:
 107:mcp2515.c     **** 	}
 108:mcp2515.c     **** 	SET(MCP2515_CS);
 203               	.LM17:
 204 0050 2C9A      		sbi 37-32,4
 109:mcp2515.c     **** 	
 110:mcp2515.c     **** 	// nur Standard IDs, Message Rollover nach Puffer 1
 111:mcp2515.c     **** 	mcp2515_write_register(RXB0CTRL, (0 << RXM1) | (1 << RXM0) | (1 << BUKT));
 206               	.LM18:
 207 0052 80E6      		ldi r24,lo8(96)
 208 0054 64E2      		ldi r22,lo8(36)
 209 0056 00D0      		rcall mcp2515_write_register
 112:mcp2515.c     **** 	mcp2515_write_register(RXB1CTRL, (0 << RXM1) | (1 << RXM0));
 211               	.LM19:
 212 0058 80E7      		ldi r24,lo8(112)
 213 005a 60E2      		ldi r22,lo8(32)
 214 005c 00D0      		rcall mcp2515_write_register
 113:mcp2515.c     **** 	
 114:mcp2515.c     **** 	// MCP2515 zurueck in den normalen Modus versetzten
 115:mcp2515.c     **** 	mcp2515_write_register(CANCTRL, CLKOUT_PRESCALER_);
 216               	.LM20:
 217 005e 8FE0      		ldi r24,lo8(15)
 218 0060 60E0      		ldi r22,lo8(0)
 219 0062 00D0      		rcall mcp2515_write_register
 220               	/* epilogue start */
 116:mcp2515.c     **** }
 222               	.LM21:
 224               	.Lscope1:
 226               		.stabd	78,0,0
 227               		.section	.progmem.data,"a",@progbits
 230               	mcp2515_register_map:
 231 0000 FF        		.byte	-1
 232 0001 C0        		.byte	-64
 233 0002 00        		.byte	0
 234 0003 00        		.byte	0
 235 0004 FF        		.byte	-1
 236 0005 C0        		.byte	-64
 237 0006 00        		.byte	0
 238 0007 00        		.byte	0
 239 0008 FF        		.byte	-1
 240 0009 C0        		.byte	-64
 241 000a 00        		.byte	0
 242 000b 00        		.byte	0
 243 000c 00        		.byte	0
 244 000d 00        		.byte	0
 245 000e 00        		.byte	0
 246 000f 80        		.byte	-128
 247 0010 FF        		.byte	-1
 248 0011 C0        		.byte	-64
 249 0012 00        		.byte	0
 250 0013 00        		.byte	0
 251 0014 FF        		.byte	-1
 252 0015 C0        		.byte	-64
 253 0016 00        		.byte	0
 254 0017 00        		.byte	0
 255 0018 FF        		.byte	-1
 256 0019 C0        		.byte	-64
 257 001a 00        		.byte	0
 258 001b 00        		.byte	0
 259 001c 00        		.byte	0
 260 001d 00        		.byte	0
 261 001e 00        		.byte	0
 262 001f 80        		.byte	-128
 263 0020 FF        		.byte	-1
 264 0021 C0        		.byte	-64
 265 0022 00        		.byte	0
 266 0023 00        		.byte	0
 267 0024 FF        		.byte	-1
 268 0025 C0        		.byte	-64
 269 0026 00        		.byte	0
 270 0027 00        		.byte	0
 271 0028 02        		.byte	2
 272 0029 90        		.byte	-112
 273 002a 07        		.byte	7
 274 002b 03        		.byte	3
 275 002c 00        		.byte	0
 277               		.text
 279               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 mcp2515.c
     /tmp/ccqeSmEN.s:2      *ABS*:0000003f __SREG__
     /tmp/ccqeSmEN.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccqeSmEN.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccqeSmEN.s:5      *ABS*:00000034 __CCP__
     /tmp/ccqeSmEN.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccqeSmEN.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccqeSmEN.s:95     .init3:00000000 mcp2515_init
     /tmp/ccqeSmEN.s:230    .progmem.data:00000000 mcp2515_register_map

UNDEFINED SYMBOLS
spi_putc
mcp2515_write_register
