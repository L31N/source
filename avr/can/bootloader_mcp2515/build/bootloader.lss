
build/bootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f8  0000fc00  0000fc00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000010e  00800100  00800100  0000046c  2**2
                  ALLOC
  2 .stab         0000144c  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e50  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000fc00 <boot>:
		__attribute__((section(".vectors")));

void
boot(void)
{
	__asm__ __volatile__ ("rjmp	init" "\n\t");
    fc00:	17 c0       	rjmp	.+46     	; 0xfc30 <init>

0000fc02 <mcp2515_register_map>:
}
    fc02:	ff c0 00 00 ff c0 00 00 ff c0 00 00 00 00 00 80     ................
    fc12:	ff c0 00 00 ff c0 00 00 ff c0 00 00 00 00 00 80     ................
    fc22:	ff c0 00 00 ff c0 00 00 02 90 07 03 00 00           ..............

0000fc30 <init>:

void
init(void)
{
	// Clear r1 (__zero_reg__) and initialize the stack
	__asm__ __volatile__ (
    fc30:	11 24       	eor	r1, r1
    fc32:	1f be       	out	0x3f, r1	; 63
    fc34:	cf ef       	ldi	r28, 0xFF	; 255
    fc36:	d4 e0       	ldi	r29, 0x04	; 4
    fc38:	de bf       	out	0x3e, r29	; 62
    fc3a:	cd bf       	out	0x3d, r28	; 61
			"out  0x3e, r29" "\n\t"
			"out  0x3d, r28" "\n\t");
	
#ifdef GPIOR0
	// Save MCUSR so that the main program can access if later
	GPIOR0 = MCUSR;
    fc3c:	84 b7       	in	r24, 0x34	; 52
    fc3e:	8e bb       	out	0x1e, r24	; 30
#endif
	MCUSR = 0;
    fc40:	14 be       	out	0x34, r1	; 52
	// Disable the watchdog timer
	// see http://www.nongnu.org/avr-libc/user-manual/group__avr__watchdog.html
	// 
	// The orignal implementation uses additional commands to disable
	// interrupts. As we never enable interrupts this is not needed here.
	__asm__ __volatile__ (  \
    fc42:	88 e1       	ldi	r24, 0x18	; 24
    fc44:	80 93 60 00 	sts	0x0060, r24
    fc48:	10 92 60 00 	sts	0x0060, r1

0000fc4c <mcp2515_init>:
    fc4c:	85 b1       	in	r24, 0x05	; 5
    fc4e:	8f 75       	andi	r24, 0x5F	; 95
    fc50:	85 b9       	out	0x05, r24	; 5
    fc52:	84 b1       	in	r24, 0x04	; 4
    fc54:	80 6a       	ori	r24, 0xA0	; 160
    fc56:	84 b9       	out	0x04, r24	; 4
    fc58:	2c 9a       	sbi	0x05, 4	; 5
    fc5a:	24 9a       	sbi	0x04, 4	; 4
    fc5c:	81 e5       	ldi	r24, 0x51	; 81
    fc5e:	8c bd       	out	0x2c, r24	; 44
    fc60:	81 e0       	ldi	r24, 0x01	; 1
    fc62:	8d bd       	out	0x2d, r24	; 45
    fc64:	85 e0       	ldi	r24, 0x05	; 5
    fc66:	8a 95       	dec	r24
    fc68:	f1 f7       	brne	.-4      	; 0xfc66 <mcp2515_init+0x1a>
    fc6a:	2c 98       	cbi	0x05, 4	; 5
    fc6c:	80 ec       	ldi	r24, 0xC0	; 192
    fc6e:	4d d1       	rcall	.+666    	; 0xff0a <spi_putc>
    fc70:	2c 9a       	sbi	0x05, 4	; 5
    fc72:	80 e7       	ldi	r24, 0x70	; 112
    fc74:	91 e0       	ldi	r25, 0x01	; 1
    fc76:	01 97       	sbiw	r24, 0x01	; 1
    fc78:	f1 f7       	brne	.-4      	; 0xfc76 <mcp2515_init+0x2a>
    fc7a:	00 c0       	rjmp	.+0      	; 0xfc7c <mcp2515_init+0x30>
    fc7c:	2c 98       	cbi	0x05, 4	; 5
    fc7e:	82 e0       	ldi	r24, 0x02	; 2
    fc80:	44 d1       	rcall	.+648    	; 0xff0a <spi_putc>
    fc82:	80 e0       	ldi	r24, 0x00	; 0
    fc84:	42 d1       	rcall	.+644    	; 0xff0a <spi_putc>
    fc86:	c0 e0       	ldi	r28, 0x00	; 0
    fc88:	d0 e0       	ldi	r29, 0x00	; 0
    fc8a:	fe 01       	movw	r30, r28
    fc8c:	ee 5f       	subi	r30, 0xFE	; 254
    fc8e:	f3 40       	sbci	r31, 0x03	; 3
    fc90:	84 91       	lpm	r24, Z+
    fc92:	3b d1       	rcall	.+630    	; 0xff0a <spi_putc>
    fc94:	21 96       	adiw	r28, 0x01	; 1
    fc96:	cd 32       	cpi	r28, 0x2D	; 45
    fc98:	d1 05       	cpc	r29, r1
    fc9a:	b9 f7       	brne	.-18     	; 0xfc8a <mcp2515_init+0x3e>
    fc9c:	2c 9a       	sbi	0x05, 4	; 5
    fc9e:	80 e6       	ldi	r24, 0x60	; 96
    fca0:	64 e2       	ldi	r22, 0x24	; 36
    fca2:	3a d1       	rcall	.+628    	; 0xff18 <mcp2515_write_register>
    fca4:	80 e7       	ldi	r24, 0x70	; 112
    fca6:	60 e2       	ldi	r22, 0x20	; 32
    fca8:	37 d1       	rcall	.+622    	; 0xff18 <mcp2515_write_register>
    fcaa:	8f e0       	ldi	r24, 0x0F	; 15
    fcac:	60 e0       	ldi	r22, 0x00	; 0
    fcae:	34 d1       	rcall	.+616    	; 0xff18 <mcp2515_write_register>

0000fcb0 <main>:
    fcb0:	21 9a       	sbi	0x04, 1	; 4
    fcb2:	29 9a       	sbi	0x05, 1	; 5
    fcb4:	80 ee       	ldi	r24, 0xE0	; 224
    fcb6:	93 ee       	ldi	r25, 0xE3	; 227
    fcb8:	90 93 85 00 	sts	0x0085, r25
    fcbc:	80 93 84 00 	sts	0x0084, r24
    fcc0:	10 92 80 00 	sts	0x0080, r1
    fcc4:	85 e0       	ldi	r24, 0x05	; 5
    fcc6:	80 93 81 00 	sts	0x0081, r24
    fcca:	81 e0       	ldi	r24, 0x01	; 1
    fccc:	86 bb       	out	0x16, r24	; 22
    fcce:	bb 24       	eor	r11, r11
    fcd0:	ba 94       	dec	r11
    fcd2:	ff 24       	eor	r15, r15
    fcd4:	43 e0       	ldi	r20, 0x03	; 3
    fcd6:	c4 2e       	mov	r12, r20
    fcd8:	30 ee       	ldi	r19, 0xE0	; 224
    fcda:	d3 2e       	mov	r13, r19
    fcdc:	0a c0       	rjmp	.+20     	; 0xfcf2 <main+0x42>
    fcde:	b0 9b       	sbis	0x16, 0	; 22
    fce0:	04 c0       	rjmp	.+8      	; 0xfcea <main+0x3a>
    fce2:	29 98       	cbi	0x05, 1	; 5
    fce4:	d2 d0       	rcall	.+420    	; 0xfe8a <boot_jump_to_application>
    fce6:	eb 2c       	mov	r14, r11
    fce8:	03 c0       	rjmp	.+6      	; 0xfcf0 <main+0x40>
    fcea:	eb 2c       	mov	r14, r11
    fcec:	01 c0       	rjmp	.+2      	; 0xfcf0 <main+0x40>
    fcee:	eb 2c       	mov	r14, r11
    fcf0:	be 2c       	mov	r11, r14
    fcf2:	20 d1       	rcall	.+576    	; 0xff34 <mcp2515_get_message>
    fcf4:	8f 33       	cpi	r24, 0x3F	; 63
    fcf6:	99 f3       	breq	.-26     	; 0xfcde <main+0x2e>
    fcf8:	10 92 81 00 	sts	0x0081, r1
    fcfc:	98 2f       	mov	r25, r24
    fcfe:	90 7c       	andi	r25, 0xC0	; 192
    fd00:	b1 f7       	brne	.-20     	; 0xfcee <main+0x3e>
    fd02:	8f 73       	andi	r24, 0x3F	; 63
    fd04:	9b 2d       	mov	r25, r11
    fd06:	9f 5f       	subi	r25, 0xFF	; 255
    fd08:	e0 90 0c 02 	lds	r14, 0x020C
    fd0c:	e9 16       	cp	r14, r25
    fd0e:	39 f0       	breq	.+14     	; 0xfd1e <main+0x6e>
    fd10:	90 93 0c 02 	sts	0x020C, r25
    fd14:	80 6c       	ori	r24, 0xC0	; 192
    fd16:	60 e0       	ldi	r22, 0x00	; 0
    fd18:	49 d1       	rcall	.+658    	; 0xffac <mcp2515_send_message>
    fd1a:	eb 2c       	mov	r14, r11
    fd1c:	e9 cf       	rjmp	.-46     	; 0xfcf0 <main+0x40>
    fd1e:	81 30       	cpi	r24, 0x01	; 1
    fd20:	69 f4       	brne	.+26     	; 0xfd3c <main+0x8c>
    fd22:	82 e0       	ldi	r24, 0x02	; 2
    fd24:	80 93 08 02 	sts	0x0208, r24
    fd28:	c0 92 09 02 	sts	0x0209, r12
    fd2c:	10 92 0a 02 	sts	0x020A, r1
    fd30:	d0 92 0b 02 	sts	0x020B, r13
    fd34:	81 e4       	ldi	r24, 0x41	; 65
    fd36:	64 e0       	ldi	r22, 0x04	; 4
    fd38:	39 d1       	rcall	.+626    	; 0xffac <mcp2515_send_message>
    fd3a:	da cf       	rjmp	.-76     	; 0xfcf0 <main+0x40>
    fd3c:	82 30       	cpi	r24, 0x02	; 2
    fd3e:	29 f5       	brne	.+74     	; 0xfd8a <main+0xda>
    fd40:	90 91 08 02 	lds	r25, 0x0208
    fd44:	20 91 09 02 	lds	r18, 0x0209
    fd48:	30 91 0d 02 	lds	r19, 0x020D
    fd4c:	34 30       	cpi	r19, 0x04	; 4
    fd4e:	09 f0       	breq	.+2      	; 0xfd52 <main+0xa2>
    fd50:	97 c0       	rjmp	.+302    	; 0xfe80 <main+0x1d0>
    fd52:	30 91 0a 02 	lds	r19, 0x020A
    fd56:	30 34       	cpi	r19, 0x40	; 64
    fd58:	08 f0       	brcs	.+2      	; 0xfd5c <main+0xac>
    fd5a:	92 c0       	rjmp	.+292    	; 0xfe80 <main+0x1d0>
    fd5c:	19 2f       	mov	r17, r25
    fd5e:	00 e0       	ldi	r16, 0x00	; 0
    fd60:	30 e0       	ldi	r19, 0x00	; 0
    fd62:	20 2b       	or	r18, r16
    fd64:	31 2b       	or	r19, r17
    fd66:	20 3e       	cpi	r18, 0xE0	; 224
    fd68:	31 05       	cpc	r19, r1
    fd6a:	08 f0       	brcs	.+2      	; 0xfd6e <main+0xbe>
    fd6c:	89 c0       	rjmp	.+274    	; 0xfe80 <main+0x1d0>
    fd6e:	30 93 01 01 	sts	0x0101, r19
    fd72:	20 93 00 01 	sts	0x0100, r18
    fd76:	80 91 0b 02 	lds	r24, 0x020B
    fd7a:	80 93 02 01 	sts	0x0102, r24
    fd7e:	82 e4       	ldi	r24, 0x42	; 66
    fd80:	64 e0       	ldi	r22, 0x04	; 4
    fd82:	14 d1       	rcall	.+552    	; 0xffac <mcp2515_send_message>
    fd84:	ff 24       	eor	r15, r15
    fd86:	f3 94       	inc	r15
    fd88:	b3 cf       	rjmp	.-154    	; 0xfcf0 <main+0x40>
    fd8a:	83 30       	cpi	r24, 0x03	; 3
    fd8c:	09 f0       	breq	.+2      	; 0xfd90 <main+0xe0>
    fd8e:	62 c0       	rjmp	.+196    	; 0xfe54 <main+0x1a4>
    fd90:	90 91 0d 02 	lds	r25, 0x020D
    fd94:	94 30       	cpi	r25, 0x04	; 4
    fd96:	09 f0       	breq	.+2      	; 0xfd9a <main+0xea>
    fd98:	6e c0       	rjmp	.+220    	; 0xfe76 <main+0x1c6>
    fd9a:	60 91 02 01 	lds	r22, 0x0102
    fd9e:	60 34       	cpi	r22, 0x40	; 64
    fda0:	08 f0       	brcs	.+2      	; 0xfda4 <main+0xf4>
    fda2:	6b c0       	rjmp	.+214    	; 0xfe7a <main+0x1ca>
    fda4:	ff 20       	and	r15, r15
    fda6:	09 f4       	brne	.+2      	; 0xfdaa <main+0xfa>
    fda8:	6b c0       	rjmp	.+214    	; 0xfe80 <main+0x1d0>
    fdaa:	90 91 04 02 	lds	r25, 0x0204
    fdae:	97 ff       	sbrs	r25, 7
    fdb0:	07 c0       	rjmp	.+14     	; 0xfdc0 <main+0x110>
    fdb2:	9f 77       	andi	r25, 0x7F	; 127
    fdb4:	90 93 04 02 	sts	0x0204, r25
    fdb8:	90 93 03 02 	sts	0x0203, r25
    fdbc:	ff 24       	eor	r15, r15
    fdbe:	f3 94       	inc	r15
    fdc0:	90 91 04 02 	lds	r25, 0x0204
    fdc4:	20 91 03 02 	lds	r18, 0x0203
    fdc8:	92 17       	cp	r25, r18
    fdca:	09 f0       	breq	.+2      	; 0xfdce <main+0x11e>
    fdcc:	58 c0       	rjmp	.+176    	; 0xfe7e <main+0x1ce>
    fdce:	29 2f       	mov	r18, r25
    fdd0:	21 50       	subi	r18, 0x01	; 1
    fdd2:	20 93 03 02 	sts	0x0203, r18
    fdd6:	e6 2f       	mov	r30, r22
    fdd8:	f0 e0       	ldi	r31, 0x00	; 0
    fdda:	ee 0f       	add	r30, r30
    fddc:	ff 1f       	adc	r31, r31
    fdde:	ee 0f       	add	r30, r30
    fde0:	ff 1f       	adc	r31, r31
    fde2:	ed 5f       	subi	r30, 0xFD	; 253
    fde4:	fe 4f       	sbci	r31, 0xFE	; 254
    fde6:	20 91 08 02 	lds	r18, 0x0208
    fdea:	30 91 09 02 	lds	r19, 0x0209
    fdee:	40 91 0a 02 	lds	r20, 0x020A
    fdf2:	50 91 0b 02 	lds	r21, 0x020B
    fdf6:	20 83       	st	Z, r18
    fdf8:	31 83       	std	Z+1, r19	; 0x01
    fdfa:	42 83       	std	Z+2, r20	; 0x02
    fdfc:	53 83       	std	Z+3, r21	; 0x03
    fdfe:	6f 5f       	subi	r22, 0xFF	; 255
    fe00:	60 93 02 01 	sts	0x0102, r22
    fe04:	99 23       	and	r25, r25
    fe06:	09 f0       	breq	.+2      	; 0xfe0a <main+0x15a>
    fe08:	73 cf       	rjmp	.-282    	; 0xfcf0 <main+0x40>
    fe0a:	60 34       	cpi	r22, 0x40	; 64
    fe0c:	f9 f4       	brne	.+62     	; 0xfe4c <main+0x19c>
    fe0e:	c0 91 00 01 	lds	r28, 0x0100
    fe12:	d0 91 01 01 	lds	r29, 0x0101
    fe16:	5e 01       	movw	r10, r28
    fe18:	b0 92 08 02 	sts	0x0208, r11
    fe1c:	c0 93 09 02 	sts	0x0209, r28
    fe20:	c0 3e       	cpi	r28, 0xE0	; 224
    fe22:	d1 05       	cpc	r29, r1
    fe24:	20 f0       	brcs	.+8      	; 0xfe2e <main+0x17e>
    fe26:	92 e0       	ldi	r25, 0x02	; 2
    fe28:	90 93 0d 02 	sts	0x020D, r25
    fe2c:	29 c0       	rjmp	.+82     	; 0xfe80 <main+0x1d0>
    fe2e:	ce 01       	movw	r24, r28
    fe30:	63 e0       	ldi	r22, 0x03	; 3
    fe32:	71 e0       	ldi	r23, 0x01	; 1
    fe34:	35 d0       	rcall	.+106    	; 0xfea0 <boot_program_page>
    fe36:	10 92 02 01 	sts	0x0102, r1
    fe3a:	21 96       	adiw	r28, 0x01	; 1
    fe3c:	d0 93 01 01 	sts	0x0101, r29
    fe40:	c0 93 00 01 	sts	0x0100, r28
    fe44:	83 e4       	ldi	r24, 0x43	; 67
    fe46:	62 e0       	ldi	r22, 0x02	; 2
    fe48:	b1 d0       	rcall	.+354    	; 0xffac <mcp2515_send_message>
    fe4a:	52 cf       	rjmp	.-348    	; 0xfcf0 <main+0x40>
    fe4c:	83 e4       	ldi	r24, 0x43	; 67
    fe4e:	60 e0       	ldi	r22, 0x00	; 0
    fe50:	ad d0       	rcall	.+346    	; 0xffac <mcp2515_send_message>
    fe52:	4e cf       	rjmp	.-356    	; 0xfcf0 <main+0x40>
    fe54:	84 30       	cpi	r24, 0x04	; 4
    fe56:	a1 f4       	brne	.+40     	; 0xfe80 <main+0x1d0>
    fe58:	84 e4       	ldi	r24, 0x44	; 68
    fe5a:	60 e0       	ldi	r22, 0x00	; 0
    fe5c:	a7 d0       	rcall	.+334    	; 0xffac <mcp2515_send_message>
    fe5e:	8f ef       	ldi	r24, 0xFF	; 255
    fe60:	9f e3       	ldi	r25, 0x3F	; 63
    fe62:	a2 e0       	ldi	r26, 0x02	; 2
    fe64:	81 50       	subi	r24, 0x01	; 1
    fe66:	90 40       	sbci	r25, 0x00	; 0
    fe68:	a0 40       	sbci	r26, 0x00	; 0
    fe6a:	e1 f7       	brne	.-8      	; 0xfe64 <main+0x1b4>
    fe6c:	00 c0       	rjmp	.+0      	; 0xfe6e <main+0x1be>
    fe6e:	00 00       	nop
    fe70:	29 98       	cbi	0x05, 1	; 5
    fe72:	0b d0       	rcall	.+22     	; 0xfe8a <boot_jump_to_application>
    fe74:	3d cf       	rjmp	.-390    	; 0xfcf0 <main+0x40>
    fe76:	ff 24       	eor	r15, r15
    fe78:	03 c0       	rjmp	.+6      	; 0xfe80 <main+0x1d0>
    fe7a:	ff 24       	eor	r15, r15
    fe7c:	01 c0       	rjmp	.+2      	; 0xfe80 <main+0x1d0>
    fe7e:	ff 24       	eor	r15, r15
    fe80:	80 68       	ori	r24, 0x80	; 128
    fe82:	60 91 0d 02 	lds	r22, 0x020D
    fe86:	92 d0       	rcall	.+292    	; 0xffac <mcp2515_send_message>
    fe88:	33 cf       	rjmp	.-410    	; 0xfcf0 <main+0x40>

0000fe8a <boot_jump_to_application>:
 */
void
boot_jump_to_application(void)
{
	// relocate interrupt vectors
	uint8_t reg = IV_REG & ~((1 << IVCE) | (1 << IVSEL));
    fe8a:	85 b7       	in	r24, 0x35	; 53
    fe8c:	8c 7f       	andi	r24, 0xFC	; 252
	
	IV_REG = reg | (1 << IVCE);
    fe8e:	98 2f       	mov	r25, r24
    fe90:	91 60       	ori	r25, 0x01	; 1
    fe92:	95 bf       	out	0x35, r25	; 53
	IV_REG = reg;
    fe94:	85 bf       	out	0x35, r24	; 53
	
	// reset SPI interface to power-up state
	SPCR = 0;
    fe96:	1c bc       	out	0x2c, r1	; 44
	SPSR = 0;
    fe98:	1d bc       	out	0x2d, r1	; 45
	__asm__ __volatile__(
			"push __zero_reg__" "\n\t"
			"push __zero_reg__" "\n\t"
			"push __zero_reg__" "\n\t");
#else
	__asm__ __volatile__(
    fe9a:	1f 92       	push	r1
    fe9c:	1f 92       	push	r1
	
	// when the functions executes the 'ret' command to return to
	// its origin the AVR loads the return address from the stack. Because we
	// pushed null it instead jumps to address null which starts the main
	// application.
}
    fe9e:	08 95       	ret

0000fea0 <boot_program_page>:
 *
 * \see		avr-libc Documentation > Modules > Bootloader Support Utilities
 */
void
boot_program_page(uint16_t page, uint8_t *buf)
{
    fea0:	1f 93       	push	r17
    fea2:	db 01       	movw	r26, r22
	uint32_t adr = page * SPM_PAGESIZE;
    fea4:	58 2f       	mov	r21, r24
    fea6:	40 e0       	ldi	r20, 0x00	; 0
	
	boot_page_erase(adr);
    fea8:	83 e0       	ldi	r24, 0x03	; 3
    feaa:	fa 01       	movw	r30, r20
    feac:	80 93 57 00 	sts	0x0057, r24
    feb0:	e8 95       	spm
	boot_spm_busy_wait();	  // Wait until the memory is erased.
    feb2:	07 b6       	in	r0, 0x37	; 55
    feb4:	00 fc       	sbrc	r0, 0
    feb6:	fd cf       	rjmp	.-6      	; 0xfeb2 <boot_program_page+0x12>
    feb8:	80 e0       	ldi	r24, 0x00	; 0
    feba:	90 e0       	ldi	r25, 0x00	; 0
	{
		// Set up little-endian word.
		uint16_t w = *buf++;
		w += (*buf++) << 8;
		
		boot_page_fill(adr + i, w);
    febc:	11 e0       	ldi	r17, 0x01	; 1
	boot_spm_busy_wait();	  // Wait until the memory is erased.
	
	for (uint16_t i=0; i < SPM_PAGESIZE; i+=2)
	{
		// Set up little-endian word.
		uint16_t w = *buf++;
    febe:	6c 91       	ld	r22, X
		w += (*buf++) << 8;
    fec0:	11 96       	adiw	r26, 0x01	; 1
    fec2:	3c 91       	ld	r19, X
    fec4:	11 97       	sbiw	r26, 0x01	; 1
    fec6:	20 e0       	ldi	r18, 0x00	; 0
    fec8:	f9 01       	movw	r30, r18
    feca:	e6 0f       	add	r30, r22
    fecc:	f1 1d       	adc	r31, r1
    fece:	bf 01       	movw	r22, r30
 * \param	*buf	Pointer to the buffer with the data
 *
 * \see		avr-libc Documentation > Modules > Bootloader Support Utilities
 */
void
boot_program_page(uint16_t page, uint8_t *buf)
    fed0:	12 96       	adiw	r26, 0x02	; 2
	{
		// Set up little-endian word.
		uint16_t w = *buf++;
		w += (*buf++) << 8;
		
		boot_page_fill(adr + i, w);
    fed2:	fc 01       	movw	r30, r24
    fed4:	e4 0f       	add	r30, r20
    fed6:	f5 1f       	adc	r31, r21
    fed8:	0b 01       	movw	r0, r22
    feda:	10 93 57 00 	sts	0x0057, r17
    fede:	e8 95       	spm
    fee0:	11 24       	eor	r1, r1
	uint32_t adr = page * SPM_PAGESIZE;
	
	boot_page_erase(adr);
	boot_spm_busy_wait();	  // Wait until the memory is erased.
	
	for (uint16_t i=0; i < SPM_PAGESIZE; i+=2)
    fee2:	02 96       	adiw	r24, 0x02	; 2
    fee4:	f1 e0       	ldi	r31, 0x01	; 1
    fee6:	80 30       	cpi	r24, 0x00	; 0
    fee8:	9f 07       	cpc	r25, r31
    feea:	49 f7       	brne	.-46     	; 0xfebe <boot_program_page+0x1e>
		w += (*buf++) << 8;
		
		boot_page_fill(adr + i, w);
	}
	
	boot_page_write(adr);		// Store buffer in flash page.
    feec:	85 e0       	ldi	r24, 0x05	; 5
    feee:	fa 01       	movw	r30, r20
    fef0:	80 93 57 00 	sts	0x0057, r24
    fef4:	e8 95       	spm
	boot_spm_busy_wait();		// Wait until the memory is written.
    fef6:	07 b6       	in	r0, 0x37	; 55
    fef8:	00 fc       	sbrc	r0, 0
    fefa:	fd cf       	rjmp	.-6      	; 0xfef6 <boot_program_page+0x56>
	
	// Reenable RWW-section again. We need this if we want to jump back
	// to the application after bootloading.
	boot_rww_enable();
    fefc:	81 e1       	ldi	r24, 0x11	; 17
    fefe:	80 93 57 00 	sts	0x0057, r24
    ff02:	e8 95       	spm
}
    ff04:	1f 91       	pop	r17
    ff06:	08 95       	ret

0000ff08 <spi_putc_rs>:
    ff08:	2c 98       	cbi	0x05, 4	; 5

0000ff0a <spi_putc>:
; -----------------------------------------------------------------------------
; writes one byte per SPI

	_FUNCTION(spi_putc)
spi_putc_rs:
	RESET(MCP2515_CS)
    ff0a:	8e bd       	out	0x2e, r24	; 46

0000ff0c <spi_putc_1>:
    ff0c:	0d b4       	in	r0, 0x2d	; 45
    ff0e:	07 fe       	sbrs	r0, 7
    ff10:	fd cf       	rjmp	.-6      	; 0xff0c <spi_putc_1>
    ff12:	8e b5       	in	r24, 0x2e	; 46
    ff14:	99 27       	eor	r25, r25
    ff16:	08 95       	ret

0000ff18 <mcp2515_write_register>:
; -----------------------------------------------------------------------------
; adress in r24 and data in r22

	_FUNCTION(mcp2515_write_register)
mcp2515_write_register:
	RESET(MCP2515_CS)
    ff18:	2c 98       	cbi	0x05, 4	; 5
	mov		18,	24
    ff1a:	28 2f       	mov	r18, r24
	ldi		24, SPI_WRITE
    ff1c:	82 e0       	ldi	r24, 0x02	; 2
	rcall	spi_putc
    ff1e:	f5 df       	rcall	.-22     	; 0xff0a <spi_putc>
	mov		24, 18
    ff20:	82 2f       	mov	r24, r18
	rcall	spi_putc
    ff22:	f3 df       	rcall	.-26     	; 0xff0a <spi_putc>
	mov		24, 22
    ff24:	86 2f       	mov	r24, r22
	rcall	spi_putc
    ff26:	f1 df       	rcall	.-30     	; 0xff0a <spi_putc>
	rjmp	cs_ret
    ff28:	65 c0       	rjmp	.+202    	; 0xfff4 <cs_ret>

0000ff2a <mcp2515_read_status>:
	_FUNCTION(mcp2515_read_status)
mcp2515_read_status:
	;RESET(MCP2515_CS)

	; the value is already in r24
	rcall	spi_putc_rs
    ff2a:	ee df       	rcall	.-36     	; 0xff08 <spi_putc_rs>

	; write a undefined value => only the return value is interesting
	rcall	spi_putc
    ff2c:	ee df       	rcall	.-36     	; 0xff0a <spi_putc>
	rjmp	cs_ret
    ff2e:	62 c0       	rjmp	.+196    	; 0xfff4 <cs_ret>

0000ff30 <get_message_ret_>:
    ff30:	8f e3       	ldi	r24, 0x3F	; 63
    ff32:	08 95       	ret

0000ff34 <mcp2515_get_message>:
; return type of message, 0x3f = no message

	_FUNCTION(mcp2515_get_message)

get_message_ret_:
	ldi		24, NO_MESSAGE
    ff34:	80 eb       	ldi	r24, 0xB0	; 176
    ff36:	f9 df       	rcall	.-14     	; 0xff2a <mcp2515_read_status>
    ff38:	48 2f       	mov	r20, r24
    ff3a:	22 27       	eor	r18, r18
    ff3c:	47 fd       	sbrc	r20, 7
    ff3e:	25 e7       	ldi	r18, 0x75	; 117
    ff40:	46 fd       	sbrc	r20, 6
    ff42:	25 e6       	ldi	r18, 0x65	; 101
    ff44:	22 23       	and	r18, r18
    ff46:	a1 f3       	breq	.-24     	; 0xff30 <get_message_ret_>
    ff48:	88 71       	andi	r24, 0x18	; 24
    ff4a:	88 23       	and	r24, r24
    ff4c:	f1 f4       	brne	.+60     	; 0xff8a <get_message_reject>
    ff4e:	83 e0       	ldi	r24, 0x03	; 3
    ff50:	db df       	rcall	.-74     	; 0xff08 <spi_putc_rs>
    ff52:	82 2f       	mov	r24, r18
    ff54:	da df       	rcall	.-76     	; 0xff0a <spi_putc>
    ff56:	d9 df       	rcall	.-78     	; 0xff0a <spi_putc>
    ff58:	28 2f       	mov	r18, r24
    ff5a:	2f 70       	andi	r18, 0x0F	; 15
    ff5c:	24 50       	subi	r18, 0x04	; 4
    ff5e:	25 30       	cpi	r18, 0x05	; 5
    ff60:	a4 f4       	brge	.+40     	; 0xff8a <get_message_reject>
    ff62:	20 93 0d 02 	sts	0x020D, r18
    ff66:	d1 df       	rcall	.-94     	; 0xff0a <spi_putc>
    ff68:	8f 3f       	cpi	r24, 0xFF	; 255
    ff6a:	79 f4       	brne	.+30     	; 0xff8a <get_message_reject>
    ff6c:	ce df       	rcall	.-100    	; 0xff0a <spi_putc>
    ff6e:	38 2f       	mov	r19, r24
    ff70:	cc df       	rcall	.-104    	; 0xff0a <spi_putc>
    ff72:	80 93 0c 02 	sts	0x020C, r24
    ff76:	c9 df       	rcall	.-110    	; 0xff0a <spi_putc>
    ff78:	80 93 04 02 	sts	0x0204, r24
    ff7c:	f2 e0       	ldi	r31, 0x02	; 2
    ff7e:	e8 e0       	ldi	r30, 0x08	; 8

0000ff80 <read_data_loop>:
    ff80:	2a 95       	dec	r18
    ff82:	1c f0       	brlt	.+6      	; 0xff8a <get_message_reject>
    ff84:	c2 df       	rcall	.-124    	; 0xff0a <spi_putc>
    ff86:	81 93       	st	Z+, r24
    ff88:	fb cf       	rjmp	.-10     	; 0xff80 <read_data_loop>

0000ff8a <get_message_reject>:
    ff8a:	2c 9a       	sbi	0x05, 4	; 5
    ff8c:	47 fd       	sbrc	r20, 7
    ff8e:	52 e0       	ldi	r21, 0x02	; 2
    ff90:	46 fd       	sbrc	r20, 6
    ff92:	51 e0       	ldi	r21, 0x01	; 1
    ff94:	85 e0       	ldi	r24, 0x05	; 5
    ff96:	b8 df       	rcall	.-144    	; 0xff08 <spi_putc_rs>
    ff98:	8c e2       	ldi	r24, 0x2C	; 44
    ff9a:	b7 df       	rcall	.-146    	; 0xff0a <spi_putc>
    ff9c:	85 2f       	mov	r24, r21
    ff9e:	b5 df       	rcall	.-150    	; 0xff0a <spi_putc>
    ffa0:	80 e0       	ldi	r24, 0x00	; 0
    ffa2:	b3 df       	rcall	.-154    	; 0xff0a <spi_putc>
    ffa4:	83 2f       	mov	r24, r19
    ffa6:	26 c0       	rjmp	.+76     	; 0xfff4 <cs_ret>

0000ffa8 <get_message_ret>:
    ffa8:	8f e3       	ldi	r24, 0x3F	; 63
    ffaa:	08 95       	ret

0000ffac <mcp2515_send_message>:

; -----------------------------------------------------------------------------

	_FUNCTION(mcp2515_send_message)
mcp2515_send_message:
	mov		19, 24		; save type-byte
    ffac:	38 2f       	mov	r19, r24

0000ffae <send_message2>:
	
send_message2:
	; wait until the send buffer is free
	ldi		24, SPI_READ_STATUS
    ffae:	80 ea       	ldi	r24, 0xA0	; 160
	rcall	mcp2515_read_status
    ffb0:	bc df       	rcall	.-136    	; 0xff2a <mcp2515_read_status>

	sbrc	24, 2
    ffb2:	82 fd       	sbrc	r24, 2
	rjmp	send_message2
    ffb4:	fc cf       	rjmp	.-8      	; 0xffae <send_message2>

	; write message
	;RESET(MCP2515_CS)
	ldi		24, SPI_WRITE_TX
    ffb6:	80 e4       	ldi	r24, 0x40	; 64
	rcall	spi_putc_rs
    ffb8:	a7 df       	rcall	.-178    	; 0xff08 <spi_putc_rs>

	; write identifier
	ldi		24, 0xff
    ffba:	8f ef       	ldi	r24, 0xFF	; 255
	rcall	spi_putc
    ffbc:	a6 df       	rcall	.-180    	; 0xff0a <spi_putc>
	ldi		24, 0xc0
    ffbe:	80 ec       	ldi	r24, 0xC0	; 192
	rcall	spi_putc
    ffc0:	a4 df       	rcall	.-184    	; 0xff0a <spi_putc>
	rcall	spi_putc
    ffc2:	a3 df       	rcall	.-186    	; 0xff0a <spi_putc>
	rcall	spi_putc
    ffc4:	a2 df       	rcall	.-188    	; 0xff0a <spi_putc>

	; write DLC => TODO check length
	mov		24, 22
    ffc6:	86 2f       	mov	r24, r22
	subi	24, 256-4		; four extra bytes
    ffc8:	8c 5f       	subi	r24, 0xFC	; 252
	rcall	spi_putc
    ffca:	9f df       	rcall	.-194    	; 0xff0a <spi_putc>

	; write board-id and type
	ldi		24, BOOTLOADER_BOARD_ID
    ffcc:	8f ef       	ldi	r24, 0xFF	; 255
	rcall	spi_putc
    ffce:	9d df       	rcall	.-198    	; 0xff0a <spi_putc>
	mov		24, 19
    ffd0:	83 2f       	mov	r24, r19
	rcall	spi_putc
    ffd2:	9b df       	rcall	.-202    	; 0xff0a <spi_putc>

	lds		24, message_number
    ffd4:	80 91 0c 02 	lds	r24, 0x020C
	rcall	spi_putc
    ffd8:	98 df       	rcall	.-208    	; 0xff0a <spi_putc>
	lds		24, message_data_counter
    ffda:	80 91 04 02 	lds	r24, 0x0204
	rcall	spi_putc
    ffde:	95 df       	rcall	.-214    	; 0xff0a <spi_putc>

	; write payload-data
	ldi		Zh, hi8(message_data)
    ffe0:	f2 e0       	ldi	r31, 0x02	; 2
	ldi		Zl, lo8(message_data)
    ffe2:	e8 e0       	ldi	r30, 0x08	; 8

0000ffe4 <write_data_loop>:
write_data_loop:
	dec		22
    ffe4:	6a 95       	dec	r22
	brlt	write_data_end
    ffe6:	1c f0       	brlt	.+6      	; 0xffee <write_data_end>

	ld		24, Z+
    ffe8:	81 91       	ld	r24, Z+
	rcall	spi_putc
    ffea:	8f df       	rcall	.-226    	; 0xff0a <spi_putc>

	rjmp	write_data_loop
    ffec:	fb cf       	rjmp	.-10     	; 0xffe4 <write_data_loop>

0000ffee <write_data_end>:
write_data_end:
	SET(MCP2515_CS)
    ffee:	2c 9a       	sbi	0x05, 4	; 5

;	nop
;	nop
	ldi		24, SPI_RTS | 1
    fff0:	81 e8       	ldi	r24, 0x81	; 129

	; send buffer
	rcall	spi_putc_rs
    fff2:	8a df       	rcall	.-236    	; 0xff08 <spi_putc_rs>

0000fff4 <cs_ret>:
cs_ret:
	SET(MCP2515_CS)
    fff4:	2c 9a       	sbi	0x05, 4	; 5

	ret
    fff6:	08 95       	ret
