
bin/Debug/can_server.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000a36  00000aca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d4  00800106  00800106  00000ad0  2**0
                  ALLOC
  3 .stab         00002148  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001aaa  00000000  00000000  00002c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000046c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000114  00000000  00000000  00004742  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000780  00000000  00000000  00004856  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003fe  00000000  00000000  00004fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006d7  00000000  00000000  000053d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d0  00000000  00000000  00005aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000279  00000000  00000000  00005b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000003f8  00000000  00000000  00005df5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000000db  00000000  00000000  000061ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000030  00000000  00000000  000062c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_20>
  54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_21>
  58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  68:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  6c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

00000070 <_mcp2515_cnf>:
  70:	04 b6 e7 04 b6 d3 04 b6 c7 04 b6 c3 02 90 07 03     ................
  80:	ac 81 03 ac 80 02 90 00                             ........

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d0 e1       	ldi	r29, 0x10	; 16
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_clear_bss>:
  94:	11 e0       	ldi	r17, 0x01	; 1
  96:	a6 e0       	ldi	r26, 0x06	; 6
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
  9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
  9e:	aa 3d       	cpi	r26, 0xDA	; 218
  a0:	b1 07       	cpc	r27, r17
  a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e6 e3       	ldi	r30, 0x36	; 54
  ac:	fa e0       	ldi	r31, 0x0A	; 10
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
  b0:	05 90       	lpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a6 30       	cpi	r26, 0x06	; 6
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>
  ba:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  be:	0c 94 19 05 	jmp	0xa32	; 0xa32 <_exit>

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <main>:

	MCP2515_FILTER(0),				// Mask 0 (for group 0)
	MCP2515_FILTER_EXTENDED(0),		// Mask 1 (for group 1)
};*/

int main () {
  c6:	1f 93       	push	r17
  c8:	df 93       	push	r29
  ca:	cf 93       	push	r28
  cc:	00 d0       	rcall	.+0      	; 0xce <main+0x8>
  ce:	00 d0       	rcall	.+0      	; 0xd0 <main+0xa>
  d0:	0f 92       	push	r0
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
    init_leds();
  d6:	0e 94 c2 00 	call	0x184	; 0x184 <_Z9init_ledsv>
    uart_init(9600);
  da:	60 e8       	ldi	r22, 0x80	; 128
  dc:	75 e2       	ldi	r23, 0x25	; 37
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_Z9uart_initl>

    led(true, true);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z3ledbb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	9f e7       	ldi	r25, 0x7F	; 127
  f2:	a6 e1       	ldi	r26, 0x16	; 22
  f4:	81 50       	subi	r24, 0x01	; 1
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	a0 40       	sbci	r26, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x2e>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x38>
  fe:	00 00       	nop
    _delay_ms(500);
    led(false, false);
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z3ledbb>
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	9f e7       	ldi	r25, 0x7F	; 127
 10c:	a6 e1       	ldi	r26, 0x16	; 22
 10e:	81 50       	subi	r24, 0x01	; 1
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	a0 40       	sbci	r26, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x48>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x52>
 118:	00 00       	nop
    _delay_ms(500);

    /** CAN TESTING HERE **/
    can_init(BITRATE_500_KBPS);
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 bd 02 	call	0x57a	; 0x57a <can_init>

    //can_static_filter(can_filter);

    led(0, 1);
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z3ledbb>
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	9f e7       	ldi	r25, 0x7F	; 127
 12e:	a6 e1       	ldi	r26, 0x16	; 22
 130:	81 50       	subi	r24, 0x01	; 1
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	a0 40       	sbci	r26, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x6a>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x74>
 13a:	00 00       	nop
    _delay_ms(500);
    led(0, 0);
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	0e 94 c5 00 	call	0x18a	; 0x18a <_Z3ledbb>

    /// DEFINING FILTERS
    //filter 0
    can_filter_t filter0;
    filter0.id = 0x0;
 144:	1a 82       	std	Y+2, r1	; 0x02
 146:	19 82       	std	Y+1, r1	; 0x01
    filter0.mask = 0x0;
 148:	1c 82       	std	Y+4, r1	; 0x04
 14a:	1b 82       	std	Y+3, r1	; 0x03

    //filter0.id = 0xB30;
    //filter0.mask = 0x000;

    filter0.flags.rtr = 0;
 14c:	8d 81       	ldd	r24, Y+5	; 0x05
 14e:	8c 7f       	andi	r24, 0xFC	; 252
 150:	8d 83       	std	Y+5, r24	; 0x05
    filter1.flags.extended = 0;*/

    // other filters
    //can_filter_t filterX = filter1;

    can_set_filter(0, &filter0);
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	be 01       	movw	r22, r28
 156:	6f 5f       	subi	r22, 0xFF	; 255
 158:	7f 4f       	sbci	r23, 0xFF	; 255
 15a:	0e 94 2b 03 	call	0x656	; 0x656 <can_set_filter>
        }*/


        char* data = (char*) malloc(2);
        memset (data, 0, 2);
        *data = '.';
 15e:	1e e2       	ldi	r17, 0x2E	; 46
                led(false, false);
            }
        }*/


        char* data = (char*) malloc(2);
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 e6 03 	call	0x7cc	; 0x7cc <malloc>
 168:	fc 01       	movw	r30, r24
        memset (data, 0, 2);
        *data = '.';
 16a:	10 83       	st	Z, r17
        *(data+1) = '\0';
 16c:	11 82       	std	Z+1, r1	; 0x01
        uart_putstr(data);
 16e:	0e 94 15 02 	call	0x42a	; 0x42a <_Z11uart_putstrPKc>
 172:	89 e9       	ldi	r24, 0x99	; 153
 174:	99 e5       	ldi	r25, 0x59	; 89
 176:	a1 e0       	ldi	r26, 0x01	; 1
 178:	81 50       	subi	r24, 0x01	; 1
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	a0 40       	sbci	r26, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0xb2>
 180:	00 00       	nop
 182:	ee cf       	rjmp	.-36     	; 0x160 <main+0x9a>

00000184 <_Z9init_ledsv>:

#include "can.h"
#include "can_testing.h"

void init_leds() {
    DDRB = 0b00000011;  // set pins for LEDs as output
 184:	83 e0       	ldi	r24, 0x03	; 3
 186:	84 b9       	out	0x04, r24	; 4
    return;
}
 188:	08 95       	ret

0000018a <_Z3ledbb>:

void led (bool green, bool red) {
    if (green) PORTB |= (1 << 0);
 18a:	88 23       	and	r24, r24
 18c:	29 f0       	breq	.+10     	; 0x198 <_Z3ledbb+0xe>
 18e:	28 9a       	sbi	0x05, 0	; 5
    else PORTB &= ~(1 << 0);

    if (red) PORTB |= (1 << 1);
 190:	66 23       	and	r22, r22
 192:	29 f4       	brne	.+10     	; 0x19e <_Z3ledbb+0x14>
    else PORTB &= ~(1 << 1);
 194:	29 98       	cbi	0x05, 1	; 5
 196:	08 95       	ret
    return;
}

void led (bool green, bool red) {
    if (green) PORTB |= (1 << 0);
    else PORTB &= ~(1 << 0);
 198:	28 98       	cbi	0x05, 0	; 5

    if (red) PORTB |= (1 << 1);
 19a:	66 23       	and	r22, r22
 19c:	d9 f3       	breq	.-10     	; 0x194 <_Z3ledbb+0xa>
 19e:	29 9a       	sbi	0x05, 1	; 5
 1a0:	08 95       	ret

000001a2 <__vector_21>:
volatile char uart_rx_buffer[UART_BUFFER_SIZE];
volatile short uart_rx_write;
volatile short uart_rx_read;

ISR(USART0_UDRE_vect)
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
    if(uart_tx_read == uart_tx_write)
 1b8:	20 91 6c 01 	lds	r18, 0x016C
 1bc:	30 91 6d 01 	lds	r19, 0x016D
 1c0:	80 91 6a 01 	lds	r24, 0x016A
 1c4:	90 91 6b 01 	lds	r25, 0x016B
 1c8:	28 17       	cp	r18, r24
 1ca:	39 07       	cpc	r19, r25
 1cc:	41 f1       	breq	.+80     	; 0x21e <__vector_21+0x7c>
    {
        UCSR0B &= ~(1 << 5);
        return;
    }

    UDR0 = uart_tx_buffer[uart_tx_read];
 1ce:	e0 91 6c 01 	lds	r30, 0x016C
 1d2:	f0 91 6d 01 	lds	r31, 0x016D
 1d6:	ea 5f       	subi	r30, 0xFA	; 250
 1d8:	fe 4f       	sbci	r31, 0xFE	; 254
 1da:	80 81       	ld	r24, Z
 1dc:	80 93 c6 00 	sts	0x00C6, r24

    uart_tx_read++;
 1e0:	80 91 6c 01 	lds	r24, 0x016C
 1e4:	90 91 6d 01 	lds	r25, 0x016D
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	90 93 6d 01 	sts	0x016D, r25
 1ee:	80 93 6c 01 	sts	0x016C, r24

    if(uart_tx_read >= UART_BUFFER_SIZE)
 1f2:	80 91 6c 01 	lds	r24, 0x016C
 1f6:	90 91 6d 01 	lds	r25, 0x016D
 1fa:	84 36       	cpi	r24, 0x64	; 100
 1fc:	91 05       	cpc	r25, r1
 1fe:	24 f0       	brlt	.+8      	; 0x208 <__vector_21+0x66>
    {
        uart_tx_read = 0;
 200:	10 92 6d 01 	sts	0x016D, r1
 204:	10 92 6c 01 	sts	0x016C, r1
    }
}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	3f 91       	pop	r19
 212:	2f 91       	pop	r18
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

ISR(USART0_UDRE_vect)
{
    if(uart_tx_read == uart_tx_write)
    {
        UCSR0B &= ~(1 << 5);
 21e:	80 91 c1 00 	lds	r24, 0x00C1
 222:	8f 7d       	andi	r24, 0xDF	; 223
 224:	80 93 c1 00 	sts	0x00C1, r24
        return;
 228:	ef cf       	rjmp	.-34     	; 0x208 <__vector_21+0x66>

0000022a <__vector_20>:
    }
}


ISR(USART0_RX_vect)
{
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	2f 93       	push	r18
 236:	3f 93       	push	r19
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
 23c:	ef 93       	push	r30
 23e:	ff 93       	push	r31
    if(uart_rx_write + 1 == uart_rx_read || (uart_rx_read == 0 && uart_rx_write + 1 == UART_BUFFER_SIZE))
 240:	80 91 d2 01 	lds	r24, 0x01D2
 244:	90 91 d3 01 	lds	r25, 0x01D3
 248:	20 91 d4 01 	lds	r18, 0x01D4
 24c:	30 91 d5 01 	lds	r19, 0x01D5
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	82 17       	cp	r24, r18
 254:	93 07       	cpc	r25, r19
 256:	a9 f1       	breq	.+106    	; 0x2c2 <__vector_20+0x98>
 258:	80 91 d4 01 	lds	r24, 0x01D4
 25c:	90 91 d5 01 	lds	r25, 0x01D5
 260:	00 97       	sbiw	r24, 0x00	; 0
 262:	39 f4       	brne	.+14     	; 0x272 <__vector_20+0x48>
 264:	80 91 d2 01 	lds	r24, 0x01D2
 268:	90 91 d3 01 	lds	r25, 0x01D3
 26c:	83 36       	cpi	r24, 0x63	; 99
 26e:	91 05       	cpc	r25, r1
 270:	41 f1       	breq	.+80     	; 0x2c2 <__vector_20+0x98>
    {
        UDR0;
        return;
    }

    uart_rx_buffer[uart_rx_write] = UDR0;
 272:	e0 91 d2 01 	lds	r30, 0x01D2
 276:	f0 91 d3 01 	lds	r31, 0x01D3
 27a:	80 91 c6 00 	lds	r24, 0x00C6
 27e:	e2 59       	subi	r30, 0x92	; 146
 280:	fe 4f       	sbci	r31, 0xFE	; 254
 282:	80 83       	st	Z, r24
	uart_rx_write++;
 284:	80 91 d2 01 	lds	r24, 0x01D2
 288:	90 91 d3 01 	lds	r25, 0x01D3
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	90 93 d3 01 	sts	0x01D3, r25
 292:	80 93 d2 01 	sts	0x01D2, r24

    if(uart_rx_write >= UART_BUFFER_SIZE)
 296:	80 91 d2 01 	lds	r24, 0x01D2
 29a:	90 91 d3 01 	lds	r25, 0x01D3
 29e:	84 36       	cpi	r24, 0x64	; 100
 2a0:	91 05       	cpc	r25, r1
 2a2:	24 f0       	brlt	.+8      	; 0x2ac <__vector_20+0x82>
    {
        uart_rx_write = 0;
 2a4:	10 92 d3 01 	sts	0x01D3, r1
 2a8:	10 92 d2 01 	sts	0x01D2, r1
    }
}
 2ac:	ff 91       	pop	r31
 2ae:	ef 91       	pop	r30
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

ISR(USART0_RX_vect)
{
    if(uart_rx_write + 1 == uart_rx_read || (uart_rx_read == 0 && uart_rx_write + 1 == UART_BUFFER_SIZE))
    {
        UDR0;
 2c2:	80 91 c6 00 	lds	r24, 0x00C6
        return;
 2c6:	f2 cf       	rjmp	.-28     	; 0x2ac <__vector_20+0x82>

000002c8 <_Z9uart_initl>:
    }
}


void uart_init(long baud)
{
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	9b 01       	movw	r18, r22
 2ce:	ac 01       	movw	r20, r24
    //Senden aktivieren
    UCSR0B |= (1 << 3);
 2d0:	c1 ec       	ldi	r28, 0xC1	; 193
 2d2:	d0 e0       	ldi	r29, 0x00	; 0
 2d4:	88 81       	ld	r24, Y
 2d6:	88 60       	ori	r24, 0x08	; 8
 2d8:	88 83       	st	Y, r24

    //Empfang aktivieren
    UCSR0B |= (1 << 4);
 2da:	88 81       	ld	r24, Y
 2dc:	80 61       	ori	r24, 0x10	; 16
 2de:	88 83       	st	Y, r24

    //Baud setzen
    short UBRR = (F_CPU/(16*baud))-1;
 2e0:	22 0f       	add	r18, r18
 2e2:	33 1f       	adc	r19, r19
 2e4:	44 1f       	adc	r20, r20
 2e6:	55 1f       	adc	r21, r21
 2e8:	22 0f       	add	r18, r18
 2ea:	33 1f       	adc	r19, r19
 2ec:	44 1f       	adc	r20, r20
 2ee:	55 1f       	adc	r21, r21
 2f0:	22 0f       	add	r18, r18
 2f2:	33 1f       	adc	r19, r19
 2f4:	44 1f       	adc	r20, r20
 2f6:	55 1f       	adc	r21, r21
 2f8:	22 0f       	add	r18, r18
 2fa:	33 1f       	adc	r19, r19
 2fc:	44 1f       	adc	r20, r20
 2fe:	55 1f       	adc	r21, r21
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	81 ee       	ldi	r24, 0xE1	; 225
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 c4 03 	call	0x788	; 0x788 <__udivmodsi4>
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	30 40       	sbci	r19, 0x00	; 0
    UBRR0H = UBRR >> 8;
 310:	83 2f       	mov	r24, r19
 312:	99 27       	eor	r25, r25
 314:	87 fd       	sbrc	r24, 7
 316:	9a 95       	dec	r25
 318:	80 93 c5 00 	sts	0x00C5, r24
    UBRR0L = UBRR & 0xFF;
 31c:	20 93 c4 00 	sts	0x00C4, r18
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 320:	86 e0       	ldi	r24, 0x06	; 6
 322:	80 93 c2 00 	sts	0x00C2, r24

    //Interrupts global aktivieren
    sei();
 326:	78 94       	sei

    //Empfangsinterrupt aktivieren
    UCSR0B |= (1 << 7);
 328:	88 81       	ld	r24, Y
 32a:	80 68       	ori	r24, 0x80	; 128
 32c:	88 83       	st	Y, r24

    //Bufferzeiger setzen
    uart_tx_read = 0;
 32e:	10 92 6d 01 	sts	0x016D, r1
 332:	10 92 6c 01 	sts	0x016C, r1
    uart_tx_write = 0;
 336:	10 92 6b 01 	sts	0x016B, r1
 33a:	10 92 6a 01 	sts	0x016A, r1

    uart_rx_read = 0;
 33e:	10 92 d5 01 	sts	0x01D5, r1
 342:	10 92 d4 01 	sts	0x01D4, r1
    uart_rx_write = 0;
 346:	10 92 d3 01 	sts	0x01D3, r1
 34a:	10 92 d2 01 	sts	0x01D2, r1

}
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <_Z9uart_putcc>:


unsigned char uart_putc(char c)
{
    if(uart_tx_write + 1 == uart_tx_read || (uart_tx_read == 0 && uart_tx_write + 1 == UART_BUFFER_SIZE))
 354:	20 91 6a 01 	lds	r18, 0x016A
 358:	30 91 6b 01 	lds	r19, 0x016B
 35c:	40 91 6c 01 	lds	r20, 0x016C
 360:	50 91 6d 01 	lds	r21, 0x016D
 364:	2f 5f       	subi	r18, 0xFF	; 255
 366:	3f 4f       	sbci	r19, 0xFF	; 255
 368:	24 17       	cp	r18, r20
 36a:	35 07       	cpc	r19, r21
 36c:	81 f1       	breq	.+96     	; 0x3ce <_Z9uart_putcc+0x7a>
 36e:	20 91 6c 01 	lds	r18, 0x016C
 372:	30 91 6d 01 	lds	r19, 0x016D
 376:	21 15       	cp	r18, r1
 378:	31 05       	cpc	r19, r1
 37a:	39 f4       	brne	.+14     	; 0x38a <_Z9uart_putcc+0x36>
 37c:	20 91 6a 01 	lds	r18, 0x016A
 380:	30 91 6b 01 	lds	r19, 0x016B
 384:	23 36       	cpi	r18, 0x63	; 99
 386:	31 05       	cpc	r19, r1
 388:	21 f1       	breq	.+72     	; 0x3d2 <_Z9uart_putcc+0x7e>
    {
        return 1;
    }

    uart_tx_buffer[uart_tx_write] = c;
 38a:	e0 91 6a 01 	lds	r30, 0x016A
 38e:	f0 91 6b 01 	lds	r31, 0x016B
 392:	ea 5f       	subi	r30, 0xFA	; 250
 394:	fe 4f       	sbci	r31, 0xFE	; 254
 396:	80 83       	st	Z, r24
	uart_tx_write++;
 398:	80 91 6a 01 	lds	r24, 0x016A
 39c:	90 91 6b 01 	lds	r25, 0x016B
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	90 93 6b 01 	sts	0x016B, r25
 3a6:	80 93 6a 01 	sts	0x016A, r24

    if(uart_tx_write >= UART_BUFFER_SIZE)
 3aa:	80 91 6a 01 	lds	r24, 0x016A
 3ae:	90 91 6b 01 	lds	r25, 0x016B
 3b2:	84 36       	cpi	r24, 0x64	; 100
 3b4:	91 05       	cpc	r25, r1
 3b6:	24 f0       	brlt	.+8      	; 0x3c0 <_Z9uart_putcc+0x6c>
    {
        uart_tx_write = 0;
 3b8:	10 92 6b 01 	sts	0x016B, r1
 3bc:	10 92 6a 01 	sts	0x016A, r1
    }

	UCSR0B |= 1 << 5;
 3c0:	80 91 c1 00 	lds	r24, 0x00C1
 3c4:	80 62       	ori	r24, 0x20	; 32
 3c6:	80 93 c1 00 	sts	0x00C1, r24

    return 0;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	08 95       	ret

unsigned char uart_putc(char c)
{
    if(uart_tx_write + 1 == uart_tx_read || (uart_tx_read == 0 && uart_tx_write + 1 == UART_BUFFER_SIZE))
    {
        return 1;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	08 95       	ret
 3d2:	81 e0       	ldi	r24, 0x01	; 1
    }

	UCSR0B |= 1 << 5;

    return 0;
}
 3d4:	08 95       	ret

000003d6 <_Z9uart_getcv>:

unsigned char uart_getc()
{
    if(uart_rx_read == uart_rx_write)
 3d6:	20 91 d4 01 	lds	r18, 0x01D4
 3da:	30 91 d5 01 	lds	r19, 0x01D5
 3de:	80 91 d2 01 	lds	r24, 0x01D2
 3e2:	90 91 d3 01 	lds	r25, 0x01D3
 3e6:	28 17       	cp	r18, r24
 3e8:	39 07       	cpc	r19, r25
 3ea:	e9 f0       	breq	.+58     	; 0x426 <_Z9uart_getcv+0x50>
    {
        return 0;
    }

    unsigned char tmp = uart_rx_buffer[uart_rx_read];
 3ec:	e0 91 d4 01 	lds	r30, 0x01D4
 3f0:	f0 91 d5 01 	lds	r31, 0x01D5
 3f4:	e2 59       	subi	r30, 0x92	; 146
 3f6:	fe 4f       	sbci	r31, 0xFE	; 254
 3f8:	80 81       	ld	r24, Z

    uart_rx_read++;
 3fa:	20 91 d4 01 	lds	r18, 0x01D4
 3fe:	30 91 d5 01 	lds	r19, 0x01D5
 402:	2f 5f       	subi	r18, 0xFF	; 255
 404:	3f 4f       	sbci	r19, 0xFF	; 255
 406:	30 93 d5 01 	sts	0x01D5, r19
 40a:	20 93 d4 01 	sts	0x01D4, r18

    if(uart_rx_read >= UART_BUFFER_SIZE)
 40e:	20 91 d4 01 	lds	r18, 0x01D4
 412:	30 91 d5 01 	lds	r19, 0x01D5
 416:	24 36       	cpi	r18, 0x64	; 100
 418:	31 05       	cpc	r19, r1
 41a:	34 f0       	brlt	.+12     	; 0x428 <_Z9uart_getcv+0x52>
    {
        uart_rx_read = 0;
 41c:	10 92 d5 01 	sts	0x01D5, r1
 420:	10 92 d4 01 	sts	0x01D4, r1
 424:	08 95       	ret

unsigned char uart_getc()
{
    if(uart_rx_read == uart_rx_write)
    {
        return 0;
 426:	80 e0       	ldi	r24, 0x00	; 0
    {
        uart_rx_read = 0;
    }

    return tmp;
}
 428:	08 95       	ret

0000042a <_Z11uart_putstrPKc>:

unsigned char uart_putstr(const char str[])
{
 42a:	dc 01       	movw	r26, r24
    unsigned short i;

    for( i=0 ; str[i] != '\0' ; i++ )
 42c:	6c 91       	ld	r22, X
 42e:	66 23       	and	r22, r22
 430:	09 f4       	brne	.+2      	; 0x434 <_Z11uart_putstrPKc+0xa>
 432:	52 c0       	rjmp	.+164    	; 0x4d8 <_Z11uart_putstrPKc+0xae>
}


unsigned char uart_putc(char c)
{
    if(uart_tx_write + 1 == uart_tx_read || (uart_tx_read == 0 && uart_tx_write + 1 == UART_BUFFER_SIZE))
 434:	20 91 6a 01 	lds	r18, 0x016A
 438:	30 91 6b 01 	lds	r19, 0x016B
 43c:	80 91 6c 01 	lds	r24, 0x016C
 440:	90 91 6d 01 	lds	r25, 0x016D
 444:	2f 5f       	subi	r18, 0xFF	; 255
 446:	3f 4f       	sbci	r19, 0xFF	; 255
 448:	28 17       	cp	r18, r24
 44a:	39 07       	cpc	r19, r25
 44c:	09 f4       	brne	.+2      	; 0x450 <_Z11uart_putstrPKc+0x26>
 44e:	40 c0       	rjmp	.+128    	; 0x4d0 <_Z11uart_putstrPKc+0xa6>
    }

    return tmp;
}

unsigned char uart_putstr(const char str[])
 450:	11 96       	adiw	r26, 0x01	; 1
}


unsigned char uart_putc(char c)
{
    if(uart_tx_write + 1 == uart_tx_read || (uart_tx_read == 0 && uart_tx_write + 1 == UART_BUFFER_SIZE))
 452:	20 91 6c 01 	lds	r18, 0x016C
 456:	30 91 6d 01 	lds	r19, 0x016D
 45a:	21 15       	cp	r18, r1
 45c:	31 05       	cpc	r19, r1
 45e:	39 f4       	brne	.+14     	; 0x46e <_Z11uart_putstrPKc+0x44>
 460:	80 91 6a 01 	lds	r24, 0x016A
 464:	90 91 6b 01 	lds	r25, 0x016B
 468:	83 36       	cpi	r24, 0x63	; 99
 46a:	91 05       	cpc	r25, r1
 46c:	99 f1       	breq	.+102    	; 0x4d4 <_Z11uart_putstrPKc+0xaa>
    {
        return 1;
    }

    uart_tx_buffer[uart_tx_write] = c;
 46e:	e0 91 6a 01 	lds	r30, 0x016A
 472:	f0 91 6b 01 	lds	r31, 0x016B
 476:	ea 5f       	subi	r30, 0xFA	; 250
 478:	fe 4f       	sbci	r31, 0xFE	; 254
 47a:	60 83       	st	Z, r22
	uart_tx_write++;
 47c:	20 91 6a 01 	lds	r18, 0x016A
 480:	30 91 6b 01 	lds	r19, 0x016B
 484:	2f 5f       	subi	r18, 0xFF	; 255
 486:	3f 4f       	sbci	r19, 0xFF	; 255
 488:	30 93 6b 01 	sts	0x016B, r19
 48c:	20 93 6a 01 	sts	0x016A, r18

    if(uart_tx_write >= UART_BUFFER_SIZE)
 490:	80 91 6a 01 	lds	r24, 0x016A
 494:	90 91 6b 01 	lds	r25, 0x016B
 498:	84 36       	cpi	r24, 0x64	; 100
 49a:	91 05       	cpc	r25, r1
 49c:	24 f0       	brlt	.+8      	; 0x4a6 <_Z11uart_putstrPKc+0x7c>
    {
        uart_tx_write = 0;
 49e:	10 92 6b 01 	sts	0x016B, r1
 4a2:	10 92 6a 01 	sts	0x016A, r1
    }

	UCSR0B |= 1 << 5;
 4a6:	80 91 c1 00 	lds	r24, 0x00C1
 4aa:	80 62       	ori	r24, 0x20	; 32
 4ac:	80 93 c1 00 	sts	0x00C1, r24

unsigned char uart_putstr(const char str[])
{
    unsigned short i;

    for( i=0 ; str[i] != '\0' ; i++ )
 4b0:	6d 91       	ld	r22, X+
 4b2:	66 23       	and	r22, r22
 4b4:	89 f0       	breq	.+34     	; 0x4d8 <_Z11uart_putstrPKc+0xae>
}


unsigned char uart_putc(char c)
{
    if(uart_tx_write + 1 == uart_tx_read || (uart_tx_read == 0 && uart_tx_write + 1 == UART_BUFFER_SIZE))
 4b6:	20 91 6a 01 	lds	r18, 0x016A
 4ba:	30 91 6b 01 	lds	r19, 0x016B
 4be:	40 91 6c 01 	lds	r20, 0x016C
 4c2:	50 91 6d 01 	lds	r21, 0x016D
 4c6:	2f 5f       	subi	r18, 0xFF	; 255
 4c8:	3f 4f       	sbci	r19, 0xFF	; 255
 4ca:	24 17       	cp	r18, r20
 4cc:	35 07       	cpc	r19, r21
 4ce:	09 f6       	brne	.-126    	; 0x452 <_Z11uart_putstrPKc+0x28>

    for( i=0 ; str[i] != '\0' ; i++ )
    {
        if( uart_putc(str[i]) != 0 )
        {
            return 1;
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	08 95       	ret
 4d4:	81 e0       	ldi	r24, 0x01	; 1
        }
    }

    return 0;
}
 4d6:	08 95       	ret
        {
            return 1;
        }
    }

    return 0;
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	08 95       	ret

000004dc <mcp2515_write_register>:
	#error	invaild value of MCP2515_CLKOUT_PRESCALER
#endif

// -------------------------------------------------------------------------
void mcp2515_write_register( uint8_t adress, uint8_t data )
{
 4dc:	1f 93       	push	r17
 4de:	df 93       	push	r29
 4e0:	cf 93       	push	r28
 4e2:	0f 92       	push	r0
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
 4e8:	18 2f       	mov	r17, r24
	RESET(MCP2515_CS);
 4ea:	2c 98       	cbi	0x05, 4	; 5
	
	spi_putc(SPI_WRITE);
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	69 83       	std	Y+1, r22	; 0x01
 4f0:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	spi_putc(adress);
 4f4:	81 2f       	mov	r24, r17
 4f6:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	spi_putc(data);
 4fa:	69 81       	ldd	r22, Y+1	; 0x01
 4fc:	86 2f       	mov	r24, r22
 4fe:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	
	SET(MCP2515_CS);
 502:	2c 9a       	sbi	0x05, 4	; 5
}
 504:	0f 90       	pop	r0
 506:	cf 91       	pop	r28
 508:	df 91       	pop	r29
 50a:	1f 91       	pop	r17
 50c:	08 95       	ret

0000050e <mcp2515_read_register>:

// -------------------------------------------------------------------------
uint8_t mcp2515_read_register(uint8_t adress)
{
 50e:	1f 93       	push	r17
 510:	18 2f       	mov	r17, r24
	uint8_t data;
	
	RESET(MCP2515_CS);
 512:	2c 98       	cbi	0x05, 4	; 5
	
	spi_putc(SPI_READ);
 514:	83 e0       	ldi	r24, 0x03	; 3
 516:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	spi_putc(adress);
 51a:	81 2f       	mov	r24, r17
 51c:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	
	data = spi_putc(0xff);	
 520:	8f ef       	ldi	r24, 0xFF	; 255
 522:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	
	SET(MCP2515_CS);
 526:	2c 9a       	sbi	0x05, 4	; 5
	
	return data;
}
 528:	1f 91       	pop	r17
 52a:	08 95       	ret

0000052c <mcp2515_bit_modify>:

// -------------------------------------------------------------------------
void mcp2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data)
{
 52c:	1f 93       	push	r17
 52e:	df 93       	push	r29
 530:	cf 93       	push	r28
 532:	00 d0       	rcall	.+0      	; 0x534 <mcp2515_bit_modify+0x8>
 534:	cd b7       	in	r28, 0x3d	; 61
 536:	de b7       	in	r29, 0x3e	; 62
 538:	18 2f       	mov	r17, r24
	RESET(MCP2515_CS);
 53a:	2c 98       	cbi	0x05, 4	; 5
	
	spi_putc(SPI_BIT_MODIFY);
 53c:	85 e0       	ldi	r24, 0x05	; 5
 53e:	4a 83       	std	Y+2, r20	; 0x02
 540:	69 83       	std	Y+1, r22	; 0x01
 542:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	spi_putc(adress);
 546:	81 2f       	mov	r24, r17
 548:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	spi_putc(mask);
 54c:	69 81       	ldd	r22, Y+1	; 0x01
 54e:	86 2f       	mov	r24, r22
 550:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	spi_putc(data);
 554:	4a 81       	ldd	r20, Y+2	; 0x02
 556:	84 2f       	mov	r24, r20
 558:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	
	SET(MCP2515_CS);
 55c:	2c 9a       	sbi	0x05, 4	; 5
}
 55e:	0f 90       	pop	r0
 560:	0f 90       	pop	r0
 562:	cf 91       	pop	r28
 564:	df 91       	pop	r29
 566:	1f 91       	pop	r17
 568:	08 95       	ret

0000056a <mcp2515_read_status>:
// ----------------------------------------------------------------------------
uint8_t mcp2515_read_status(uint8_t type)
{
	uint8_t data;
	
	RESET(MCP2515_CS);
 56a:	2c 98       	cbi	0x05, 4	; 5
	
	spi_putc(type);
 56c:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	data = spi_putc(0xff);
 570:	8f ef       	ldi	r24, 0xFF	; 255
 572:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	
	SET(MCP2515_CS);
 576:	2c 9a       	sbi	0x05, 4	; 5
	
	return data;
}
 578:	08 95       	ret

0000057a <can_init>:
	}
};

// -------------------------------------------------------------------------
bool mcp2515_init(uint8_t bitrate)
{
 57a:	ef 92       	push	r14
 57c:	ff 92       	push	r15
 57e:	0f 93       	push	r16
 580:	1f 93       	push	r17
 582:	df 93       	push	r29
 584:	cf 93       	push	r28
 586:	0f 92       	push	r0
 588:	cd b7       	in	r28, 0x3d	; 61
 58a:	de b7       	in	r29, 0x3e	; 62
 58c:	18 2f       	mov	r17, r24
	if (bitrate >= 8)
 58e:	88 30       	cpi	r24, 0x08	; 8
 590:	08 f0       	brcs	.+2      	; 0x594 <can_init+0x1a>
 592:	58 c0       	rjmp	.+176    	; 0x644 <can_init+0xca>
		return false;
	
	SET(MCP2515_CS);
 594:	2c 9a       	sbi	0x05, 4	; 5
	SET_OUTPUT(MCP2515_CS);
 596:	24 9a       	sbi	0x04, 4	; 4
	
	// Aktivieren der Pins fuer das SPI Interface
	RESET(P_SCK);
 598:	2f 98       	cbi	0x05, 7	; 5
	RESET(P_MOSI);
 59a:	2d 98       	cbi	0x05, 5	; 5
	RESET(P_MISO);
 59c:	2e 98       	cbi	0x05, 6	; 5
	
	SET_OUTPUT(P_SCK);
 59e:	27 9a       	sbi	0x04, 7	; 4
	SET_OUTPUT(P_MOSI);
 5a0:	25 9a       	sbi	0x04, 5	; 4
	SET_INPUT(P_MISO);
 5a2:	26 98       	cbi	0x04, 6	; 4
	
	// SPI Einstellung setzen
	mcp2515_spi_init();
 5a4:	0e 94 b9 03 	call	0x772	; 0x772 <mcp2515_spi_init>
	
	// MCP2515 per Software Reset zuruecksetzten,
	// danach ist er automatisch im Konfigurations Modus
	RESET(MCP2515_CS);
 5a8:	2c 98       	cbi	0x05, 4	; 5
	spi_putc(SPI_RESET);
 5aa:	80 ec       	ldi	r24, 0xC0	; 192
 5ac:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
 5b0:	86 e6       	ldi	r24, 0x66	; 102
 5b2:	9e e0       	ldi	r25, 0x0E	; 14
 5b4:	01 97       	sbiw	r24, 0x01	; 1
 5b6:	f1 f7       	brne	.-4      	; 0x5b4 <can_init+0x3a>
 5b8:	00 00       	nop
	
	_delay_ms(1);
	
	SET(MCP2515_CS);
 5ba:	2c 9a       	sbi	0x05, 4	; 5
 5bc:	ef ef       	ldi	r30, 0xFF	; 255
 5be:	ff e8       	ldi	r31, 0x8F	; 143
 5c0:	31 97       	sbiw	r30, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <can_init+0x46>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <can_init+0x4c>
 5c6:	00 00       	nop
	
	// ein bisschen warten bis der MCP2515 sich neu gestartet hat
	_delay_ms(10);
	
	// CNF1..3 Register laden (Bittiming)
	RESET(MCP2515_CS);
 5c8:	2c 98       	cbi	0x05, 4	; 5
	spi_putc(SPI_WRITE);
 5ca:	82 e0       	ldi	r24, 0x02	; 2
 5cc:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	spi_putc(CNF3);
 5d0:	88 e2       	ldi	r24, 0x28	; 40
 5d2:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	for (uint8_t i=0; i<3 ;i++ ) {
		spi_putc(pgm_read_byte(&_mcp2515_cnf[bitrate][i]));
 5d6:	83 e0       	ldi	r24, 0x03	; 3
 5d8:	18 9f       	mul	r17, r24
 5da:	70 01       	movw	r14, r0
 5dc:	11 24       	eor	r1, r1
		0
	}
};

// -------------------------------------------------------------------------
bool mcp2515_init(uint8_t bitrate)
 5de:	87 01       	movw	r16, r14
 5e0:	00 59       	subi	r16, 0x90	; 144
 5e2:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// CNF1..3 Register laden (Bittiming)
	RESET(MCP2515_CS);
	spi_putc(SPI_WRITE);
	spi_putc(CNF3);
	for (uint8_t i=0; i<3 ;i++ ) {
 5e4:	90 e0       	ldi	r25, 0x00	; 0
		spi_putc(pgm_read_byte(&_mcp2515_cnf[bitrate][i]));
 5e6:	f8 01       	movw	r30, r16
 5e8:	84 91       	lpm	r24, Z+
 5ea:	99 83       	std	Y+1, r25	; 0x01
 5ec:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	
	// CNF1..3 Register laden (Bittiming)
	RESET(MCP2515_CS);
	spi_putc(SPI_WRITE);
	spi_putc(CNF3);
	for (uint8_t i=0; i<3 ;i++ ) {
 5f0:	99 81       	ldd	r25, Y+1	; 0x01
 5f2:	9f 5f       	subi	r25, 0xFF	; 255
 5f4:	0f 5f       	subi	r16, 0xFF	; 255
 5f6:	1f 4f       	sbci	r17, 0xFF	; 255
 5f8:	93 30       	cpi	r25, 0x03	; 3
 5fa:	a9 f7       	brne	.-22     	; 0x5e6 <can_init+0x6c>
		spi_putc(pgm_read_byte(&_mcp2515_cnf[bitrate][i]));
	}
	// aktivieren/deaktivieren der Interrupts
	spi_putc(MCP2515_INTERRUPTS);
 5fc:	83 e0       	ldi	r24, 0x03	; 3
 5fe:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	SET(MCP2515_CS);
 602:	2c 9a       	sbi	0x05, 4	; 5
	
	// TXnRTS Bits als Inputs schalten
	mcp2515_write_register(TXRTSCTRL, 0);
 604:	8d e0       	ldi	r24, 0x0D	; 13
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_write_register>
	
	#if defined(MCP2515_INT)
		SET_INPUT(MCP2515_INT);
 60c:	22 98       	cbi	0x04, 2	; 4
		SET(MCP2515_INT);
 60e:	2a 9a       	sbi	0x05, 2	; 5
			// activate the pin RX1BF as GPIO which is connected 
			// to RS of MCP2551 and set it to 0
			mcp2515_write_register(BFPCTRL, (1<<B1BFE));
		#else
			// Deaktivieren der Pins RXnBF Pins (High Impedance State)
			mcp2515_write_register(BFPCTRL, 0);
 610:	8c e0       	ldi	r24, 0x0C	; 12
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_write_register>
	#endif
	
	// Testen ob das auf die beschreibenen Register zugegriffen werden kann
	// (=> ist der Chip ueberhaupt ansprechbar?)
	bool error = false;
	if (mcp2515_read_register(CNF2) != pgm_read_byte(&_mcp2515_cnf[bitrate][1])) {
 618:	89 e2       	ldi	r24, 0x29	; 41
 61a:	0e 94 87 02 	call	0x50e	; 0x50e <mcp2515_read_register>
 61e:	18 2f       	mov	r17, r24
 620:	c7 01       	movw	r24, r14
 622:	8f 58       	subi	r24, 0x8F	; 143
 624:	9f 4f       	sbci	r25, 0xFF	; 255
 626:	fc 01       	movw	r30, r24
 628:	04 91       	lpm	r16, Z+
		error = true;
	}
	
	// Device zurueck in den normalen Modus versetzten
	// und aktivieren/deaktivieren des Clkout-Pins
	mcp2515_write_register(CANCTRL, CLKOUT_PRESCALER_);
 62a:	8f e0       	ldi	r24, 0x0F	; 15
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_write_register>
	
	if (error) {
 632:	10 17       	cp	r17, r16
 634:	39 f4       	brne	.+14     	; 0x644 <can_init+0xca>
		return false;
	}
	else
	{
		while ((mcp2515_read_register(CANSTAT) & 0xe0) != 0) {
 636:	8e e0       	ldi	r24, 0x0E	; 14
 638:	0e 94 87 02 	call	0x50e	; 0x50e <mcp2515_read_register>
 63c:	80 7e       	andi	r24, 0xE0	; 224
 63e:	d9 f7       	brne	.-10     	; 0x636 <can_init+0xbc>
			// warten bis der neue Modus uebernommen wurde
		}
		
		return true;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	01 c0       	rjmp	.+2      	; 0x646 <can_init+0xcc>
	// Device zurueck in den normalen Modus versetzten
	// und aktivieren/deaktivieren des Clkout-Pins
	mcp2515_write_register(CANCTRL, CLKOUT_PRESCALER_);
	
	if (error) {
		return false;
 644:	80 e0       	ldi	r24, 0x00	; 0
			// warten bis der neue Modus uebernommen wurde
		}
		
		return true;
	}
}
 646:	0f 90       	pop	r0
 648:	cf 91       	pop	r28
 64a:	df 91       	pop	r29
 64c:	1f 91       	pop	r17
 64e:	0f 91       	pop	r16
 650:	ff 90       	pop	r15
 652:	ef 90       	pop	r14
 654:	08 95       	ret

00000656 <can_set_filter>:

// ----------------------------------------------------------------------------
// set a filter

bool mcp2515_set_filter(uint8_t number, const can_filter_t *filter)
{
 656:	ef 92       	push	r14
 658:	ff 92       	push	r15
 65a:	0f 93       	push	r16
 65c:	1f 93       	push	r17
 65e:	cf 93       	push	r28
 660:	df 93       	push	r29
 662:	f8 2e       	mov	r15, r24
 664:	eb 01       	movw	r28, r22
	uint8_t mask_address = 0;
	uint8_t mode = mcp2515_read_register(CANSTAT);
 666:	8e e0       	ldi	r24, 0x0E	; 14
 668:	0e 94 87 02 	call	0x50e	; 0x50e <mcp2515_read_register>
 66c:	e8 2e       	mov	r14, r24
	
	if (number > 5)
 66e:	8f 2d       	mov	r24, r15
 670:	86 30       	cpi	r24, 0x06	; 6
 672:	08 f0       	brcs	.+2      	; 0x676 <can_set_filter+0x20>
 674:	5c c0       	rjmp	.+184    	; 0x72e <can_set_filter+0xd8>
extern void mcp2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data);

// -------------------------------------------------------------------------
extern __attribute__ ((gnu_inline)) inline void mcp2515_change_operation_mode(uint8_t mode)
{
	mcp2515_bit_modify(CANCTRL, 0xe0, mode);
 676:	8f e0       	ldi	r24, 0x0F	; 15
 678:	60 ee       	ldi	r22, 0xE0	; 224
 67a:	40 e8       	ldi	r20, 0x80	; 128
 67c:	0e 94 96 02 	call	0x52c	; 0x52c <mcp2515_bit_modify>
	while ((mcp2515_read_register(CANSTAT) & 0xe0) != (mode & 0xe0))
 680:	00 e8       	ldi	r16, 0x80	; 128
 682:	10 e0       	ldi	r17, 0x00	; 0
 684:	8e e0       	ldi	r24, 0x0E	; 14
 686:	0e 94 87 02 	call	0x50e	; 0x50e <mcp2515_read_register>
 68a:	28 2f       	mov	r18, r24
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	20 7e       	andi	r18, 0xE0	; 224
 690:	30 70       	andi	r19, 0x00	; 0
 692:	20 17       	cp	r18, r16
 694:	31 07       	cpc	r19, r17
 696:	b1 f7       	brne	.-20     	; 0x684 <can_set_filter+0x2e>
	
	// change to configuration mode
	mcp2515_change_operation_mode( (1<<REQOP2) );
	
	// set filter mask
	if (number == 0)
 698:	ff 20       	and	r15, r15
 69a:	31 f4       	brne	.+12     	; 0x6a8 <can_set_filter+0x52>
				mcp2515_write_register(RXB0CTRL, 0);
			}
		#else
			// Buffer 0: Empfangen aller Nachrichten mit Standard Identifier 
			// die den Filter Kriterien gengen
			mcp2515_write_register(RXB0CTRL, (1<<RXM0));
 69c:	80 e6       	ldi	r24, 0x60	; 96
 69e:	60 e2       	ldi	r22, 0x20	; 32
 6a0:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_write_register>
	mcp2515_change_operation_mode( (1<<REQOP2) );
	
	// set filter mask
	if (number == 0)
	{
		mask_address = RXM0SIDH;
 6a4:	00 e2       	ldi	r16, 0x20	; 32
 6a6:	08 c0       	rjmp	.+16     	; 0x6b8 <can_set_filter+0x62>
			// Buffer 0: Empfangen aller Nachrichten mit Standard Identifier 
			// die den Filter Kriterien gengen
			mcp2515_write_register(RXB0CTRL, (1<<RXM0));
		#endif
	}
	else if (number == 2)
 6a8:	8f 2d       	mov	r24, r15
 6aa:	82 30       	cpi	r24, 0x02	; 2
 6ac:	a1 f4       	brne	.+40     	; 0x6d6 <can_set_filter+0x80>
				mcp2515_write_register(RXB1CTRL, 0);
			}
		#else
			// Buffer 1: Empfangen aller Nachrichten mit Standard Identifier 
			// die den Filter Kriterien gengen
			mcp2515_write_register(RXB1CTRL, (1<<RXM0));
 6ae:	80 e7       	ldi	r24, 0x70	; 112
 6b0:	60 e2       	ldi	r22, 0x20	; 32
 6b2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <mcp2515_write_register>
			mcp2515_write_register(RXB0CTRL, (1<<RXM0));
		#endif
	}
	else if (number == 2)
	{
		mask_address = RXM1SIDH;
 6b6:	04 e2       	ldi	r16, 0x24	; 36
		#endif
	}
	
	if (mask_address)
	{
		RESET(MCP2515_CS);
 6b8:	2c 98       	cbi	0x05, 4	; 5
		spi_putc(SPI_WRITE);
 6ba:	82 e0       	ldi	r24, 0x02	; 2
 6bc:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
		spi_putc(mask_address);
 6c0:	80 2f       	mov	r24, r16
 6c2:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
		#if SUPPORT_EXTENDED_CANID
			mcp2515_write_id(&filter->mask, (filter->flags.extended == 0x2) ? 0 : 1);
		#else
			mcp2515_write_id(&filter->mask);
 6c6:	ce 01       	movw	r24, r28
 6c8:	02 96       	adiw	r24, 0x02	; 2
 6ca:	0e 94 9f 03 	call	0x73e	; 0x73e <mcp2515_write_id>
		#endif
		SET(MCP2515_CS);
 6ce:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6d0:	85 e0       	ldi	r24, 0x05	; 5
 6d2:	8a 95       	dec	r24
 6d4:	f1 f7       	brne	.-4      	; 0x6d2 <can_set_filter+0x7c>
		_delay_us(1);
	}
	
	// write filter
	uint8_t filter_address;
	if (number >= 3) {
 6d6:	8f 2d       	mov	r24, r15
 6d8:	83 30       	cpi	r24, 0x03	; 3
 6da:	20 f0       	brcs	.+8      	; 0x6e4 <can_set_filter+0x8e>
		number -= 3;
 6dc:	8d ef       	ldi	r24, 0xFD	; 253
 6de:	f8 0e       	add	r15, r24
		filter_address = RXF3SIDH;
 6e0:	00 e1       	ldi	r16, 0x10	; 16
 6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <can_set_filter+0x90>
	}
	else {
		filter_address = RXF0SIDH;
 6e4:	00 e0       	ldi	r16, 0x00	; 0
	}
	
	RESET(MCP2515_CS);
 6e6:	2c 98       	cbi	0x05, 4	; 5
	spi_putc(SPI_WRITE);
 6e8:	82 e0       	ldi	r24, 0x02	; 2
 6ea:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	spi_putc(filter_address | (number * 4));
 6ee:	8f 2d       	mov	r24, r15
 6f0:	88 0f       	add	r24, r24
 6f2:	88 0f       	add	r24, r24
 6f4:	80 2b       	or	r24, r16
 6f6:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	#if SUPPORT_EXTENDED_CANID
		mcp2515_write_id(&filter->id, (filter->flags.extended == 0x2) ? 0 : 1);
	#else
		mcp2515_write_id(&filter->id);
 6fa:	ce 01       	movw	r24, r28
 6fc:	0e 94 9f 03 	call	0x73e	; 0x73e <mcp2515_write_id>
	#endif
	SET(MCP2515_CS);
 700:	2c 9a       	sbi	0x05, 4	; 5
 702:	85 e0       	ldi	r24, 0x05	; 5
 704:	8a 95       	dec	r24
 706:	f1 f7       	brne	.-4      	; 0x704 <can_set_filter+0xae>
extern void mcp2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data);

// -------------------------------------------------------------------------
extern __attribute__ ((gnu_inline)) inline void mcp2515_change_operation_mode(uint8_t mode)
{
	mcp2515_bit_modify(CANCTRL, 0xe0, mode);
 708:	8f e0       	ldi	r24, 0x0F	; 15
 70a:	60 ee       	ldi	r22, 0xE0	; 224
 70c:	4e 2d       	mov	r20, r14
 70e:	0e 94 96 02 	call	0x52c	; 0x52c <mcp2515_bit_modify>
	while ((mcp2515_read_register(CANSTAT) & 0xe0) != (mode & 0xe0))
 712:	ce 2d       	mov	r28, r14
 714:	d0 e0       	ldi	r29, 0x00	; 0
 716:	8e e0       	ldi	r24, 0x0E	; 14
 718:	0e 94 87 02 	call	0x50e	; 0x50e <mcp2515_read_register>
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	8c 27       	eor	r24, r28
 720:	9d 27       	eor	r25, r29
 722:	80 7e       	andi	r24, 0xE0	; 224
 724:	90 70       	andi	r25, 0x00	; 0
 726:	00 97       	sbiw	r24, 0x00	; 0
 728:	b1 f7       	brne	.-20     	; 0x716 <can_set_filter+0xc0>
	_delay_us(1);
	
	// restore previous mode
	mcp2515_change_operation_mode( mode );
	
	return true;
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	01 c0       	rjmp	.+2      	; 0x730 <can_set_filter+0xda>
{
	uint8_t mask_address = 0;
	uint8_t mode = mcp2515_read_register(CANSTAT);
	
	if (number > 5)
		return false;
 72e:	80 e0       	ldi	r24, 0x00	; 0
	
	// restore previous mode
	mcp2515_change_operation_mode( mode );
	
	return true;
}
 730:	df 91       	pop	r29
 732:	cf 91       	pop	r28
 734:	1f 91       	pop	r17
 736:	0f 91       	pop	r16
 738:	ff 90       	pop	r15
 73a:	ef 90       	pop	r14
 73c:	08 95       	ret

0000073e <mcp2515_write_id>:
}

#else

void mcp2515_write_id(const uint16_t *id)
{
 73e:	fc 01       	movw	r30, r24
	uint8_t tmp;
	
	spi_start(*id >> 3);
 740:	20 81       	ld	r18, Z
 742:	31 81       	ldd	r19, Z+1	; 0x01
 744:	83 e0       	ldi	r24, 0x03	; 3
 746:	36 95       	lsr	r19
 748:	27 95       	ror	r18
 74a:	8a 95       	dec	r24
 74c:	e1 f7       	brne	.-8      	; 0x746 <mcp2515_write_id+0x8>
}

#else

static void spi_start(uint8_t data) {
	SPDR = data;
 74e:	2e bd       	out	0x2e, r18	; 46
void mcp2515_write_id(const uint16_t *id)
{
	uint8_t tmp;
	
	spi_start(*id >> 3);
	tmp = *((uint8_t *) id) << 5;
 750:	80 81       	ld	r24, Z
 752:	82 95       	swap	r24
 754:	88 0f       	add	r24, r24
 756:	80 7e       	andi	r24, 0xE0	; 224
	SPDR = data;
}

static uint8_t spi_wait(void) {
	// warten bis der vorherige Werte geschrieben wurde
	while(!(SPSR & (1<<SPIF)))
 758:	0d b4       	in	r0, 0x2d	; 45
 75a:	07 fe       	sbrs	r0, 7
 75c:	fd cf       	rjmp	.-6      	; 0x758 <mcp2515_write_id+0x1a>
		;
	
	return SPDR;
 75e:	9e b5       	in	r25, 0x2e	; 46
	
	spi_start(*id >> 3);
	tmp = *((uint8_t *) id) << 5;
	spi_wait();
	
	spi_putc(tmp);
 760:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	spi_putc(0);
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
	spi_putc(0);
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	0e 94 be 03 	call	0x77c	; 0x77c <spi_putc>
}
 770:	08 95       	ret

00000772 <mcp2515_spi_init>:
// ----------------------------------------------------------------------------
void mcp2515_spi_init(void)
{
	#ifndef USE_SOFTWARE_SPI
		// Aktivieren des SPI Master Interfaces
		SPCR = (1<<SPE)|(1<<MSTR) | R_SPCR;
 772:	81 e5       	ldi	r24, 0x51	; 81
 774:	8c bd       	out	0x2c, r24	; 44
		SPSR = R_SPSR;
 776:	81 e0       	ldi	r24, 0x01	; 1
 778:	8d bd       	out	0x2d, r24	; 45
	#endif
}
 77a:	08 95       	ret

0000077c <spi_putc>:
	return data_in;
	
	#else
	
	// put byte in send-buffer
	SPDR = data;
 77c:	8e bd       	out	0x2e, r24	; 46
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
 77e:	0d b4       	in	r0, 0x2d	; 45
 780:	07 fe       	sbrs	r0, 7
 782:	fd cf       	rjmp	.-6      	; 0x77e <spi_putc+0x2>
		;
	
	return SPDR;
 784:	8e b5       	in	r24, 0x2e	; 46
	
	#endif
}
 786:	08 95       	ret

00000788 <__udivmodsi4>:
 788:	a1 e2       	ldi	r26, 0x21	; 33
 78a:	1a 2e       	mov	r1, r26
 78c:	aa 1b       	sub	r26, r26
 78e:	bb 1b       	sub	r27, r27
 790:	fd 01       	movw	r30, r26
 792:	0d c0       	rjmp	.+26     	; 0x7ae <__udivmodsi4_ep>

00000794 <__udivmodsi4_loop>:
 794:	aa 1f       	adc	r26, r26
 796:	bb 1f       	adc	r27, r27
 798:	ee 1f       	adc	r30, r30
 79a:	ff 1f       	adc	r31, r31
 79c:	a2 17       	cp	r26, r18
 79e:	b3 07       	cpc	r27, r19
 7a0:	e4 07       	cpc	r30, r20
 7a2:	f5 07       	cpc	r31, r21
 7a4:	20 f0       	brcs	.+8      	; 0x7ae <__udivmodsi4_ep>
 7a6:	a2 1b       	sub	r26, r18
 7a8:	b3 0b       	sbc	r27, r19
 7aa:	e4 0b       	sbc	r30, r20
 7ac:	f5 0b       	sbc	r31, r21

000007ae <__udivmodsi4_ep>:
 7ae:	66 1f       	adc	r22, r22
 7b0:	77 1f       	adc	r23, r23
 7b2:	88 1f       	adc	r24, r24
 7b4:	99 1f       	adc	r25, r25
 7b6:	1a 94       	dec	r1
 7b8:	69 f7       	brne	.-38     	; 0x794 <__udivmodsi4_loop>
 7ba:	60 95       	com	r22
 7bc:	70 95       	com	r23
 7be:	80 95       	com	r24
 7c0:	90 95       	com	r25
 7c2:	9b 01       	movw	r18, r22
 7c4:	ac 01       	movw	r20, r24
 7c6:	bd 01       	movw	r22, r26
 7c8:	cf 01       	movw	r24, r30
 7ca:	08 95       	ret

000007cc <malloc>:
 7cc:	cf 93       	push	r28
 7ce:	df 93       	push	r29
 7d0:	82 30       	cpi	r24, 0x02	; 2
 7d2:	91 05       	cpc	r25, r1
 7d4:	10 f4       	brcc	.+4      	; 0x7da <malloc+0xe>
 7d6:	82 e0       	ldi	r24, 0x02	; 2
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	e0 91 d8 01 	lds	r30, 0x01D8
 7de:	f0 91 d9 01 	lds	r31, 0x01D9
 7e2:	40 e0       	ldi	r20, 0x00	; 0
 7e4:	50 e0       	ldi	r21, 0x00	; 0
 7e6:	20 e0       	ldi	r18, 0x00	; 0
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	26 c0       	rjmp	.+76     	; 0x838 <malloc+0x6c>
 7ec:	60 81       	ld	r22, Z
 7ee:	71 81       	ldd	r23, Z+1	; 0x01
 7f0:	68 17       	cp	r22, r24
 7f2:	79 07       	cpc	r23, r25
 7f4:	e0 f0       	brcs	.+56     	; 0x82e <malloc+0x62>
 7f6:	68 17       	cp	r22, r24
 7f8:	79 07       	cpc	r23, r25
 7fa:	81 f4       	brne	.+32     	; 0x81c <malloc+0x50>
 7fc:	82 81       	ldd	r24, Z+2	; 0x02
 7fe:	93 81       	ldd	r25, Z+3	; 0x03
 800:	21 15       	cp	r18, r1
 802:	31 05       	cpc	r19, r1
 804:	31 f0       	breq	.+12     	; 0x812 <malloc+0x46>
 806:	d9 01       	movw	r26, r18
 808:	13 96       	adiw	r26, 0x03	; 3
 80a:	9c 93       	st	X, r25
 80c:	8e 93       	st	-X, r24
 80e:	12 97       	sbiw	r26, 0x02	; 2
 810:	2b c0       	rjmp	.+86     	; 0x868 <malloc+0x9c>
 812:	90 93 d9 01 	sts	0x01D9, r25
 816:	80 93 d8 01 	sts	0x01D8, r24
 81a:	26 c0       	rjmp	.+76     	; 0x868 <malloc+0x9c>
 81c:	41 15       	cp	r20, r1
 81e:	51 05       	cpc	r21, r1
 820:	19 f0       	breq	.+6      	; 0x828 <malloc+0x5c>
 822:	64 17       	cp	r22, r20
 824:	75 07       	cpc	r23, r21
 826:	18 f4       	brcc	.+6      	; 0x82e <malloc+0x62>
 828:	ab 01       	movw	r20, r22
 82a:	e9 01       	movw	r28, r18
 82c:	df 01       	movw	r26, r30
 82e:	9f 01       	movw	r18, r30
 830:	72 81       	ldd	r23, Z+2	; 0x02
 832:	63 81       	ldd	r22, Z+3	; 0x03
 834:	e7 2f       	mov	r30, r23
 836:	f6 2f       	mov	r31, r22
 838:	30 97       	sbiw	r30, 0x00	; 0
 83a:	c1 f6       	brne	.-80     	; 0x7ec <malloc+0x20>
 83c:	41 15       	cp	r20, r1
 83e:	51 05       	cpc	r21, r1
 840:	01 f1       	breq	.+64     	; 0x882 <malloc+0xb6>
 842:	48 1b       	sub	r20, r24
 844:	59 0b       	sbc	r21, r25
 846:	44 30       	cpi	r20, 0x04	; 4
 848:	51 05       	cpc	r21, r1
 84a:	80 f4       	brcc	.+32     	; 0x86c <malloc+0xa0>
 84c:	12 96       	adiw	r26, 0x02	; 2
 84e:	8d 91       	ld	r24, X+
 850:	9c 91       	ld	r25, X
 852:	13 97       	sbiw	r26, 0x03	; 3
 854:	20 97       	sbiw	r28, 0x00	; 0
 856:	19 f0       	breq	.+6      	; 0x85e <malloc+0x92>
 858:	9b 83       	std	Y+3, r25	; 0x03
 85a:	8a 83       	std	Y+2, r24	; 0x02
 85c:	04 c0       	rjmp	.+8      	; 0x866 <malloc+0x9a>
 85e:	90 93 d9 01 	sts	0x01D9, r25
 862:	80 93 d8 01 	sts	0x01D8, r24
 866:	fd 01       	movw	r30, r26
 868:	32 96       	adiw	r30, 0x02	; 2
 86a:	46 c0       	rjmp	.+140    	; 0x8f8 <malloc+0x12c>
 86c:	fd 01       	movw	r30, r26
 86e:	e4 0f       	add	r30, r20
 870:	f5 1f       	adc	r31, r21
 872:	81 93       	st	Z+, r24
 874:	91 93       	st	Z+, r25
 876:	42 50       	subi	r20, 0x02	; 2
 878:	50 40       	sbci	r21, 0x00	; 0
 87a:	11 96       	adiw	r26, 0x01	; 1
 87c:	5c 93       	st	X, r21
 87e:	4e 93       	st	-X, r20
 880:	3b c0       	rjmp	.+118    	; 0x8f8 <malloc+0x12c>
 882:	20 91 d6 01 	lds	r18, 0x01D6
 886:	30 91 d7 01 	lds	r19, 0x01D7
 88a:	21 15       	cp	r18, r1
 88c:	31 05       	cpc	r19, r1
 88e:	41 f4       	brne	.+16     	; 0x8a0 <malloc+0xd4>
 890:	20 91 02 01 	lds	r18, 0x0102
 894:	30 91 03 01 	lds	r19, 0x0103
 898:	30 93 d7 01 	sts	0x01D7, r19
 89c:	20 93 d6 01 	sts	0x01D6, r18
 8a0:	20 91 04 01 	lds	r18, 0x0104
 8a4:	30 91 05 01 	lds	r19, 0x0105
 8a8:	21 15       	cp	r18, r1
 8aa:	31 05       	cpc	r19, r1
 8ac:	41 f4       	brne	.+16     	; 0x8be <malloc+0xf2>
 8ae:	2d b7       	in	r18, 0x3d	; 61
 8b0:	3e b7       	in	r19, 0x3e	; 62
 8b2:	40 91 00 01 	lds	r20, 0x0100
 8b6:	50 91 01 01 	lds	r21, 0x0101
 8ba:	24 1b       	sub	r18, r20
 8bc:	35 0b       	sbc	r19, r21
 8be:	e0 91 d6 01 	lds	r30, 0x01D6
 8c2:	f0 91 d7 01 	lds	r31, 0x01D7
 8c6:	e2 17       	cp	r30, r18
 8c8:	f3 07       	cpc	r31, r19
 8ca:	a0 f4       	brcc	.+40     	; 0x8f4 <malloc+0x128>
 8cc:	2e 1b       	sub	r18, r30
 8ce:	3f 0b       	sbc	r19, r31
 8d0:	28 17       	cp	r18, r24
 8d2:	39 07       	cpc	r19, r25
 8d4:	78 f0       	brcs	.+30     	; 0x8f4 <malloc+0x128>
 8d6:	ac 01       	movw	r20, r24
 8d8:	4e 5f       	subi	r20, 0xFE	; 254
 8da:	5f 4f       	sbci	r21, 0xFF	; 255
 8dc:	24 17       	cp	r18, r20
 8de:	35 07       	cpc	r19, r21
 8e0:	48 f0       	brcs	.+18     	; 0x8f4 <malloc+0x128>
 8e2:	4e 0f       	add	r20, r30
 8e4:	5f 1f       	adc	r21, r31
 8e6:	50 93 d7 01 	sts	0x01D7, r21
 8ea:	40 93 d6 01 	sts	0x01D6, r20
 8ee:	81 93       	st	Z+, r24
 8f0:	91 93       	st	Z+, r25
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <malloc+0x12c>
 8f4:	e0 e0       	ldi	r30, 0x00	; 0
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	cf 01       	movw	r24, r30
 8fa:	df 91       	pop	r29
 8fc:	cf 91       	pop	r28
 8fe:	08 95       	ret

00000900 <free>:
 900:	cf 93       	push	r28
 902:	df 93       	push	r29
 904:	00 97       	sbiw	r24, 0x00	; 0
 906:	09 f4       	brne	.+2      	; 0x90a <free+0xa>
 908:	91 c0       	rjmp	.+290    	; 0xa2c <free+0x12c>
 90a:	fc 01       	movw	r30, r24
 90c:	32 97       	sbiw	r30, 0x02	; 2
 90e:	13 82       	std	Z+3, r1	; 0x03
 910:	12 82       	std	Z+2, r1	; 0x02
 912:	60 91 d8 01 	lds	r22, 0x01D8
 916:	70 91 d9 01 	lds	r23, 0x01D9
 91a:	61 15       	cp	r22, r1
 91c:	71 05       	cpc	r23, r1
 91e:	81 f4       	brne	.+32     	; 0x940 <free+0x40>
 920:	20 81       	ld	r18, Z
 922:	31 81       	ldd	r19, Z+1	; 0x01
 924:	28 0f       	add	r18, r24
 926:	39 1f       	adc	r19, r25
 928:	80 91 d6 01 	lds	r24, 0x01D6
 92c:	90 91 d7 01 	lds	r25, 0x01D7
 930:	82 17       	cp	r24, r18
 932:	93 07       	cpc	r25, r19
 934:	99 f5       	brne	.+102    	; 0x99c <free+0x9c>
 936:	f0 93 d7 01 	sts	0x01D7, r31
 93a:	e0 93 d6 01 	sts	0x01D6, r30
 93e:	76 c0       	rjmp	.+236    	; 0xa2c <free+0x12c>
 940:	db 01       	movw	r26, r22
 942:	80 e0       	ldi	r24, 0x00	; 0
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	02 c0       	rjmp	.+4      	; 0x94c <free+0x4c>
 948:	cd 01       	movw	r24, r26
 94a:	d9 01       	movw	r26, r18
 94c:	ae 17       	cp	r26, r30
 94e:	bf 07       	cpc	r27, r31
 950:	48 f4       	brcc	.+18     	; 0x964 <free+0x64>
 952:	12 96       	adiw	r26, 0x02	; 2
 954:	2d 91       	ld	r18, X+
 956:	3c 91       	ld	r19, X
 958:	13 97       	sbiw	r26, 0x03	; 3
 95a:	21 15       	cp	r18, r1
 95c:	31 05       	cpc	r19, r1
 95e:	a1 f7       	brne	.-24     	; 0x948 <free+0x48>
 960:	cd 01       	movw	r24, r26
 962:	21 c0       	rjmp	.+66     	; 0x9a6 <free+0xa6>
 964:	b3 83       	std	Z+3, r27	; 0x03
 966:	a2 83       	std	Z+2, r26	; 0x02
 968:	ef 01       	movw	r28, r30
 96a:	49 91       	ld	r20, Y+
 96c:	59 91       	ld	r21, Y+
 96e:	9e 01       	movw	r18, r28
 970:	24 0f       	add	r18, r20
 972:	35 1f       	adc	r19, r21
 974:	a2 17       	cp	r26, r18
 976:	b3 07       	cpc	r27, r19
 978:	79 f4       	brne	.+30     	; 0x998 <free+0x98>
 97a:	2d 91       	ld	r18, X+
 97c:	3c 91       	ld	r19, X
 97e:	11 97       	sbiw	r26, 0x01	; 1
 980:	24 0f       	add	r18, r20
 982:	35 1f       	adc	r19, r21
 984:	2e 5f       	subi	r18, 0xFE	; 254
 986:	3f 4f       	sbci	r19, 0xFF	; 255
 988:	31 83       	std	Z+1, r19	; 0x01
 98a:	20 83       	st	Z, r18
 98c:	12 96       	adiw	r26, 0x02	; 2
 98e:	2d 91       	ld	r18, X+
 990:	3c 91       	ld	r19, X
 992:	13 97       	sbiw	r26, 0x03	; 3
 994:	33 83       	std	Z+3, r19	; 0x03
 996:	22 83       	std	Z+2, r18	; 0x02
 998:	00 97       	sbiw	r24, 0x00	; 0
 99a:	29 f4       	brne	.+10     	; 0x9a6 <free+0xa6>
 99c:	f0 93 d9 01 	sts	0x01D9, r31
 9a0:	e0 93 d8 01 	sts	0x01D8, r30
 9a4:	43 c0       	rjmp	.+134    	; 0xa2c <free+0x12c>
 9a6:	dc 01       	movw	r26, r24
 9a8:	13 96       	adiw	r26, 0x03	; 3
 9aa:	fc 93       	st	X, r31
 9ac:	ee 93       	st	-X, r30
 9ae:	12 97       	sbiw	r26, 0x02	; 2
 9b0:	4d 91       	ld	r20, X+
 9b2:	5d 91       	ld	r21, X+
 9b4:	a4 0f       	add	r26, r20
 9b6:	b5 1f       	adc	r27, r21
 9b8:	ea 17       	cp	r30, r26
 9ba:	fb 07       	cpc	r31, r27
 9bc:	69 f4       	brne	.+26     	; 0x9d8 <free+0xd8>
 9be:	20 81       	ld	r18, Z
 9c0:	31 81       	ldd	r19, Z+1	; 0x01
 9c2:	24 0f       	add	r18, r20
 9c4:	35 1f       	adc	r19, r21
 9c6:	2e 5f       	subi	r18, 0xFE	; 254
 9c8:	3f 4f       	sbci	r19, 0xFF	; 255
 9ca:	ec 01       	movw	r28, r24
 9cc:	39 83       	std	Y+1, r19	; 0x01
 9ce:	28 83       	st	Y, r18
 9d0:	22 81       	ldd	r18, Z+2	; 0x02
 9d2:	33 81       	ldd	r19, Z+3	; 0x03
 9d4:	3b 83       	std	Y+3, r19	; 0x03
 9d6:	2a 83       	std	Y+2, r18	; 0x02
 9d8:	e0 e0       	ldi	r30, 0x00	; 0
 9da:	f0 e0       	ldi	r31, 0x00	; 0
 9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <free+0xe2>
 9de:	fb 01       	movw	r30, r22
 9e0:	bc 01       	movw	r22, r24
 9e2:	db 01       	movw	r26, r22
 9e4:	12 96       	adiw	r26, 0x02	; 2
 9e6:	8d 91       	ld	r24, X+
 9e8:	9c 91       	ld	r25, X
 9ea:	13 97       	sbiw	r26, 0x03	; 3
 9ec:	00 97       	sbiw	r24, 0x00	; 0
 9ee:	b9 f7       	brne	.-18     	; 0x9de <free+0xde>
 9f0:	9b 01       	movw	r18, r22
 9f2:	2e 5f       	subi	r18, 0xFE	; 254
 9f4:	3f 4f       	sbci	r19, 0xFF	; 255
 9f6:	8d 91       	ld	r24, X+
 9f8:	9c 91       	ld	r25, X
 9fa:	11 97       	sbiw	r26, 0x01	; 1
 9fc:	82 0f       	add	r24, r18
 9fe:	93 1f       	adc	r25, r19
 a00:	40 91 d6 01 	lds	r20, 0x01D6
 a04:	50 91 d7 01 	lds	r21, 0x01D7
 a08:	48 17       	cp	r20, r24
 a0a:	59 07       	cpc	r21, r25
 a0c:	79 f4       	brne	.+30     	; 0xa2c <free+0x12c>
 a0e:	30 97       	sbiw	r30, 0x00	; 0
 a10:	29 f4       	brne	.+10     	; 0xa1c <free+0x11c>
 a12:	10 92 d9 01 	sts	0x01D9, r1
 a16:	10 92 d8 01 	sts	0x01D8, r1
 a1a:	02 c0       	rjmp	.+4      	; 0xa20 <free+0x120>
 a1c:	13 82       	std	Z+3, r1	; 0x03
 a1e:	12 82       	std	Z+2, r1	; 0x02
 a20:	22 50       	subi	r18, 0x02	; 2
 a22:	30 40       	sbci	r19, 0x00	; 0
 a24:	30 93 d7 01 	sts	0x01D7, r19
 a28:	20 93 d6 01 	sts	0x01D6, r18
 a2c:	df 91       	pop	r29
 a2e:	cf 91       	pop	r28
 a30:	08 95       	ret

00000a32 <_exit>:
 a32:	f8 94       	cli

00000a34 <__stop_program>:
 a34:	ff cf       	rjmp	.-2      	; 0xa34 <__stop_program>
