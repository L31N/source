
bin/Release/can_debugging.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f54  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000136  00800100  00800100  00000fc8  2**0
                  ALLOC
  2 .stab         00001c5c  00000000  00000000  00000fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b04  00000000  00000000  00002c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000022  00000000  00000000  00003728  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000374a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000154  00000000  00000000  000037ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000007c7  00000000  00000000  0000391e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000489  00000000  00000000  000040e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000007c3  00000000  00000000  0000456e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000e0  00000000  00000000  00004d34  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000279  00000000  00000000  00004e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000367  00000000  00000000  0000508d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000000c8  00000000  00000000  000053f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__vector_18>
  4c:	0c 94 1a 03 	jmp	0x634	; 0x634 <__vector_19>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 b2 00 	jmp	0x164	; 0x164 <__vector_21>
  58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_22>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

00000094 <_at90can_cnf>:
  94:	7e 6e 7f 62 0c 37 26 0c 37 12 0c 37 0e 0c 37 06     ~n.b.7&.7..7..7.
  a4:	0c 37 02 0c 37 00 0c 36                             .7..7..6

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e1       	ldi	r29, 0x10	; 16
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	12 e0       	ldi	r17, 0x02	; 2
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a6 33       	cpi	r26, 0x36	; 54
  c4:	b1 07       	cpc	r27, r17
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 48 04 	call	0x890	; 0x890 <main>
  cc:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <__vector_22>:
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	0b b6       	in	r0, 0x3b	; 59
  e0:	0f 92       	push	r0
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
  ee:	20 91 68 01 	lds	r18, 0x0168
  f2:	30 91 69 01 	lds	r19, 0x0169
  f6:	80 91 6a 01 	lds	r24, 0x016A
  fa:	90 91 6b 01 	lds	r25, 0x016B
  fe:	28 17       	cp	r18, r24
 100:	39 07       	cpc	r19, r25
 102:	31 f4       	brne	.+12     	; 0x110 <__vector_22+0x3c>
 104:	80 91 c1 00 	lds	r24, 0x00C1
 108:	8f 7d       	andi	r24, 0xDF	; 223
 10a:	80 93 c1 00 	sts	0x00C1, r24
 10e:	1d c0       	rjmp	.+58     	; 0x14a <__vector_22+0x76>
 110:	e0 91 68 01 	lds	r30, 0x0168
 114:	f0 91 69 01 	lds	r31, 0x0169
 118:	e4 59       	subi	r30, 0x94	; 148
 11a:	fe 4f       	sbci	r31, 0xFE	; 254
 11c:	80 81       	ld	r24, Z
 11e:	80 93 c6 00 	sts	0x00C6, r24
 122:	80 91 68 01 	lds	r24, 0x0168
 126:	90 91 69 01 	lds	r25, 0x0169
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	90 93 69 01 	sts	0x0169, r25
 130:	80 93 68 01 	sts	0x0168, r24
 134:	80 91 68 01 	lds	r24, 0x0168
 138:	90 91 69 01 	lds	r25, 0x0169
 13c:	84 36       	cpi	r24, 0x64	; 100
 13e:	91 05       	cpc	r25, r1
 140:	24 f0       	brlt	.+8      	; 0x14a <__vector_22+0x76>
 142:	10 92 69 01 	sts	0x0169, r1
 146:	10 92 68 01 	sts	0x0168, r1
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0b be       	out	0x3b, r0	; 59
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <__vector_21>:
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	0b b6       	in	r0, 0x3b	; 59
 170:	0f 92       	push	r0
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	ef 93       	push	r30
 17c:	ff 93       	push	r31
 17e:	80 91 02 01 	lds	r24, 0x0102
 182:	90 91 03 01 	lds	r25, 0x0103
 186:	20 91 00 01 	lds	r18, 0x0100
 18a:	30 91 01 01 	lds	r19, 0x0101
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	82 17       	cp	r24, r18
 192:	93 07       	cpc	r25, r19
 194:	99 f0       	breq	.+38     	; 0x1bc <__vector_21+0x58>
 196:	80 91 00 01 	lds	r24, 0x0100
 19a:	90 91 01 01 	lds	r25, 0x0101
 19e:	89 2b       	or	r24, r25
 1a0:	81 f4       	brne	.+32     	; 0x1c2 <__vector_21+0x5e>
 1a2:	80 91 02 01 	lds	r24, 0x0102
 1a6:	90 91 03 01 	lds	r25, 0x0103
 1aa:	83 36       	cpi	r24, 0x63	; 99
 1ac:	91 05       	cpc	r25, r1
 1ae:	49 f4       	brne	.+18     	; 0x1c2 <__vector_21+0x5e>
 1b0:	05 c0       	rjmp	.+10     	; 0x1bc <__vector_21+0x58>
 1b2:	10 92 03 01 	sts	0x0103, r1
 1b6:	10 92 02 01 	sts	0x0102, r1
 1ba:	1c c0       	rjmp	.+56     	; 0x1f4 <__vector_21+0x90>
 1bc:	80 91 c6 00 	lds	r24, 0x00C6
 1c0:	19 c0       	rjmp	.+50     	; 0x1f4 <__vector_21+0x90>
 1c2:	e0 91 02 01 	lds	r30, 0x0102
 1c6:	f0 91 03 01 	lds	r31, 0x0103
 1ca:	80 91 c6 00 	lds	r24, 0x00C6
 1ce:	ec 5f       	subi	r30, 0xFC	; 252
 1d0:	fe 4f       	sbci	r31, 0xFE	; 254
 1d2:	80 83       	st	Z, r24
 1d4:	80 91 02 01 	lds	r24, 0x0102
 1d8:	90 91 03 01 	lds	r25, 0x0103
 1dc:	01 96       	adiw	r24, 0x01	; 1
 1de:	90 93 03 01 	sts	0x0103, r25
 1e2:	80 93 02 01 	sts	0x0102, r24
 1e6:	80 91 02 01 	lds	r24, 0x0102
 1ea:	90 91 03 01 	lds	r25, 0x0103
 1ee:	84 36       	cpi	r24, 0x64	; 100
 1f0:	91 05       	cpc	r25, r1
 1f2:	fc f6       	brge	.-66     	; 0x1b2 <__vector_21+0x4e>
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0b be       	out	0x3b, r0	; 59
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <_Z9uart_initl>:
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	9b 01       	movw	r18, r22
 214:	ac 01       	movw	r20, r24
 216:	c1 ec       	ldi	r28, 0xC1	; 193
 218:	d0 e0       	ldi	r29, 0x00	; 0
 21a:	88 81       	ld	r24, Y
 21c:	88 60       	ori	r24, 0x08	; 8
 21e:	88 83       	st	Y, r24
 220:	88 81       	ld	r24, Y
 222:	80 61       	ori	r24, 0x10	; 16
 224:	88 83       	st	Y, r24
 226:	84 e0       	ldi	r24, 0x04	; 4
 228:	22 0f       	add	r18, r18
 22a:	33 1f       	adc	r19, r19
 22c:	44 1f       	adc	r20, r20
 22e:	55 1f       	adc	r21, r21
 230:	8a 95       	dec	r24
 232:	d1 f7       	brne	.-12     	; 0x228 <_Z9uart_initl+0x1a>
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	74 e2       	ldi	r23, 0x24	; 36
 238:	84 ef       	ldi	r24, 0xF4	; 244
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 b7 04 	call	0x96e	; 0x96e <__udivmodsi4>
 240:	21 50       	subi	r18, 0x01	; 1
 242:	31 09       	sbc	r19, r1
 244:	83 2f       	mov	r24, r19
 246:	99 27       	eor	r25, r25
 248:	87 fd       	sbrc	r24, 7
 24a:	9a 95       	dec	r25
 24c:	80 93 c5 00 	sts	0x00C5, r24
 250:	20 93 c4 00 	sts	0x00C4, r18
 254:	78 94       	sei
 256:	88 81       	ld	r24, Y
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	88 83       	st	Y, r24
 25c:	10 92 69 01 	sts	0x0169, r1
 260:	10 92 68 01 	sts	0x0168, r1
 264:	10 92 6b 01 	sts	0x016B, r1
 268:	10 92 6a 01 	sts	0x016A, r1
 26c:	10 92 01 01 	sts	0x0101, r1
 270:	10 92 00 01 	sts	0x0100, r1
 274:	10 92 03 01 	sts	0x0103, r1
 278:	10 92 02 01 	sts	0x0102, r1
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <_Z9uart_putcc>:
 282:	20 91 6a 01 	lds	r18, 0x016A
 286:	30 91 6b 01 	lds	r19, 0x016B
 28a:	40 91 68 01 	lds	r20, 0x0168
 28e:	50 91 69 01 	lds	r21, 0x0169
 292:	2f 5f       	subi	r18, 0xFF	; 255
 294:	3f 4f       	sbci	r19, 0xFF	; 255
 296:	24 17       	cp	r18, r20
 298:	35 07       	cpc	r19, r21
 29a:	c9 f0       	breq	.+50     	; 0x2ce <_Z9uart_putcc+0x4c>
 29c:	20 91 68 01 	lds	r18, 0x0168
 2a0:	30 91 69 01 	lds	r19, 0x0169
 2a4:	23 2b       	or	r18, r19
 2a6:	a9 f4       	brne	.+42     	; 0x2d2 <_Z9uart_putcc+0x50>
 2a8:	20 91 6a 01 	lds	r18, 0x016A
 2ac:	30 91 6b 01 	lds	r19, 0x016B
 2b0:	23 36       	cpi	r18, 0x63	; 99
 2b2:	31 05       	cpc	r19, r1
 2b4:	71 f4       	brne	.+28     	; 0x2d2 <_Z9uart_putcc+0x50>
 2b6:	0b c0       	rjmp	.+22     	; 0x2ce <_Z9uart_putcc+0x4c>
 2b8:	10 92 6b 01 	sts	0x016B, r1
 2bc:	10 92 6a 01 	sts	0x016A, r1
 2c0:	80 91 c1 00 	lds	r24, 0x00C1
 2c4:	80 62       	ori	r24, 0x20	; 32
 2c6:	80 93 c1 00 	sts	0x00C1, r24
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	08 95       	ret
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	08 95       	ret
 2d2:	e0 91 6a 01 	lds	r30, 0x016A
 2d6:	f0 91 6b 01 	lds	r31, 0x016B
 2da:	e4 59       	subi	r30, 0x94	; 148
 2dc:	fe 4f       	sbci	r31, 0xFE	; 254
 2de:	80 83       	st	Z, r24
 2e0:	80 91 6a 01 	lds	r24, 0x016A
 2e4:	90 91 6b 01 	lds	r25, 0x016B
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	90 93 6b 01 	sts	0x016B, r25
 2ee:	80 93 6a 01 	sts	0x016A, r24
 2f2:	80 91 6a 01 	lds	r24, 0x016A
 2f6:	90 91 6b 01 	lds	r25, 0x016B
 2fa:	84 36       	cpi	r24, 0x64	; 100
 2fc:	91 05       	cpc	r25, r1
 2fe:	e4 f6       	brge	.-72     	; 0x2b8 <_Z9uart_putcc+0x36>
 300:	df cf       	rjmp	.-66     	; 0x2c0 <_Z9uart_putcc+0x3e>

00000302 <_Z9uart_getcv>:
 302:	20 91 00 01 	lds	r18, 0x0100
 306:	30 91 01 01 	lds	r19, 0x0101
 30a:	80 91 02 01 	lds	r24, 0x0102
 30e:	90 91 03 01 	lds	r25, 0x0103
 312:	28 17       	cp	r18, r24
 314:	39 07       	cpc	r19, r25
 316:	e9 f0       	breq	.+58     	; 0x352 <_Z9uart_getcv+0x50>
 318:	e0 91 00 01 	lds	r30, 0x0100
 31c:	f0 91 01 01 	lds	r31, 0x0101
 320:	ec 5f       	subi	r30, 0xFC	; 252
 322:	fe 4f       	sbci	r31, 0xFE	; 254
 324:	80 81       	ld	r24, Z
 326:	20 91 00 01 	lds	r18, 0x0100
 32a:	30 91 01 01 	lds	r19, 0x0101
 32e:	2f 5f       	subi	r18, 0xFF	; 255
 330:	3f 4f       	sbci	r19, 0xFF	; 255
 332:	30 93 01 01 	sts	0x0101, r19
 336:	20 93 00 01 	sts	0x0100, r18
 33a:	20 91 00 01 	lds	r18, 0x0100
 33e:	30 91 01 01 	lds	r19, 0x0101
 342:	24 36       	cpi	r18, 0x64	; 100
 344:	31 05       	cpc	r19, r1
 346:	34 f0       	brlt	.+12     	; 0x354 <_Z9uart_getcv+0x52>
 348:	10 92 01 01 	sts	0x0101, r1
 34c:	10 92 00 01 	sts	0x0100, r1
 350:	08 95       	ret
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	08 95       	ret

00000356 <_Z11uart_putstrPc>:
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	ec 01       	movw	r28, r24
 35c:	04 c0       	rjmp	.+8      	; 0x366 <_Z11uart_putstrPc+0x10>
 35e:	0e 94 41 01 	call	0x282	; 0x282 <_Z9uart_putcc>
 362:	81 11       	cpse	r24, r1
 364:	04 c0       	rjmp	.+8      	; 0x36e <_Z11uart_putstrPc+0x18>
 366:	89 91       	ld	r24, Y+
 368:	81 11       	cpse	r24, r1
 36a:	f9 cf       	rjmp	.-14     	; 0x35e <_Z11uart_putstrPc+0x8>
 36c:	01 c0       	rjmp	.+2      	; 0x370 <_Z11uart_putstrPc+0x1a>
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <_Z14uart_isnewdatav>:
 376:	40 91 00 01 	lds	r20, 0x0100
 37a:	50 91 01 01 	lds	r21, 0x0101
 37e:	20 91 02 01 	lds	r18, 0x0102
 382:	30 91 03 01 	lds	r19, 0x0103
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	42 17       	cp	r20, r18
 38a:	53 07       	cpc	r21, r19
 38c:	09 f4       	brne	.+2      	; 0x390 <_Z14uart_isnewdatav+0x1a>
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	08 95       	ret

00000392 <_Z9uart_readPci>:
 392:	9c 01       	movw	r18, r24
 394:	fc 01       	movw	r30, r24
 396:	27 c0       	rjmp	.+78     	; 0x3e6 <_Z9uart_readPci+0x54>
 398:	40 91 00 01 	lds	r20, 0x0100
 39c:	50 91 01 01 	lds	r21, 0x0101
 3a0:	80 91 02 01 	lds	r24, 0x0102
 3a4:	90 91 03 01 	lds	r25, 0x0103
 3a8:	48 17       	cp	r20, r24
 3aa:	59 07       	cpc	r21, r25
 3ac:	21 f1       	breq	.+72     	; 0x3f6 <_Z9uart_readPci+0x64>
 3ae:	a0 91 00 01 	lds	r26, 0x0100
 3b2:	b0 91 01 01 	lds	r27, 0x0101
 3b6:	ac 5f       	subi	r26, 0xFC	; 252
 3b8:	be 4f       	sbci	r27, 0xFE	; 254
 3ba:	4c 91       	ld	r20, X
 3bc:	80 91 00 01 	lds	r24, 0x0100
 3c0:	90 91 01 01 	lds	r25, 0x0101
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	90 93 01 01 	sts	0x0101, r25
 3ca:	80 93 00 01 	sts	0x0100, r24
 3ce:	80 91 00 01 	lds	r24, 0x0100
 3d2:	90 91 01 01 	lds	r25, 0x0101
 3d6:	84 36       	cpi	r24, 0x64	; 100
 3d8:	91 05       	cpc	r25, r1
 3da:	24 f0       	brlt	.+8      	; 0x3e4 <_Z9uart_readPci+0x52>
 3dc:	10 92 01 01 	sts	0x0101, r1
 3e0:	10 92 00 01 	sts	0x0100, r1
 3e4:	41 93       	st	Z+, r20
 3e6:	cf 01       	movw	r24, r30
 3e8:	82 1b       	sub	r24, r18
 3ea:	93 0b       	sbc	r25, r19
 3ec:	86 17       	cp	r24, r22
 3ee:	97 07       	cpc	r25, r23
 3f0:	9c f2       	brlt	.-90     	; 0x398 <_Z9uart_readPci+0x6>
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	08 95       	ret
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	08 95       	ret

000003fa <_Z10uart_countv>:
 3fa:	20 91 00 01 	lds	r18, 0x0100
 3fe:	30 91 01 01 	lds	r19, 0x0101
 402:	80 91 02 01 	lds	r24, 0x0102
 406:	90 91 03 01 	lds	r25, 0x0103
 40a:	82 17       	cp	r24, r18
 40c:	93 07       	cpc	r25, r19
 40e:	5c f0       	brlt	.+22     	; 0x426 <_Z10uart_countv+0x2c>
 410:	20 91 02 01 	lds	r18, 0x0102
 414:	30 91 03 01 	lds	r19, 0x0103
 418:	80 91 00 01 	lds	r24, 0x0100
 41c:	90 91 01 01 	lds	r25, 0x0101
 420:	28 1b       	sub	r18, r24
 422:	39 0b       	sbc	r19, r25
 424:	0c c0       	rjmp	.+24     	; 0x43e <_Z10uart_countv+0x44>
 426:	80 91 00 01 	lds	r24, 0x0100
 42a:	90 91 01 01 	lds	r25, 0x0101
 42e:	20 91 02 01 	lds	r18, 0x0102
 432:	30 91 03 01 	lds	r19, 0x0103
 436:	28 1b       	sub	r18, r24
 438:	39 0b       	sbc	r19, r25
 43a:	2c 59       	subi	r18, 0x9C	; 156
 43c:	3f 4f       	sbci	r19, 0xFF	; 255
 43e:	c9 01       	movw	r24, r18
 440:	08 95       	ret

00000442 <_Z10uart_debugPKcz>:
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
 44a:	fe 01       	movw	r30, r28
 44c:	35 96       	adiw	r30, 0x05	; 5
 44e:	61 91       	ld	r22, Z+
 450:	71 91       	ld	r23, Z+
 452:	af 01       	movw	r20, r30
 454:	80 ed       	ldi	r24, 0xD0	; 208
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <vsprintf>
 45c:	80 ed       	ldi	r24, 0xD0	; 208
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	0e 94 ab 01 	call	0x356	; 0x356 <_Z11uart_putstrPc>
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <_find_free_mob>:
// get next free MOb

uint8_t _find_free_mob(void)
{
	#if CAN_TX_BUFFER_SIZE == 0
	if (_free_buffer == 0)
 46a:	80 91 34 02 	lds	r24, 0x0234
 46e:	88 23       	and	r24, r24
 470:	79 f0       	breq	.+30     	; 0x490 <_find_free_mob+0x26>
 472:	80 e0       	ldi	r24, 0x00	; 0
	
	uint8_t i;
	for (i = 0;i < 15;i++)
	{
		// load MOb page
		CANPAGE = i << 4;
 474:	98 2f       	mov	r25, r24
 476:	92 95       	swap	r25
 478:	90 7f       	andi	r25, 0xF0	; 240
 47a:	90 93 ed 00 	sts	0x00ED, r25
		
		// check if MOb is in use
		if ((CANCDMOB & ((1 << CONMOB1) | (1 << CONMOB0))) == 0)
 47e:	90 91 ef 00 	lds	r25, 0x00EF
 482:	90 7c       	andi	r25, 0xC0	; 192
 484:	31 f0       	breq	.+12     	; 0x492 <_find_free_mob+0x28>
	if (_transmission_in_progress)
		return 0xff;
	#endif
	
	uint8_t i;
	for (i = 0;i < 15;i++)
 486:	8f 5f       	subi	r24, 0xFF	; 255
 488:	8f 30       	cpi	r24, 0x0F	; 15
 48a:	a1 f7       	brne	.-24     	; 0x474 <_find_free_mob+0xa>
		// check if MOb is in use
		if ((CANCDMOB & ((1 << CONMOB1) | (1 << CONMOB0))) == 0)
			return i;
	}
	
	return 0xff;
 48c:	8f ef       	ldi	r24, 0xFF	; 255
 48e:	08 95       	ret

uint8_t _find_free_mob(void)
{
	#if CAN_TX_BUFFER_SIZE == 0
	if (_free_buffer == 0)
		return 0xff;
 490:	8f ef       	ldi	r24, 0xFF	; 255
		if ((CANCDMOB & ((1 << CONMOB1) | (1 << CONMOB0))) == 0)
			return i;
	}
	
	return 0xff;
}
 492:	08 95       	ret

00000494 <_disable_mob_interrupt>:
// ----------------------------------------------------------------------------
// disable interrupt of corresponding MOb

void _disable_mob_interrupt(uint8_t mob)
{
	if (mob < 8)
 494:	88 30       	cpi	r24, 0x08	; 8
 496:	70 f4       	brcc	.+28     	; 0x4b4 <_disable_mob_interrupt+0x20>
		CANIE2 &= ~(1 << mob);
 498:	90 91 de 00 	lds	r25, 0x00DE
 49c:	21 e0       	ldi	r18, 0x01	; 1
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <_disable_mob_interrupt+0x12>
 4a2:	22 0f       	add	r18, r18
 4a4:	33 1f       	adc	r19, r19
 4a6:	8a 95       	dec	r24
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <_disable_mob_interrupt+0xe>
 4aa:	20 95       	com	r18
 4ac:	29 23       	and	r18, r25
 4ae:	20 93 de 00 	sts	0x00DE, r18
 4b2:	08 95       	ret
	else
		CANIE1 &= ~(1 << (mob - 8));
 4b4:	40 91 df 00 	lds	r20, 0x00DF
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	08 97       	sbiw	r24, 0x08	; 8
 4bc:	21 e0       	ldi	r18, 0x01	; 1
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <_disable_mob_interrupt+0x32>
 4c2:	22 0f       	add	r18, r18
 4c4:	33 1f       	adc	r19, r19
 4c6:	8a 95       	dec	r24
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <_disable_mob_interrupt+0x2e>
 4ca:	20 95       	com	r18
 4cc:	24 23       	and	r18, r20
 4ce:	20 93 df 00 	sts	0x00DF, r18
 4d2:	08 95       	ret

000004d4 <_enable_mob_interrupt>:
// ----------------------------------------------------------------------------
// enable interrupt of corresponding MOb

void _enable_mob_interrupt(uint8_t mob)
{
	if (mob < 8)
 4d4:	88 30       	cpi	r24, 0x08	; 8
 4d6:	68 f4       	brcc	.+26     	; 0x4f2 <_enable_mob_interrupt+0x1e>
		CANIE2 |= (1 << mob);
 4d8:	90 91 de 00 	lds	r25, 0x00DE
 4dc:	21 e0       	ldi	r18, 0x01	; 1
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <_enable_mob_interrupt+0x12>
 4e2:	22 0f       	add	r18, r18
 4e4:	33 1f       	adc	r19, r19
 4e6:	8a 95       	dec	r24
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <_enable_mob_interrupt+0xe>
 4ea:	92 2b       	or	r25, r18
 4ec:	90 93 de 00 	sts	0x00DE, r25
 4f0:	08 95       	ret
	else
		CANIE1 |= (1 << (mob - 8));
 4f2:	40 91 df 00 	lds	r20, 0x00DF
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	08 97       	sbiw	r24, 0x08	; 8
 4fa:	21 e0       	ldi	r18, 0x01	; 1
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <_enable_mob_interrupt+0x30>
 500:	22 0f       	add	r18, r18
 502:	33 1f       	adc	r19, r19
 504:	8a 95       	dec	r24
 506:	e2 f7       	brpl	.-8      	; 0x500 <_enable_mob_interrupt+0x2c>
 508:	42 2b       	or	r20, r18
 50a:	40 93 df 00 	sts	0x00DF, r20
 50e:	08 95       	ret

00000510 <can_init>:

// ----------------------------------------------------------------------------

bool at90can_init(uint8_t bitrate)
{
	if (bitrate >= 8)
 510:	88 30       	cpi	r24, 0x08	; 8
 512:	58 f5       	brcc	.+86     	; 0x56a <can_init+0x5a>
		return false;
	
	// switch CAN controller to reset mode
	CANGCON |= (1 << SWRES);
 514:	90 91 d8 00 	lds	r25, 0x00D8
 518:	91 60       	ori	r25, 0x01	; 1
 51a:	90 93 d8 00 	sts	0x00D8, r25
	
	// set CAN Bit Timing
	// (see datasheet page 260)
	CANBT1 = pgm_read_byte(&_at90can_cnf[bitrate][0]);
 51e:	93 e0       	ldi	r25, 0x03	; 3
 520:	89 9f       	mul	r24, r25
 522:	c0 01       	movw	r24, r0
 524:	11 24       	eor	r1, r1
 526:	fc 01       	movw	r30, r24
 528:	ec 56       	subi	r30, 0x6C	; 108
 52a:	ff 4f       	sbci	r31, 0xFF	; 255
 52c:	e4 91       	lpm	r30, Z+
 52e:	e0 93 e2 00 	sts	0x00E2, r30
	CANBT2 = pgm_read_byte(&_at90can_cnf[bitrate][1]);
 532:	fc 01       	movw	r30, r24
 534:	eb 56       	subi	r30, 0x6B	; 107
 536:	ff 4f       	sbci	r31, 0xFF	; 255
 538:	e4 91       	lpm	r30, Z+
 53a:	e0 93 e3 00 	sts	0x00E3, r30
	CANBT3 = pgm_read_byte(&_at90can_cnf[bitrate][2]);
 53e:	8a 56       	subi	r24, 0x6A	; 106
 540:	9f 4f       	sbci	r25, 0xFF	; 255
 542:	fc 01       	movw	r30, r24
 544:	84 91       	lpm	r24, Z+
 546:	80 93 e4 00 	sts	0x00E4, r24
	
	// activate CAN transmit- and receive-interrupt
	CANGIT = 0;
 54a:	10 92 da 00 	sts	0x00DA, r1
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
 54e:	80 eb       	ldi	r24, 0xB0	; 176
 550:	80 93 db 00 	sts	0x00DB, r24
	
	// set timer prescaler to 199 which results in a timer
	// frequency of 10 kHz (at 16 MHz)
	CANTCON = 199;
 554:	87 ec       	ldi	r24, 0xC7	; 199
 556:	80 93 e5 00 	sts	0x00E5, r24
	
	// disable all filters
	at90can_disable_filter( 0xff );
 55a:	8f ef       	ldi	r24, 0xFF	; 255
 55c:	0e 94 24 03 	call	0x648	; 0x648 <can_disable_filter>
	#if CAN_TX_BUFFER_SIZE > 0
	can_buffer_init( &can_tx_buffer, CAN_TX_BUFFER_SIZE, can_tx_list );
	#endif
	
	// activate CAN controller
	CANGCON = (1 << ENASTB);
 560:	82 e0       	ldi	r24, 0x02	; 2
 562:	80 93 d8 00 	sts	0x00D8, r24
	
	return true;
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	08 95       	ret
// ----------------------------------------------------------------------------

bool at90can_init(uint8_t bitrate)
{
	if (bitrate >= 8)
		return false;
 56a:	80 e0       	ldi	r24, 0x00	; 0
	
	// activate CAN controller
	CANGCON = (1 << ENASTB);
	
	return true;
}
 56c:	08 95       	ret

0000056e <__vector_18>:
// ----------------------------------------------------------------------------
// The CANPAGE register have to be restored after usage, otherwise it
// could cause trouble in the application programm.

ISR(CANIT_vect)
{
 56e:	1f 92       	push	r1
 570:	0f 92       	push	r0
 572:	0f b6       	in	r0, 0x3f	; 63
 574:	0f 92       	push	r0
 576:	11 24       	eor	r1, r1
 578:	2f 93       	push	r18
 57a:	3f 93       	push	r19
 57c:	4f 93       	push	r20
 57e:	5f 93       	push	r21
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
	uint8_t canpage;
	uint8_t mob;
	
	if ((CANHPMOB & 0xF0) != 0xF0)
 584:	80 91 ec 00 	lds	r24, 0x00EC
 588:	80 7f       	andi	r24, 0xF0	; 240
 58a:	80 3f       	cpi	r24, 0xF0	; 240
 58c:	09 f4       	brne	.+2      	; 0x590 <__vector_18+0x22>
 58e:	43 c0       	rjmp	.+134    	; 0x616 <__vector_18+0xa8>
	{
		// save MOb page register
		canpage = CANPAGE;
 590:	40 91 ed 00 	lds	r20, 0x00ED
		
		// select MOb page with the highest priority
		CANPAGE = CANHPMOB & 0xF0;
 594:	80 91 ec 00 	lds	r24, 0x00EC
 598:	80 7f       	andi	r24, 0xF0	; 240
 59a:	80 93 ed 00 	sts	0x00ED, r24
		mob = (CANHPMOB >> 4);
 59e:	20 91 ec 00 	lds	r18, 0x00EC
 5a2:	22 95       	swap	r18
 5a4:	2f 70       	andi	r18, 0x0F	; 15
		
		// a interrupt is only generated if a message was transmitted or received
		if (CANSTMOB & (1 << TXOK))
 5a6:	80 91 ee 00 	lds	r24, 0x00EE
 5aa:	86 ff       	sbrs	r24, 6
 5ac:	0c c0       	rjmp	.+24     	; 0x5c6 <__vector_18+0x58>
		{
			// clear MOb
			CANSTMOB &= 0;
 5ae:	80 91 ee 00 	lds	r24, 0x00EE
 5b2:	10 92 ee 00 	sts	0x00EE, r1
			CANCDMOB = 0;
 5b6:	10 92 ef 00 	sts	0x00EF, r1
				// buffer underflow => no more messages to send
				_disable_mob_interrupt(mob);
				_transmission_in_progress = 0;
			}
			#else
			_free_buffer++;
 5ba:	80 91 34 02 	lds	r24, 0x0234
 5be:	8f 5f       	subi	r24, 0xFF	; 255
 5c0:	80 93 34 02 	sts	0x0234, r24
 5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <__vector_18+0x62>
			
			// clear flags
			CANSTMOB &= 0;
			CANCDMOB = (1 << CONMOB1) | (CANCDMOB & (1 << IDE));
			#else
			_messages_waiting++;
 5c6:	80 91 35 02 	lds	r24, 0x0235
 5ca:	8f 5f       	subi	r24, 0xFF	; 255
 5cc:	80 93 35 02 	sts	0x0235, r24
			
			// reset interrupt
			if (mob < 8)
 5d0:	28 30       	cpi	r18, 0x08	; 8
 5d2:	70 f4       	brcc	.+28     	; 0x5f0 <__vector_18+0x82>
				CANIE2 &= ~(1 << mob);
 5d4:	30 91 de 00 	lds	r19, 0x00DE
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <__vector_18+0x74>
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	2a 95       	dec	r18
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <__vector_18+0x70>
 5e6:	80 95       	com	r24
 5e8:	83 23       	and	r24, r19
 5ea:	80 93 de 00 	sts	0x00DE, r24
 5ee:	10 c0       	rjmp	.+32     	; 0x610 <__vector_18+0xa2>
			else
				CANIE1 &= ~(1 << (mob - 8));
 5f0:	50 91 df 00 	lds	r21, 0x00DF
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	28 50       	subi	r18, 0x08	; 8
 5f8:	30 40       	sbci	r19, 0x00	; 0
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <__vector_18+0x96>
 600:	88 0f       	add	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	2a 95       	dec	r18
 606:	e2 f7       	brpl	.-8      	; 0x600 <__vector_18+0x92>
 608:	80 95       	com	r24
 60a:	85 23       	and	r24, r21
 60c:	80 93 df 00 	sts	0x00DF, r24
			
			CAN_INDICATE_RX_TRAFFIC_FUNCTION;
		}
		
		// restore MOb page register
		CANPAGE = canpage;
 610:	40 93 ed 00 	sts	0x00ED, r20
 614:	04 c0       	rjmp	.+8      	; 0x61e <__vector_18+0xb0>
	}
	else
	{
		// no MOb matches with the interrupt => general interrupt
		CANGIT |= 0;
 616:	80 91 da 00 	lds	r24, 0x00DA
 61a:	80 93 da 00 	sts	0x00DA, r24
	}
}
 61e:	9f 91       	pop	r25
 620:	8f 91       	pop	r24
 622:	5f 91       	pop	r21
 624:	4f 91       	pop	r20
 626:	3f 91       	pop	r19
 628:	2f 91       	pop	r18
 62a:	0f 90       	pop	r0
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	0f 90       	pop	r0
 630:	1f 90       	pop	r1
 632:	18 95       	reti

00000634 <__vector_19>:

// ----------------------------------------------------------------------------
// Overflow of CAN timer
ISR(OVRIT_vect) {}
 634:	1f 92       	push	r1
 636:	0f 92       	push	r0
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	0f 92       	push	r0
 63c:	11 24       	eor	r1, r1
 63e:	0f 90       	pop	r0
 640:	0f be       	out	0x3f, r0	; 63
 642:	0f 90       	pop	r0
 644:	1f 90       	pop	r1
 646:	18 95       	reti

00000648 <can_disable_filter>:
// ----------------------------------------------------------------------------
// disable mob

bool at90can_disable_filter(uint8_t number)
{
	if (number > 14)
 648:	8f 30       	cpi	r24, 0x0F	; 15
 64a:	e8 f0       	brcs	.+58     	; 0x686 <can_disable_filter+0x3e>
	{
		if (number == CAN_ALL_FILTER)
 64c:	8f 3f       	cpi	r24, 0xFF	; 255
 64e:	09 f0       	breq	.+2      	; 0x652 <can_disable_filter+0xa>
 650:	4e c0       	rjmp	.+156    	; 0x6ee <can_disable_filter+0xa6>
		{
			// disable interrupts
			CANIE1 = 0;
 652:	10 92 df 00 	sts	0x00DF, r1
			CANIE2 = 0;
 656:	10 92 de 00 	sts	0x00DE, r1
			
			// disable all MObs
			for (uint8_t i = 0;i < 15;i++) {
 65a:	80 e0       	ldi	r24, 0x00	; 0
				CANPAGE = (i << 4);
 65c:	98 2f       	mov	r25, r24
 65e:	92 95       	swap	r25
 660:	90 7f       	andi	r25, 0xF0	; 240
 662:	90 93 ed 00 	sts	0x00ED, r25
				
				// disable MOb (read-write required)
				CANCDMOB &= 0;
 666:	90 91 ef 00 	lds	r25, 0x00EF
 66a:	10 92 ef 00 	sts	0x00EF, r1
				CANSTMOB &= 0;
 66e:	90 91 ee 00 	lds	r25, 0x00EE
 672:	10 92 ee 00 	sts	0x00EE, r1
			// disable interrupts
			CANIE1 = 0;
			CANIE2 = 0;
			
			// disable all MObs
			for (uint8_t i = 0;i < 15;i++) {
 676:	8f 5f       	subi	r24, 0xFF	; 255
 678:	8f 30       	cpi	r24, 0x0F	; 15
 67a:	81 f7       	brne	.-32     	; 0x65c <can_disable_filter+0x14>
				CANSTMOB &= 0;
			}
			
			// mark all MObs as free
			#if CAN_RX_BUFFER_SIZE == 0
			_messages_waiting = 0;
 67c:	10 92 35 02 	sts	0x0235, r1
			#endif
			
			#if CAN_TX_BUFFER_SIZE == 0
			_free_buffer = 15;
 680:	80 93 34 02 	sts	0x0234, r24
 684:	32 c0       	rjmp	.+100    	; 0x6ea <can_disable_filter+0xa2>
// enter standby mode => messages are not transmitted nor received

extern __attribute__ ((gnu_inline)) inline void _enter_standby_mode(void)
{
	// request abort
	CANGCON = (1 << ABRQ);
 686:	90 e8       	ldi	r25, 0x80	; 128
 688:	90 93 d8 00 	sts	0x00D8, r25
	
	// wait until receiver is not busy
	while (CANGSTA & (1 << RXBSY))
 68c:	90 91 d9 00 	lds	r25, 0x00D9
 690:	93 fd       	sbrc	r25, 3
 692:	fc cf       	rjmp	.-8      	; 0x68c <can_disable_filter+0x44>
		;
	
	// request standby mode
	CANGCON = 0;
 694:	10 92 d8 00 	sts	0x00D8, r1
	
	// wait until the CAN Controller has entered standby mode
	while (CANGSTA & (1 << ENFG))
 698:	90 91 d9 00 	lds	r25, 0x00D9
 69c:	92 fd       	sbrc	r25, 2
 69e:	fc cf       	rjmp	.-8      	; 0x698 <can_disable_filter+0x50>
	}
	
	// set CAN Controller to standby mode
	_enter_standby_mode();
	
	CANPAGE = number << 4;
 6a0:	98 2f       	mov	r25, r24
 6a2:	92 95       	swap	r25
 6a4:	90 7f       	andi	r25, 0xF0	; 240
 6a6:	90 93 ed 00 	sts	0x00ED, r25
	
	// reset flags
	CANSTMOB &= 0;
 6aa:	90 91 ee 00 	lds	r25, 0x00EE
 6ae:	10 92 ee 00 	sts	0x00EE, r1
	CANCDMOB = 0;
 6b2:	10 92 ef 00 	sts	0x00EF, r1
	
	_disable_mob_interrupt(number);
 6b6:	0e 94 4a 02 	call	0x494	; 0x494 <_disable_mob_interrupt>
// leave standby mode => CAN Controller is connected to CAN Bus

extern __attribute__ ((gnu_inline)) inline void _leave_standby_mode(void)
{
	// save CANPAGE register
	uint8_t canpage = CANPAGE;
 6ba:	90 91 ed 00 	lds	r25, 0x00ED
	
	// reenable all MObs
	for (uint8_t i=0;i<15;i++) {
 6be:	80 e0       	ldi	r24, 0x00	; 0
		CANPAGE = i << 4;
 6c0:	28 2f       	mov	r18, r24
 6c2:	22 95       	swap	r18
 6c4:	20 7f       	andi	r18, 0xF0	; 240
 6c6:	20 93 ed 00 	sts	0x00ED, r18
		CANCDMOB = CANCDMOB;
 6ca:	20 91 ef 00 	lds	r18, 0x00EF
 6ce:	20 93 ef 00 	sts	0x00EF, r18
{
	// save CANPAGE register
	uint8_t canpage = CANPAGE;
	
	// reenable all MObs
	for (uint8_t i=0;i<15;i++) {
 6d2:	8f 5f       	subi	r24, 0xFF	; 255
 6d4:	8f 30       	cpi	r24, 0x0F	; 15
 6d6:	a1 f7       	brne	.-24     	; 0x6c0 <can_disable_filter+0x78>
		CANPAGE = i << 4;
		CANCDMOB = CANCDMOB;
	}
	
	// restore CANPAGE
	CANPAGE = canpage;
 6d8:	90 93 ed 00 	sts	0x00ED, r25
	
	// request normal mode
	CANGCON = (1 << ENASTB);
 6dc:	82 e0       	ldi	r24, 0x02	; 2
 6de:	80 93 d8 00 	sts	0x00D8, r24
	
	// wait until the CAN Controller has left standby mode
	while ((CANGSTA & (1 << ENFG)) == 0)
 6e2:	80 91 d9 00 	lds	r24, 0x00D9
 6e6:	82 ff       	sbrs	r24, 2
 6e8:	fc cf       	rjmp	.-8      	; 0x6e2 <can_disable_filter+0x9a>
	
	// re-enable CAN Controller 
	_leave_standby_mode();
	
	return true;
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	08 95       	ret
			
			return true;
		}
		
		// it is only possible to serve a maximum of 15 filters
		return false;
 6ee:	80 e0       	ldi	r24, 0x00	; 0
	
	// re-enable CAN Controller 
	_leave_standby_mode();
	
	return true;
}
 6f0:	08 95       	ret

000006f2 <can_set_filter>:
#include "at90can_private.h"
#ifdef	SUPPORT_FOR_AT90CAN__

// ----------------------------------------------------------------------------
bool at90can_set_filter(uint8_t number, const can_filter_t *filter)
{
 6f2:	fb 01       	movw	r30, r22
	if (number > 14) {
 6f4:	8f 30       	cpi	r24, 0x0F	; 15
 6f6:	08 f0       	brcs	.+2      	; 0x6fa <can_set_filter+0x8>
 6f8:	70 c0       	rjmp	.+224    	; 0x7da <can_set_filter+0xe8>
// enter standby mode => messages are not transmitted nor received

extern __attribute__ ((gnu_inline)) inline void _enter_standby_mode(void)
{
	// request abort
	CANGCON = (1 << ABRQ);
 6fa:	90 e8       	ldi	r25, 0x80	; 128
 6fc:	90 93 d8 00 	sts	0x00D8, r25
	
	// wait until receiver is not busy
	while (CANGSTA & (1 << RXBSY))
 700:	90 91 d9 00 	lds	r25, 0x00D9
 704:	93 fd       	sbrc	r25, 3
 706:	fc cf       	rjmp	.-8      	; 0x700 <can_set_filter+0xe>
		;
	
	// request standby mode
	CANGCON = 0;
 708:	10 92 d8 00 	sts	0x00D8, r1
	
	// wait until the CAN Controller has entered standby mode
	while (CANGSTA & (1 << ENFG))
 70c:	90 91 d9 00 	lds	r25, 0x00D9
 710:	92 fd       	sbrc	r25, 2
 712:	fc cf       	rjmp	.-8      	; 0x70c <can_set_filter+0x1a>
	}
	
	// set CAN Controller to standby mode
	_enter_standby_mode();
	
	CANPAGE = number << 4;
 714:	98 2f       	mov	r25, r24
 716:	92 95       	swap	r25
 718:	90 7f       	andi	r25, 0xF0	; 240
 71a:	90 93 ed 00 	sts	0x00ED, r25
	
	CANSTMOB = 0;
 71e:	10 92 ee 00 	sts	0x00EE, r1
	CANCDMOB = 0;
 722:	10 92 ef 00 	sts	0x00EF, r1
		CANIDM1 = (uint16_t) filter->mask >> 3;
	}
	
	#else
	
	CANIDT4 = 0;
 726:	10 92 f0 00 	sts	0x00F0, r1
	CANIDT3 = 0;
 72a:	10 92 f1 00 	sts	0x00F1, r1
	CANIDT2 = (uint8_t)  filter->id << 5;
 72e:	90 81       	ld	r25, Z
 730:	92 95       	swap	r25
 732:	99 0f       	add	r25, r25
 734:	90 7e       	andi	r25, 0xE0	; 224
 736:	90 93 f2 00 	sts	0x00F2, r25
	CANIDT1 = (uint16_t) filter->id >> 3;
 73a:	20 81       	ld	r18, Z
 73c:	31 81       	ldd	r19, Z+1	; 0x01
 73e:	43 e0       	ldi	r20, 0x03	; 3
 740:	36 95       	lsr	r19
 742:	27 95       	ror	r18
 744:	4a 95       	dec	r20
 746:	e1 f7       	brne	.-8      	; 0x740 <can_set_filter+0x4e>
 748:	20 93 f3 00 	sts	0x00F3, r18
	
	CANIDM4 = (1 << IDEMSK);
 74c:	91 e0       	ldi	r25, 0x01	; 1
 74e:	90 93 f4 00 	sts	0x00F4, r25
	CANIDM3 = 0;
 752:	10 92 f5 00 	sts	0x00F5, r1
	CANIDM2 = (uint8_t)  filter->mask << 5;
 756:	92 81       	ldd	r25, Z+2	; 0x02
 758:	92 95       	swap	r25
 75a:	99 0f       	add	r25, r25
 75c:	90 7e       	andi	r25, 0xE0	; 224
 75e:	90 93 f6 00 	sts	0x00F6, r25
	CANIDM1 = (uint16_t) filter->mask >> 3;
 762:	22 81       	ldd	r18, Z+2	; 0x02
 764:	33 81       	ldd	r19, Z+3	; 0x03
 766:	93 e0       	ldi	r25, 0x03	; 3
 768:	36 95       	lsr	r19
 76a:	27 95       	ror	r18
 76c:	9a 95       	dec	r25
 76e:	e1 f7       	brne	.-8      	; 0x768 <can_set_filter+0x76>
 770:	20 93 f7 00 	sts	0x00F7, r18
	
	#endif
	
	if (filter->flags.rtr & 0x2) {
 774:	94 81       	ldd	r25, Z+4	; 0x04
 776:	93 70       	andi	r25, 0x03	; 3
 778:	91 ff       	sbrs	r25, 1
 77a:	0e c0       	rjmp	.+28     	; 0x798 <can_set_filter+0xa6>
		CANIDM4 |= (1 << RTRMSK);
 77c:	90 91 f4 00 	lds	r25, 0x00F4
 780:	94 60       	ori	r25, 0x04	; 4
 782:	90 93 f4 00 	sts	0x00F4, r25
		
		if (filter->flags.rtr & 0x1)
 786:	94 81       	ldd	r25, Z+4	; 0x04
 788:	93 70       	andi	r25, 0x03	; 3
 78a:	90 ff       	sbrs	r25, 0
 78c:	05 c0       	rjmp	.+10     	; 0x798 <can_set_filter+0xa6>
			CANIDT4 |= (1 << RTRMSK);		// only RTR-frames
 78e:	90 91 f0 00 	lds	r25, 0x00F0
 792:	94 60       	ori	r25, 0x04	; 4
 794:	90 93 f0 00 	sts	0x00F0, r25
	}
	
	CANCDMOB |= (1<<CONMOB1);
 798:	90 91 ef 00 	lds	r25, 0x00EF
 79c:	90 68       	ori	r25, 0x80	; 128
 79e:	90 93 ef 00 	sts	0x00EF, r25
	
	_enable_mob_interrupt(number);
 7a2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_enable_mob_interrupt>
// leave standby mode => CAN Controller is connected to CAN Bus

extern __attribute__ ((gnu_inline)) inline void _leave_standby_mode(void)
{
	// save CANPAGE register
	uint8_t canpage = CANPAGE;
 7a6:	90 91 ed 00 	lds	r25, 0x00ED
	
	// reenable all MObs
	for (uint8_t i=0;i<15;i++) {
 7aa:	80 e0       	ldi	r24, 0x00	; 0
		CANPAGE = i << 4;
 7ac:	28 2f       	mov	r18, r24
 7ae:	22 95       	swap	r18
 7b0:	20 7f       	andi	r18, 0xF0	; 240
 7b2:	20 93 ed 00 	sts	0x00ED, r18
		CANCDMOB = CANCDMOB;
 7b6:	20 91 ef 00 	lds	r18, 0x00EF
 7ba:	20 93 ef 00 	sts	0x00EF, r18
{
	// save CANPAGE register
	uint8_t canpage = CANPAGE;
	
	// reenable all MObs
	for (uint8_t i=0;i<15;i++) {
 7be:	8f 5f       	subi	r24, 0xFF	; 255
 7c0:	8f 30       	cpi	r24, 0x0F	; 15
 7c2:	a1 f7       	brne	.-24     	; 0x7ac <can_set_filter+0xba>
		CANPAGE = i << 4;
		CANCDMOB = CANCDMOB;
	}
	
	// restore CANPAGE
	CANPAGE = canpage;
 7c4:	90 93 ed 00 	sts	0x00ED, r25
	
	// request normal mode
	CANGCON = (1 << ENASTB);
 7c8:	82 e0       	ldi	r24, 0x02	; 2
 7ca:	80 93 d8 00 	sts	0x00D8, r24
	
	// wait until the CAN Controller has left standby mode
	while ((CANGSTA & (1 << ENFG)) == 0)
 7ce:	80 91 d9 00 	lds	r24, 0x00D9
 7d2:	82 ff       	sbrs	r24, 2
 7d4:	fc cf       	rjmp	.-8      	; 0x7ce <can_set_filter+0xdc>
	
	// re-enable CAN Controller 
	_leave_standby_mode();
	
	return true;
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	08 95       	ret
// ----------------------------------------------------------------------------
bool at90can_set_filter(uint8_t number, const can_filter_t *filter)
{
	if (number > 14) {
		// it is only possible to serve a maximum of 15 filters
		return false;
 7da:	80 e0       	ldi	r24, 0x00	; 0
	
	// re-enable CAN Controller 
	_leave_standby_mode();
	
	return true;
}
 7dc:	08 95       	ret

000007de <at90can_copy_message_to_mob>:
 * \brief	Copy data form a message in RAM to the actual registers
 * 
 * \warning this function assumes CANPAGE to be set properly before the call
 */
void at90can_copy_message_to_mob(const can_t *msg)
{
 7de:	fc 01       	movw	r30, r24
	// write DLC (Data Length Code)
	CANCDMOB = msg->length;
 7e0:	83 81       	ldd	r24, Z+3	; 0x03
 7e2:	80 93 ef 00 	sts	0x00EF, r24
		CANIDT1 = (uint16_t) msg->id >> 3;
	}
	
	#else
	
	CANIDT4 = 0;
 7e6:	10 92 f0 00 	sts	0x00F0, r1
	CANIDT3 = 0;
 7ea:	10 92 f1 00 	sts	0x00F1, r1
	CANIDT2 = (uint8_t)  msg->id << 5;
 7ee:	80 81       	ld	r24, Z
 7f0:	82 95       	swap	r24
 7f2:	88 0f       	add	r24, r24
 7f4:	80 7e       	andi	r24, 0xE0	; 224
 7f6:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT1 = (uint16_t) msg->id >> 3;
 7fa:	80 81       	ld	r24, Z
 7fc:	91 81       	ldd	r25, Z+1	; 0x01
 7fe:	23 e0       	ldi	r18, 0x03	; 3
 800:	96 95       	lsr	r25
 802:	87 95       	ror	r24
 804:	2a 95       	dec	r18
 806:	e1 f7       	brne	.-8      	; 0x800 <at90can_copy_message_to_mob+0x22>
 808:	80 93 f3 00 	sts	0x00F3, r24
	
	#endif
	
	if (msg->flags.rtr) {
 80c:	82 81       	ldd	r24, Z+2	; 0x02
 80e:	80 ff       	sbrs	r24, 0
 810:	06 c0       	rjmp	.+12     	; 0x81e <at90can_copy_message_to_mob+0x40>
		CANIDT4 |= (1<<RTRTAG);
 812:	80 91 f0 00 	lds	r24, 0x00F0
 816:	84 60       	ori	r24, 0x04	; 4
 818:	80 93 f0 00 	sts	0x00F0, r24
 81c:	08 95       	ret
	}
	else {
		const uint8_t *p = msg->data;
 81e:	cf 01       	movw	r24, r30
 820:	04 96       	adiw	r24, 0x04	; 4
 822:	dc 01       	movw	r26, r24
		for (uint8_t i = 0;i < msg->length;i++) {
 824:	03 c0       	rjmp	.+6      	; 0x82c <at90can_copy_message_to_mob+0x4e>
			CANMSG = *p++;
 826:	2d 91       	ld	r18, X+
 828:	20 93 fa 00 	sts	0x00FA, r18
	if (msg->flags.rtr) {
		CANIDT4 |= (1<<RTRTAG);
	}
	else {
		const uint8_t *p = msg->data;
		for (uint8_t i = 0;i < msg->length;i++) {
 82c:	3a 2f       	mov	r19, r26
 82e:	38 1b       	sub	r19, r24
 830:	23 81       	ldd	r18, Z+3	; 0x03
 832:	32 17       	cp	r19, r18
 834:	c0 f3       	brcs	.-16     	; 0x826 <at90can_copy_message_to_mob+0x48>
 836:	08 95       	ret

00000838 <can_send_message>:
	}
}

// ----------------------------------------------------------------------------
uint8_t at90can_send_message(const can_t *msg)
{
 838:	1f 93       	push	r17
 83a:	cf 93       	push	r28
 83c:	df 93       	push	r29
 83e:	ec 01       	movw	r28, r24
	// check if there is any free MOb
	uint8_t mob = _find_free_mob();
 840:	0e 94 35 02 	call	0x46a	; 0x46a <_find_free_mob>
 844:	18 2f       	mov	r17, r24
	if (mob >= 15)
 846:	8f 30       	cpi	r24, 0x0F	; 15
 848:	f0 f4       	brcc	.+60     	; 0x886 <can_send_message+0x4e>
		return 0;
	
	// load corresponding MOb page ...
	CANPAGE = (mob << 4);
 84a:	82 95       	swap	r24
 84c:	80 7f       	andi	r24, 0xF0	; 240
 84e:	80 93 ed 00 	sts	0x00ED, r24
	
	// clear flags
	CANSTMOB &= 0;
 852:	80 91 ee 00 	lds	r24, 0x00EE
 856:	10 92 ee 00 	sts	0x00EE, r1
	
	// ... and copy the data
	at90can_copy_message_to_mob( msg );
 85a:	ce 01       	movw	r24, r28
 85c:	0e 94 ef 03 	call	0x7de	; 0x7de <at90can_copy_message_to_mob>
	
	// enable interrupt
	_enable_mob_interrupt(mob);
 860:	81 2f       	mov	r24, r17
 862:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_enable_mob_interrupt>
	
	ENTER_CRITICAL_SECTION;
 866:	9f b7       	in	r25, 0x3f	; 63
 868:	f8 94       	cli
	#if CAN_TX_BUFFER_SIZE == 0
		_free_buffer--;
 86a:	80 91 34 02 	lds	r24, 0x0234
 86e:	81 50       	subi	r24, 0x01	; 1
 870:	80 93 34 02 	sts	0x0234, r24
 874:	9f bf       	out	0x3f, r25	; 63
		_transmission_in_progress = 1;
	#endif
	LEAVE_CRITICAL_SECTION;
	
	// enable transmission
	CANCDMOB |= (1<<CONMOB0);
 876:	80 91 ef 00 	lds	r24, 0x00EF
 87a:	80 64       	ori	r24, 0x40	; 64
 87c:	80 93 ef 00 	sts	0x00EF, r24
	
	return (mob + 1);
 880:	81 2f       	mov	r24, r17
 882:	8f 5f       	subi	r24, 0xFF	; 255
 884:	01 c0       	rjmp	.+2      	; 0x888 <can_send_message+0x50>
uint8_t at90can_send_message(const can_t *msg)
{
	// check if there is any free MOb
	uint8_t mob = _find_free_mob();
	if (mob >= 15)
		return 0;
 886:	80 e0       	ldi	r24, 0x00	; 0
	
	// enable transmission
	CANCDMOB |= (1<<CONMOB0);
	
	return (mob + 1);
}
 888:	df 91       	pop	r29
 88a:	cf 91       	pop	r28
 88c:	1f 91       	pop	r17
 88e:	08 95       	ret

00000890 <main>:
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
 894:	cd b7       	in	r28, 0x3d	; 61
 896:	de b7       	in	r29, 0x3e	; 62
 898:	61 97       	sbiw	r28, 0x11	; 17
 89a:	0f b6       	in	r0, 0x3f	; 63
 89c:	f8 94       	cli
 89e:	de bf       	out	0x3e, r29	; 62
 8a0:	0f be       	out	0x3f, r0	; 63
 8a2:	cd bf       	out	0x3d, r28	; 61
 8a4:	60 e0       	ldi	r22, 0x00	; 0
 8a6:	76 e9       	ldi	r23, 0x96	; 150
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 94 07 01 	call	0x20e	; 0x20e <_Z9uart_initl>
 8b0:	8d b1       	in	r24, 0x0d	; 13
 8b2:	8f 70       	andi	r24, 0x0F	; 15
 8b4:	8d b9       	out	0x0d, r24	; 13
 8b6:	8e b1       	in	r24, 0x0e	; 14
 8b8:	80 6f       	ori	r24, 0xF0	; 240
 8ba:	8e b9       	out	0x0e, r24	; 14
 8bc:	81 b1       	in	r24, 0x01	; 1
 8be:	8f ef       	ldi	r24, 0xFF	; 255
 8c0:	81 b9       	out	0x01, r24	; 1
 8c2:	87 e0       	ldi	r24, 0x07	; 7
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0e 94 88 02 	call	0x510	; 0x510 <can_init>
 8ca:	78 94       	sei
 8cc:	89 e0       	ldi	r24, 0x09	; 9
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	9e 87       	std	Y+14, r25	; 0x0e
 8d2:	8d 87       	std	Y+13, r24	; 0x0d
 8d4:	18 8a       	std	Y+16, r1	; 0x10
 8d6:	1f 86       	std	Y+15, r1	; 0x0f
 8d8:	89 89       	ldd	r24, Y+17	; 0x11
 8da:	8c 7f       	andi	r24, 0xFC	; 252
 8dc:	89 8b       	std	Y+17, r24	; 0x11
 8de:	be 01       	movw	r22, r28
 8e0:	63 5f       	subi	r22, 0xF3	; 243
 8e2:	7f 4f       	sbci	r23, 0xFF	; 255
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <can_set_filter>
 8ea:	82 b1       	in	r24, 0x02	; 2
 8ec:	92 e0       	ldi	r25, 0x02	; 2
 8ee:	89 27       	eor	r24, r25
 8f0:	82 b9       	out	0x02, r24	; 2
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	82 b9       	out	0x02, r24	; 2
 8f6:	2f ef       	ldi	r18, 0xFF	; 255
 8f8:	33 ed       	ldi	r19, 0xD3	; 211
 8fa:	80 e3       	ldi	r24, 0x30	; 48
 8fc:	21 50       	subi	r18, 0x01	; 1
 8fe:	30 40       	sbci	r19, 0x00	; 0
 900:	80 40       	sbci	r24, 0x00	; 0
 902:	e1 f7       	brne	.-8      	; 0x8fc <main+0x6c>
 904:	00 c0       	rjmp	.+0      	; 0x906 <main+0x76>
 906:	00 00       	nop
 908:	92 b9       	out	0x02, r25	; 2
 90a:	82 e4       	ldi	r24, 0x42	; 66
 90c:	e8 2e       	mov	r14, r24
 90e:	f1 2c       	mov	r15, r1
 910:	98 e0       	ldi	r25, 0x08	; 8
 912:	c9 2e       	mov	r12, r25
 914:	2a e2       	ldi	r18, 0x2A	; 42
 916:	d2 2e       	mov	r13, r18
 918:	30 ef       	ldi	r19, 0xF0	; 240
 91a:	b3 2e       	mov	r11, r19
 91c:	fa 82       	std	Y+2, r15	; 0x02
 91e:	e9 82       	std	Y+1, r14	; 0x01
 920:	8b 81       	ldd	r24, Y+3	; 0x03
 922:	8e 7f       	andi	r24, 0xFE	; 254
 924:	8b 83       	std	Y+3, r24	; 0x03
 926:	cc 82       	std	Y+4, r12	; 0x04
 928:	dd 82       	std	Y+5, r13	; 0x05
 92a:	de 82       	std	Y+6, r13	; 0x06
 92c:	df 82       	std	Y+7, r13	; 0x07
 92e:	d8 86       	std	Y+8, r13	; 0x08
 930:	d9 86       	std	Y+9, r13	; 0x09
 932:	da 86       	std	Y+10, r13	; 0x0a
 934:	db 86       	std	Y+11, r13	; 0x0b
 936:	dc 86       	std	Y+12, r13	; 0x0c
 938:	08 e0       	ldi	r16, 0x08	; 8
 93a:	10 e0       	ldi	r17, 0x00	; 0
 93c:	ce 01       	movw	r24, r28
 93e:	01 96       	adiw	r24, 0x01	; 1
 940:	0e 94 1c 04 	call	0x838	; 0x838 <can_send_message>
 944:	88 23       	and	r24, r24
 946:	31 f0       	breq	.+12     	; 0x954 <main+0xc4>
 948:	82 b1       	in	r24, 0x02	; 2
 94a:	80 7f       	andi	r24, 0xF0	; 240
 94c:	82 b9       	out	0x02, r24	; 2
 94e:	82 b1       	in	r24, 0x02	; 2
 950:	8b 25       	eor	r24, r11
 952:	02 c0       	rjmp	.+4      	; 0x958 <main+0xc8>
 954:	82 b1       	in	r24, 0x02	; 2
 956:	8f 60       	ori	r24, 0x0F	; 15
 958:	82 b9       	out	0x02, r24	; 2
 95a:	01 50       	subi	r16, 0x01	; 1
 95c:	11 09       	sbc	r17, r1
 95e:	71 f7       	brne	.-36     	; 0x93c <main+0xac>
 960:	8f e9       	ldi	r24, 0x9F	; 159
 962:	9f e0       	ldi	r25, 0x0F	; 15
 964:	01 97       	sbiw	r24, 0x01	; 1
 966:	f1 f7       	brne	.-4      	; 0x964 <main+0xd4>
 968:	00 c0       	rjmp	.+0      	; 0x96a <main+0xda>
 96a:	00 00       	nop
 96c:	d7 cf       	rjmp	.-82     	; 0x91c <main+0x8c>

0000096e <__udivmodsi4>:
 96e:	a1 e2       	ldi	r26, 0x21	; 33
 970:	1a 2e       	mov	r1, r26
 972:	aa 1b       	sub	r26, r26
 974:	bb 1b       	sub	r27, r27
 976:	fd 01       	movw	r30, r26
 978:	0d c0       	rjmp	.+26     	; 0x994 <__udivmodsi4_ep>

0000097a <__udivmodsi4_loop>:
 97a:	aa 1f       	adc	r26, r26
 97c:	bb 1f       	adc	r27, r27
 97e:	ee 1f       	adc	r30, r30
 980:	ff 1f       	adc	r31, r31
 982:	a2 17       	cp	r26, r18
 984:	b3 07       	cpc	r27, r19
 986:	e4 07       	cpc	r30, r20
 988:	f5 07       	cpc	r31, r21
 98a:	20 f0       	brcs	.+8      	; 0x994 <__udivmodsi4_ep>
 98c:	a2 1b       	sub	r26, r18
 98e:	b3 0b       	sbc	r27, r19
 990:	e4 0b       	sbc	r30, r20
 992:	f5 0b       	sbc	r31, r21

00000994 <__udivmodsi4_ep>:
 994:	66 1f       	adc	r22, r22
 996:	77 1f       	adc	r23, r23
 998:	88 1f       	adc	r24, r24
 99a:	99 1f       	adc	r25, r25
 99c:	1a 94       	dec	r1
 99e:	69 f7       	brne	.-38     	; 0x97a <__udivmodsi4_loop>
 9a0:	60 95       	com	r22
 9a2:	70 95       	com	r23
 9a4:	80 95       	com	r24
 9a6:	90 95       	com	r25
 9a8:	9b 01       	movw	r18, r22
 9aa:	ac 01       	movw	r20, r24
 9ac:	bd 01       	movw	r22, r26
 9ae:	cf 01       	movw	r24, r30
 9b0:	08 95       	ret

000009b2 <vsprintf>:
 9b2:	0f 93       	push	r16
 9b4:	1f 93       	push	r17
 9b6:	cf 93       	push	r28
 9b8:	df 93       	push	r29
 9ba:	cd b7       	in	r28, 0x3d	; 61
 9bc:	de b7       	in	r29, 0x3e	; 62
 9be:	2e 97       	sbiw	r28, 0x0e	; 14
 9c0:	0f b6       	in	r0, 0x3f	; 63
 9c2:	f8 94       	cli
 9c4:	de bf       	out	0x3e, r29	; 62
 9c6:	0f be       	out	0x3f, r0	; 63
 9c8:	cd bf       	out	0x3d, r28	; 61
 9ca:	8c 01       	movw	r16, r24
 9cc:	86 e0       	ldi	r24, 0x06	; 6
 9ce:	8c 83       	std	Y+4, r24	; 0x04
 9d0:	1a 83       	std	Y+2, r17	; 0x02
 9d2:	09 83       	std	Y+1, r16	; 0x01
 9d4:	8f ef       	ldi	r24, 0xFF	; 255
 9d6:	9f e7       	ldi	r25, 0x7F	; 127
 9d8:	9e 83       	std	Y+6, r25	; 0x06
 9da:	8d 83       	std	Y+5, r24	; 0x05
 9dc:	ce 01       	movw	r24, r28
 9de:	01 96       	adiw	r24, 0x01	; 1
 9e0:	0e 94 02 05 	call	0xa04	; 0xa04 <vfprintf>
 9e4:	ef 81       	ldd	r30, Y+7	; 0x07
 9e6:	f8 85       	ldd	r31, Y+8	; 0x08
 9e8:	e0 0f       	add	r30, r16
 9ea:	f1 1f       	adc	r31, r17
 9ec:	10 82       	st	Z, r1
 9ee:	2e 96       	adiw	r28, 0x0e	; 14
 9f0:	0f b6       	in	r0, 0x3f	; 63
 9f2:	f8 94       	cli
 9f4:	de bf       	out	0x3e, r29	; 62
 9f6:	0f be       	out	0x3f, r0	; 63
 9f8:	cd bf       	out	0x3d, r28	; 61
 9fa:	df 91       	pop	r29
 9fc:	cf 91       	pop	r28
 9fe:	1f 91       	pop	r17
 a00:	0f 91       	pop	r16
 a02:	08 95       	ret

00000a04 <vfprintf>:
 a04:	2f 92       	push	r2
 a06:	3f 92       	push	r3
 a08:	4f 92       	push	r4
 a0a:	5f 92       	push	r5
 a0c:	6f 92       	push	r6
 a0e:	7f 92       	push	r7
 a10:	8f 92       	push	r8
 a12:	9f 92       	push	r9
 a14:	af 92       	push	r10
 a16:	bf 92       	push	r11
 a18:	cf 92       	push	r12
 a1a:	df 92       	push	r13
 a1c:	ef 92       	push	r14
 a1e:	ff 92       	push	r15
 a20:	0f 93       	push	r16
 a22:	1f 93       	push	r17
 a24:	cf 93       	push	r28
 a26:	df 93       	push	r29
 a28:	cd b7       	in	r28, 0x3d	; 61
 a2a:	de b7       	in	r29, 0x3e	; 62
 a2c:	2c 97       	sbiw	r28, 0x0c	; 12
 a2e:	0f b6       	in	r0, 0x3f	; 63
 a30:	f8 94       	cli
 a32:	de bf       	out	0x3e, r29	; 62
 a34:	0f be       	out	0x3f, r0	; 63
 a36:	cd bf       	out	0x3d, r28	; 61
 a38:	7c 01       	movw	r14, r24
 a3a:	6b 01       	movw	r12, r22
 a3c:	8a 01       	movw	r16, r20
 a3e:	fc 01       	movw	r30, r24
 a40:	17 82       	std	Z+7, r1	; 0x07
 a42:	16 82       	std	Z+6, r1	; 0x06
 a44:	83 81       	ldd	r24, Z+3	; 0x03
 a46:	81 ff       	sbrs	r24, 1
 a48:	c7 c1       	rjmp	.+910    	; 0xdd8 <vfprintf+0x3d4>
 a4a:	88 24       	eor	r8, r8
 a4c:	83 94       	inc	r8
 a4e:	91 2c       	mov	r9, r1
 a50:	8c 0e       	add	r8, r28
 a52:	9d 1e       	adc	r9, r29
 a54:	f7 01       	movw	r30, r14
 a56:	93 81       	ldd	r25, Z+3	; 0x03
 a58:	f6 01       	movw	r30, r12
 a5a:	93 fd       	sbrc	r25, 3
 a5c:	85 91       	lpm	r24, Z+
 a5e:	93 ff       	sbrs	r25, 3
 a60:	81 91       	ld	r24, Z+
 a62:	6f 01       	movw	r12, r30
 a64:	88 23       	and	r24, r24
 a66:	09 f4       	brne	.+2      	; 0xa6a <vfprintf+0x66>
 a68:	b3 c1       	rjmp	.+870    	; 0xdd0 <vfprintf+0x3cc>
 a6a:	85 32       	cpi	r24, 0x25	; 37
 a6c:	39 f4       	brne	.+14     	; 0xa7c <vfprintf+0x78>
 a6e:	93 fd       	sbrc	r25, 3
 a70:	85 91       	lpm	r24, Z+
 a72:	93 ff       	sbrs	r25, 3
 a74:	81 91       	ld	r24, Z+
 a76:	6f 01       	movw	r12, r30
 a78:	85 32       	cpi	r24, 0x25	; 37
 a7a:	29 f4       	brne	.+10     	; 0xa86 <vfprintf+0x82>
 a7c:	b7 01       	movw	r22, r14
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	0e 94 1e 07 	call	0xe3c	; 0xe3c <fputc>
 a84:	e7 cf       	rjmp	.-50     	; 0xa54 <vfprintf+0x50>
 a86:	71 2c       	mov	r7, r1
 a88:	31 2c       	mov	r3, r1
 a8a:	20 e0       	ldi	r18, 0x00	; 0
 a8c:	20 32       	cpi	r18, 0x20	; 32
 a8e:	a8 f4       	brcc	.+42     	; 0xaba <vfprintf+0xb6>
 a90:	8b 32       	cpi	r24, 0x2B	; 43
 a92:	61 f0       	breq	.+24     	; 0xaac <vfprintf+0xa8>
 a94:	28 f4       	brcc	.+10     	; 0xaa0 <vfprintf+0x9c>
 a96:	80 32       	cpi	r24, 0x20	; 32
 a98:	51 f0       	breq	.+20     	; 0xaae <vfprintf+0xaa>
 a9a:	83 32       	cpi	r24, 0x23	; 35
 a9c:	71 f4       	brne	.+28     	; 0xaba <vfprintf+0xb6>
 a9e:	0b c0       	rjmp	.+22     	; 0xab6 <vfprintf+0xb2>
 aa0:	8d 32       	cpi	r24, 0x2D	; 45
 aa2:	39 f0       	breq	.+14     	; 0xab2 <vfprintf+0xae>
 aa4:	80 33       	cpi	r24, 0x30	; 48
 aa6:	49 f4       	brne	.+18     	; 0xaba <vfprintf+0xb6>
 aa8:	21 60       	ori	r18, 0x01	; 1
 aaa:	28 c0       	rjmp	.+80     	; 0xafc <vfprintf+0xf8>
 aac:	22 60       	ori	r18, 0x02	; 2
 aae:	24 60       	ori	r18, 0x04	; 4
 ab0:	25 c0       	rjmp	.+74     	; 0xafc <vfprintf+0xf8>
 ab2:	28 60       	ori	r18, 0x08	; 8
 ab4:	23 c0       	rjmp	.+70     	; 0xafc <vfprintf+0xf8>
 ab6:	20 61       	ori	r18, 0x10	; 16
 ab8:	21 c0       	rjmp	.+66     	; 0xafc <vfprintf+0xf8>
 aba:	27 fd       	sbrc	r18, 7
 abc:	27 c0       	rjmp	.+78     	; 0xb0c <vfprintf+0x108>
 abe:	38 2f       	mov	r19, r24
 ac0:	30 53       	subi	r19, 0x30	; 48
 ac2:	3a 30       	cpi	r19, 0x0A	; 10
 ac4:	78 f4       	brcc	.+30     	; 0xae4 <vfprintf+0xe0>
 ac6:	26 ff       	sbrs	r18, 6
 ac8:	06 c0       	rjmp	.+12     	; 0xad6 <vfprintf+0xd2>
 aca:	fa e0       	ldi	r31, 0x0A	; 10
 acc:	7f 9e       	mul	r7, r31
 ace:	30 0d       	add	r19, r0
 ad0:	11 24       	eor	r1, r1
 ad2:	73 2e       	mov	r7, r19
 ad4:	13 c0       	rjmp	.+38     	; 0xafc <vfprintf+0xf8>
 ad6:	8a e0       	ldi	r24, 0x0A	; 10
 ad8:	38 9e       	mul	r3, r24
 ada:	30 0d       	add	r19, r0
 adc:	11 24       	eor	r1, r1
 ade:	33 2e       	mov	r3, r19
 ae0:	20 62       	ori	r18, 0x20	; 32
 ae2:	0c c0       	rjmp	.+24     	; 0xafc <vfprintf+0xf8>
 ae4:	8e 32       	cpi	r24, 0x2E	; 46
 ae6:	21 f4       	brne	.+8      	; 0xaf0 <vfprintf+0xec>
 ae8:	26 fd       	sbrc	r18, 6
 aea:	72 c1       	rjmp	.+740    	; 0xdd0 <vfprintf+0x3cc>
 aec:	20 64       	ori	r18, 0x40	; 64
 aee:	06 c0       	rjmp	.+12     	; 0xafc <vfprintf+0xf8>
 af0:	8c 36       	cpi	r24, 0x6C	; 108
 af2:	11 f4       	brne	.+4      	; 0xaf8 <vfprintf+0xf4>
 af4:	20 68       	ori	r18, 0x80	; 128
 af6:	02 c0       	rjmp	.+4      	; 0xafc <vfprintf+0xf8>
 af8:	88 36       	cpi	r24, 0x68	; 104
 afa:	41 f4       	brne	.+16     	; 0xb0c <vfprintf+0x108>
 afc:	f6 01       	movw	r30, r12
 afe:	93 fd       	sbrc	r25, 3
 b00:	85 91       	lpm	r24, Z+
 b02:	93 ff       	sbrs	r25, 3
 b04:	81 91       	ld	r24, Z+
 b06:	6f 01       	movw	r12, r30
 b08:	81 11       	cpse	r24, r1
 b0a:	c0 cf       	rjmp	.-128    	; 0xa8c <vfprintf+0x88>
 b0c:	98 2f       	mov	r25, r24
 b0e:	95 54       	subi	r25, 0x45	; 69
 b10:	93 30       	cpi	r25, 0x03	; 3
 b12:	18 f0       	brcs	.+6      	; 0xb1a <vfprintf+0x116>
 b14:	90 52       	subi	r25, 0x20	; 32
 b16:	93 30       	cpi	r25, 0x03	; 3
 b18:	28 f4       	brcc	.+10     	; 0xb24 <vfprintf+0x120>
 b1a:	0c 5f       	subi	r16, 0xFC	; 252
 b1c:	1f 4f       	sbci	r17, 0xFF	; 255
 b1e:	ff e3       	ldi	r31, 0x3F	; 63
 b20:	f9 83       	std	Y+1, r31	; 0x01
 b22:	0d c0       	rjmp	.+26     	; 0xb3e <vfprintf+0x13a>
 b24:	83 36       	cpi	r24, 0x63	; 99
 b26:	31 f0       	breq	.+12     	; 0xb34 <vfprintf+0x130>
 b28:	83 37       	cpi	r24, 0x73	; 115
 b2a:	71 f0       	breq	.+28     	; 0xb48 <vfprintf+0x144>
 b2c:	83 35       	cpi	r24, 0x53	; 83
 b2e:	09 f0       	breq	.+2      	; 0xb32 <vfprintf+0x12e>
 b30:	5e c0       	rjmp	.+188    	; 0xbee <vfprintf+0x1ea>
 b32:	23 c0       	rjmp	.+70     	; 0xb7a <vfprintf+0x176>
 b34:	f8 01       	movw	r30, r16
 b36:	80 81       	ld	r24, Z
 b38:	89 83       	std	Y+1, r24	; 0x01
 b3a:	0e 5f       	subi	r16, 0xFE	; 254
 b3c:	1f 4f       	sbci	r17, 0xFF	; 255
 b3e:	66 24       	eor	r6, r6
 b40:	63 94       	inc	r6
 b42:	71 2c       	mov	r7, r1
 b44:	54 01       	movw	r10, r8
 b46:	15 c0       	rjmp	.+42     	; 0xb72 <vfprintf+0x16e>
 b48:	28 01       	movw	r4, r16
 b4a:	f2 e0       	ldi	r31, 0x02	; 2
 b4c:	4f 0e       	add	r4, r31
 b4e:	51 1c       	adc	r5, r1
 b50:	f8 01       	movw	r30, r16
 b52:	a0 80       	ld	r10, Z
 b54:	b1 80       	ldd	r11, Z+1	; 0x01
 b56:	26 ff       	sbrs	r18, 6
 b58:	03 c0       	rjmp	.+6      	; 0xb60 <vfprintf+0x15c>
 b5a:	67 2d       	mov	r22, r7
 b5c:	70 e0       	ldi	r23, 0x00	; 0
 b5e:	02 c0       	rjmp	.+4      	; 0xb64 <vfprintf+0x160>
 b60:	6f ef       	ldi	r22, 0xFF	; 255
 b62:	7f ef       	ldi	r23, 0xFF	; 255
 b64:	c5 01       	movw	r24, r10
 b66:	2c 87       	std	Y+12, r18	; 0x0c
 b68:	0e 94 13 07 	call	0xe26	; 0xe26 <strnlen>
 b6c:	3c 01       	movw	r6, r24
 b6e:	82 01       	movw	r16, r4
 b70:	2c 85       	ldd	r18, Y+12	; 0x0c
 b72:	6f e7       	ldi	r22, 0x7F	; 127
 b74:	26 2e       	mov	r2, r22
 b76:	22 22       	and	r2, r18
 b78:	18 c0       	rjmp	.+48     	; 0xbaa <vfprintf+0x1a6>
 b7a:	28 01       	movw	r4, r16
 b7c:	f2 e0       	ldi	r31, 0x02	; 2
 b7e:	4f 0e       	add	r4, r31
 b80:	51 1c       	adc	r5, r1
 b82:	f8 01       	movw	r30, r16
 b84:	a0 80       	ld	r10, Z
 b86:	b1 80       	ldd	r11, Z+1	; 0x01
 b88:	26 ff       	sbrs	r18, 6
 b8a:	03 c0       	rjmp	.+6      	; 0xb92 <vfprintf+0x18e>
 b8c:	67 2d       	mov	r22, r7
 b8e:	70 e0       	ldi	r23, 0x00	; 0
 b90:	02 c0       	rjmp	.+4      	; 0xb96 <vfprintf+0x192>
 b92:	6f ef       	ldi	r22, 0xFF	; 255
 b94:	7f ef       	ldi	r23, 0xFF	; 255
 b96:	c5 01       	movw	r24, r10
 b98:	2c 87       	std	Y+12, r18	; 0x0c
 b9a:	0e 94 08 07 	call	0xe10	; 0xe10 <strnlen_P>
 b9e:	3c 01       	movw	r6, r24
 ba0:	2c 85       	ldd	r18, Y+12	; 0x0c
 ba2:	50 e8       	ldi	r21, 0x80	; 128
 ba4:	25 2e       	mov	r2, r21
 ba6:	22 2a       	or	r2, r18
 ba8:	82 01       	movw	r16, r4
 baa:	23 fc       	sbrc	r2, 3
 bac:	1c c0       	rjmp	.+56     	; 0xbe6 <vfprintf+0x1e2>
 bae:	06 c0       	rjmp	.+12     	; 0xbbc <vfprintf+0x1b8>
 bb0:	b7 01       	movw	r22, r14
 bb2:	80 e2       	ldi	r24, 0x20	; 32
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	0e 94 1e 07 	call	0xe3c	; 0xe3c <fputc>
 bba:	3a 94       	dec	r3
 bbc:	83 2d       	mov	r24, r3
 bbe:	90 e0       	ldi	r25, 0x00	; 0
 bc0:	68 16       	cp	r6, r24
 bc2:	79 06       	cpc	r7, r25
 bc4:	a8 f3       	brcs	.-22     	; 0xbb0 <vfprintf+0x1ac>
 bc6:	0f c0       	rjmp	.+30     	; 0xbe6 <vfprintf+0x1e2>
 bc8:	f5 01       	movw	r30, r10
 bca:	27 fc       	sbrc	r2, 7
 bcc:	85 91       	lpm	r24, Z+
 bce:	27 fe       	sbrs	r2, 7
 bd0:	81 91       	ld	r24, Z+
 bd2:	5f 01       	movw	r10, r30
 bd4:	b7 01       	movw	r22, r14
 bd6:	90 e0       	ldi	r25, 0x00	; 0
 bd8:	0e 94 1e 07 	call	0xe3c	; 0xe3c <fputc>
 bdc:	31 10       	cpse	r3, r1
 bde:	3a 94       	dec	r3
 be0:	f1 e0       	ldi	r31, 0x01	; 1
 be2:	6f 1a       	sub	r6, r31
 be4:	71 08       	sbc	r7, r1
 be6:	61 14       	cp	r6, r1
 be8:	71 04       	cpc	r7, r1
 bea:	71 f7       	brne	.-36     	; 0xbc8 <vfprintf+0x1c4>
 bec:	ee c0       	rjmp	.+476    	; 0xdca <vfprintf+0x3c6>
 bee:	84 36       	cpi	r24, 0x64	; 100
 bf0:	11 f0       	breq	.+4      	; 0xbf6 <vfprintf+0x1f2>
 bf2:	89 36       	cpi	r24, 0x69	; 105
 bf4:	41 f5       	brne	.+80     	; 0xc46 <vfprintf+0x242>
 bf6:	f8 01       	movw	r30, r16
 bf8:	27 ff       	sbrs	r18, 7
 bfa:	07 c0       	rjmp	.+14     	; 0xc0a <vfprintf+0x206>
 bfc:	60 81       	ld	r22, Z
 bfe:	71 81       	ldd	r23, Z+1	; 0x01
 c00:	82 81       	ldd	r24, Z+2	; 0x02
 c02:	93 81       	ldd	r25, Z+3	; 0x03
 c04:	0c 5f       	subi	r16, 0xFC	; 252
 c06:	1f 4f       	sbci	r17, 0xFF	; 255
 c08:	08 c0       	rjmp	.+16     	; 0xc1a <vfprintf+0x216>
 c0a:	60 81       	ld	r22, Z
 c0c:	71 81       	ldd	r23, Z+1	; 0x01
 c0e:	88 27       	eor	r24, r24
 c10:	77 fd       	sbrc	r23, 7
 c12:	80 95       	com	r24
 c14:	98 2f       	mov	r25, r24
 c16:	0e 5f       	subi	r16, 0xFE	; 254
 c18:	1f 4f       	sbci	r17, 0xFF	; 255
 c1a:	4f e6       	ldi	r20, 0x6F	; 111
 c1c:	64 2e       	mov	r6, r20
 c1e:	62 22       	and	r6, r18
 c20:	97 ff       	sbrs	r25, 7
 c22:	09 c0       	rjmp	.+18     	; 0xc36 <vfprintf+0x232>
 c24:	90 95       	com	r25
 c26:	80 95       	com	r24
 c28:	70 95       	com	r23
 c2a:	61 95       	neg	r22
 c2c:	7f 4f       	sbci	r23, 0xFF	; 255
 c2e:	8f 4f       	sbci	r24, 0xFF	; 255
 c30:	9f 4f       	sbci	r25, 0xFF	; 255
 c32:	f0 e8       	ldi	r31, 0x80	; 128
 c34:	6f 2a       	or	r6, r31
 c36:	2a e0       	ldi	r18, 0x0A	; 10
 c38:	30 e0       	ldi	r19, 0x00	; 0
 c3a:	a4 01       	movw	r20, r8
 c3c:	0e 94 4a 07 	call	0xe94	; 0xe94 <__ultoa_invert>
 c40:	a8 2e       	mov	r10, r24
 c42:	a8 18       	sub	r10, r8
 c44:	44 c0       	rjmp	.+136    	; 0xcce <vfprintf+0x2ca>
 c46:	85 37       	cpi	r24, 0x75	; 117
 c48:	31 f4       	brne	.+12     	; 0xc56 <vfprintf+0x252>
 c4a:	3f ee       	ldi	r19, 0xEF	; 239
 c4c:	b3 2e       	mov	r11, r19
 c4e:	b2 22       	and	r11, r18
 c50:	2a e0       	ldi	r18, 0x0A	; 10
 c52:	30 e0       	ldi	r19, 0x00	; 0
 c54:	24 c0       	rjmp	.+72     	; 0xc9e <vfprintf+0x29a>
 c56:	99 ef       	ldi	r25, 0xF9	; 249
 c58:	b9 2e       	mov	r11, r25
 c5a:	b2 22       	and	r11, r18
 c5c:	8f 36       	cpi	r24, 0x6F	; 111
 c5e:	b9 f0       	breq	.+46     	; 0xc8e <vfprintf+0x28a>
 c60:	20 f4       	brcc	.+8      	; 0xc6a <vfprintf+0x266>
 c62:	88 35       	cpi	r24, 0x58	; 88
 c64:	09 f0       	breq	.+2      	; 0xc68 <vfprintf+0x264>
 c66:	b4 c0       	rjmp	.+360    	; 0xdd0 <vfprintf+0x3cc>
 c68:	0d c0       	rjmp	.+26     	; 0xc84 <vfprintf+0x280>
 c6a:	80 37       	cpi	r24, 0x70	; 112
 c6c:	21 f0       	breq	.+8      	; 0xc76 <vfprintf+0x272>
 c6e:	88 37       	cpi	r24, 0x78	; 120
 c70:	09 f0       	breq	.+2      	; 0xc74 <vfprintf+0x270>
 c72:	ae c0       	rjmp	.+348    	; 0xdd0 <vfprintf+0x3cc>
 c74:	02 c0       	rjmp	.+4      	; 0xc7a <vfprintf+0x276>
 c76:	20 e1       	ldi	r18, 0x10	; 16
 c78:	b2 2a       	or	r11, r18
 c7a:	b4 fe       	sbrs	r11, 4
 c7c:	0b c0       	rjmp	.+22     	; 0xc94 <vfprintf+0x290>
 c7e:	84 e0       	ldi	r24, 0x04	; 4
 c80:	b8 2a       	or	r11, r24
 c82:	08 c0       	rjmp	.+16     	; 0xc94 <vfprintf+0x290>
 c84:	24 ff       	sbrs	r18, 4
 c86:	09 c0       	rjmp	.+18     	; 0xc9a <vfprintf+0x296>
 c88:	e6 e0       	ldi	r30, 0x06	; 6
 c8a:	be 2a       	or	r11, r30
 c8c:	06 c0       	rjmp	.+12     	; 0xc9a <vfprintf+0x296>
 c8e:	28 e0       	ldi	r18, 0x08	; 8
 c90:	30 e0       	ldi	r19, 0x00	; 0
 c92:	05 c0       	rjmp	.+10     	; 0xc9e <vfprintf+0x29a>
 c94:	20 e1       	ldi	r18, 0x10	; 16
 c96:	30 e0       	ldi	r19, 0x00	; 0
 c98:	02 c0       	rjmp	.+4      	; 0xc9e <vfprintf+0x29a>
 c9a:	20 e1       	ldi	r18, 0x10	; 16
 c9c:	32 e0       	ldi	r19, 0x02	; 2
 c9e:	f8 01       	movw	r30, r16
 ca0:	b7 fe       	sbrs	r11, 7
 ca2:	07 c0       	rjmp	.+14     	; 0xcb2 <vfprintf+0x2ae>
 ca4:	60 81       	ld	r22, Z
 ca6:	71 81       	ldd	r23, Z+1	; 0x01
 ca8:	82 81       	ldd	r24, Z+2	; 0x02
 caa:	93 81       	ldd	r25, Z+3	; 0x03
 cac:	0c 5f       	subi	r16, 0xFC	; 252
 cae:	1f 4f       	sbci	r17, 0xFF	; 255
 cb0:	06 c0       	rjmp	.+12     	; 0xcbe <vfprintf+0x2ba>
 cb2:	60 81       	ld	r22, Z
 cb4:	71 81       	ldd	r23, Z+1	; 0x01
 cb6:	80 e0       	ldi	r24, 0x00	; 0
 cb8:	90 e0       	ldi	r25, 0x00	; 0
 cba:	0e 5f       	subi	r16, 0xFE	; 254
 cbc:	1f 4f       	sbci	r17, 0xFF	; 255
 cbe:	a4 01       	movw	r20, r8
 cc0:	0e 94 4a 07 	call	0xe94	; 0xe94 <__ultoa_invert>
 cc4:	a8 2e       	mov	r10, r24
 cc6:	a8 18       	sub	r10, r8
 cc8:	8f e7       	ldi	r24, 0x7F	; 127
 cca:	68 2e       	mov	r6, r24
 ccc:	6b 20       	and	r6, r11
 cce:	66 fe       	sbrs	r6, 6
 cd0:	0b c0       	rjmp	.+22     	; 0xce8 <vfprintf+0x2e4>
 cd2:	36 2d       	mov	r19, r6
 cd4:	3e 7f       	andi	r19, 0xFE	; 254
 cd6:	a7 14       	cp	r10, r7
 cd8:	50 f4       	brcc	.+20     	; 0xcee <vfprintf+0x2ea>
 cda:	64 fe       	sbrs	r6, 4
 cdc:	0a c0       	rjmp	.+20     	; 0xcf2 <vfprintf+0x2ee>
 cde:	62 fc       	sbrc	r6, 2
 ce0:	08 c0       	rjmp	.+16     	; 0xcf2 <vfprintf+0x2ee>
 ce2:	36 2d       	mov	r19, r6
 ce4:	3e 7e       	andi	r19, 0xEE	; 238
 ce6:	05 c0       	rjmp	.+10     	; 0xcf2 <vfprintf+0x2ee>
 ce8:	ba 2c       	mov	r11, r10
 cea:	36 2d       	mov	r19, r6
 cec:	03 c0       	rjmp	.+6      	; 0xcf4 <vfprintf+0x2f0>
 cee:	ba 2c       	mov	r11, r10
 cf0:	01 c0       	rjmp	.+2      	; 0xcf4 <vfprintf+0x2f0>
 cf2:	b7 2c       	mov	r11, r7
 cf4:	34 ff       	sbrs	r19, 4
 cf6:	0d c0       	rjmp	.+26     	; 0xd12 <vfprintf+0x30e>
 cf8:	fe 01       	movw	r30, r28
 cfa:	ea 0d       	add	r30, r10
 cfc:	f1 1d       	adc	r31, r1
 cfe:	80 81       	ld	r24, Z
 d00:	80 33       	cpi	r24, 0x30	; 48
 d02:	11 f4       	brne	.+4      	; 0xd08 <vfprintf+0x304>
 d04:	39 7e       	andi	r19, 0xE9	; 233
 d06:	09 c0       	rjmp	.+18     	; 0xd1a <vfprintf+0x316>
 d08:	32 ff       	sbrs	r19, 2
 d0a:	06 c0       	rjmp	.+12     	; 0xd18 <vfprintf+0x314>
 d0c:	b3 94       	inc	r11
 d0e:	b3 94       	inc	r11
 d10:	04 c0       	rjmp	.+8      	; 0xd1a <vfprintf+0x316>
 d12:	83 2f       	mov	r24, r19
 d14:	86 78       	andi	r24, 0x86	; 134
 d16:	09 f0       	breq	.+2      	; 0xd1a <vfprintf+0x316>
 d18:	b3 94       	inc	r11
 d1a:	33 fd       	sbrc	r19, 3
 d1c:	14 c0       	rjmp	.+40     	; 0xd46 <vfprintf+0x342>
 d1e:	30 ff       	sbrs	r19, 0
 d20:	0f c0       	rjmp	.+30     	; 0xd40 <vfprintf+0x33c>
 d22:	7a 2c       	mov	r7, r10
 d24:	b3 14       	cp	r11, r3
 d26:	60 f4       	brcc	.+24     	; 0xd40 <vfprintf+0x33c>
 d28:	73 0c       	add	r7, r3
 d2a:	7b 18       	sub	r7, r11
 d2c:	b3 2c       	mov	r11, r3
 d2e:	08 c0       	rjmp	.+16     	; 0xd40 <vfprintf+0x33c>
 d30:	b7 01       	movw	r22, r14
 d32:	80 e2       	ldi	r24, 0x20	; 32
 d34:	90 e0       	ldi	r25, 0x00	; 0
 d36:	3c 87       	std	Y+12, r19	; 0x0c
 d38:	0e 94 1e 07 	call	0xe3c	; 0xe3c <fputc>
 d3c:	b3 94       	inc	r11
 d3e:	3c 85       	ldd	r19, Y+12	; 0x0c
 d40:	b3 14       	cp	r11, r3
 d42:	b0 f3       	brcs	.-20     	; 0xd30 <vfprintf+0x32c>
 d44:	04 c0       	rjmp	.+8      	; 0xd4e <vfprintf+0x34a>
 d46:	b3 14       	cp	r11, r3
 d48:	10 f4       	brcc	.+4      	; 0xd4e <vfprintf+0x34a>
 d4a:	3b 18       	sub	r3, r11
 d4c:	01 c0       	rjmp	.+2      	; 0xd50 <vfprintf+0x34c>
 d4e:	31 2c       	mov	r3, r1
 d50:	34 ff       	sbrs	r19, 4
 d52:	12 c0       	rjmp	.+36     	; 0xd78 <vfprintf+0x374>
 d54:	b7 01       	movw	r22, r14
 d56:	80 e3       	ldi	r24, 0x30	; 48
 d58:	90 e0       	ldi	r25, 0x00	; 0
 d5a:	3c 87       	std	Y+12, r19	; 0x0c
 d5c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <fputc>
 d60:	3c 85       	ldd	r19, Y+12	; 0x0c
 d62:	32 ff       	sbrs	r19, 2
 d64:	1e c0       	rjmp	.+60     	; 0xda2 <vfprintf+0x39e>
 d66:	31 ff       	sbrs	r19, 1
 d68:	03 c0       	rjmp	.+6      	; 0xd70 <vfprintf+0x36c>
 d6a:	88 e5       	ldi	r24, 0x58	; 88
 d6c:	90 e0       	ldi	r25, 0x00	; 0
 d6e:	02 c0       	rjmp	.+4      	; 0xd74 <vfprintf+0x370>
 d70:	88 e7       	ldi	r24, 0x78	; 120
 d72:	90 e0       	ldi	r25, 0x00	; 0
 d74:	b7 01       	movw	r22, r14
 d76:	0c c0       	rjmp	.+24     	; 0xd90 <vfprintf+0x38c>
 d78:	83 2f       	mov	r24, r19
 d7a:	86 78       	andi	r24, 0x86	; 134
 d7c:	91 f0       	breq	.+36     	; 0xda2 <vfprintf+0x39e>
 d7e:	31 fd       	sbrc	r19, 1
 d80:	02 c0       	rjmp	.+4      	; 0xd86 <vfprintf+0x382>
 d82:	80 e2       	ldi	r24, 0x20	; 32
 d84:	01 c0       	rjmp	.+2      	; 0xd88 <vfprintf+0x384>
 d86:	8b e2       	ldi	r24, 0x2B	; 43
 d88:	37 fd       	sbrc	r19, 7
 d8a:	8d e2       	ldi	r24, 0x2D	; 45
 d8c:	b7 01       	movw	r22, r14
 d8e:	90 e0       	ldi	r25, 0x00	; 0
 d90:	0e 94 1e 07 	call	0xe3c	; 0xe3c <fputc>
 d94:	06 c0       	rjmp	.+12     	; 0xda2 <vfprintf+0x39e>
 d96:	b7 01       	movw	r22, r14
 d98:	80 e3       	ldi	r24, 0x30	; 48
 d9a:	90 e0       	ldi	r25, 0x00	; 0
 d9c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <fputc>
 da0:	7a 94       	dec	r7
 da2:	a7 14       	cp	r10, r7
 da4:	c0 f3       	brcs	.-16     	; 0xd96 <vfprintf+0x392>
 da6:	aa 94       	dec	r10
 da8:	f4 01       	movw	r30, r8
 daa:	ea 0d       	add	r30, r10
 dac:	f1 1d       	adc	r31, r1
 dae:	b7 01       	movw	r22, r14
 db0:	80 81       	ld	r24, Z
 db2:	90 e0       	ldi	r25, 0x00	; 0
 db4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <fputc>
 db8:	a1 10       	cpse	r10, r1
 dba:	f5 cf       	rjmp	.-22     	; 0xda6 <vfprintf+0x3a2>
 dbc:	06 c0       	rjmp	.+12     	; 0xdca <vfprintf+0x3c6>
 dbe:	b7 01       	movw	r22, r14
 dc0:	80 e2       	ldi	r24, 0x20	; 32
 dc2:	90 e0       	ldi	r25, 0x00	; 0
 dc4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <fputc>
 dc8:	3a 94       	dec	r3
 dca:	31 10       	cpse	r3, r1
 dcc:	f8 cf       	rjmp	.-16     	; 0xdbe <vfprintf+0x3ba>
 dce:	42 ce       	rjmp	.-892    	; 0xa54 <vfprintf+0x50>
 dd0:	f7 01       	movw	r30, r14
 dd2:	26 81       	ldd	r18, Z+6	; 0x06
 dd4:	37 81       	ldd	r19, Z+7	; 0x07
 dd6:	02 c0       	rjmp	.+4      	; 0xddc <vfprintf+0x3d8>
 dd8:	2f ef       	ldi	r18, 0xFF	; 255
 dda:	3f ef       	ldi	r19, 0xFF	; 255
 ddc:	c9 01       	movw	r24, r18
 dde:	2c 96       	adiw	r28, 0x0c	; 12
 de0:	0f b6       	in	r0, 0x3f	; 63
 de2:	f8 94       	cli
 de4:	de bf       	out	0x3e, r29	; 62
 de6:	0f be       	out	0x3f, r0	; 63
 de8:	cd bf       	out	0x3d, r28	; 61
 dea:	df 91       	pop	r29
 dec:	cf 91       	pop	r28
 dee:	1f 91       	pop	r17
 df0:	0f 91       	pop	r16
 df2:	ff 90       	pop	r15
 df4:	ef 90       	pop	r14
 df6:	df 90       	pop	r13
 df8:	cf 90       	pop	r12
 dfa:	bf 90       	pop	r11
 dfc:	af 90       	pop	r10
 dfe:	9f 90       	pop	r9
 e00:	8f 90       	pop	r8
 e02:	7f 90       	pop	r7
 e04:	6f 90       	pop	r6
 e06:	5f 90       	pop	r5
 e08:	4f 90       	pop	r4
 e0a:	3f 90       	pop	r3
 e0c:	2f 90       	pop	r2
 e0e:	08 95       	ret

00000e10 <strnlen_P>:
 e10:	fc 01       	movw	r30, r24
 e12:	05 90       	lpm	r0, Z+
 e14:	61 50       	subi	r22, 0x01	; 1
 e16:	70 40       	sbci	r23, 0x00	; 0
 e18:	01 10       	cpse	r0, r1
 e1a:	d8 f7       	brcc	.-10     	; 0xe12 <strnlen_P+0x2>
 e1c:	80 95       	com	r24
 e1e:	90 95       	com	r25
 e20:	8e 0f       	add	r24, r30
 e22:	9f 1f       	adc	r25, r31
 e24:	08 95       	ret

00000e26 <strnlen>:
 e26:	fc 01       	movw	r30, r24
 e28:	61 50       	subi	r22, 0x01	; 1
 e2a:	70 40       	sbci	r23, 0x00	; 0
 e2c:	01 90       	ld	r0, Z+
 e2e:	01 10       	cpse	r0, r1
 e30:	d8 f7       	brcc	.-10     	; 0xe28 <strnlen+0x2>
 e32:	80 95       	com	r24
 e34:	90 95       	com	r25
 e36:	8e 0f       	add	r24, r30
 e38:	9f 1f       	adc	r25, r31
 e3a:	08 95       	ret

00000e3c <fputc>:
 e3c:	0f 93       	push	r16
 e3e:	1f 93       	push	r17
 e40:	cf 93       	push	r28
 e42:	df 93       	push	r29
 e44:	8c 01       	movw	r16, r24
 e46:	eb 01       	movw	r28, r22
 e48:	8b 81       	ldd	r24, Y+3	; 0x03
 e4a:	81 fd       	sbrc	r24, 1
 e4c:	03 c0       	rjmp	.+6      	; 0xe54 <fputc+0x18>
 e4e:	0f ef       	ldi	r16, 0xFF	; 255
 e50:	1f ef       	ldi	r17, 0xFF	; 255
 e52:	1a c0       	rjmp	.+52     	; 0xe88 <fputc+0x4c>
 e54:	82 ff       	sbrs	r24, 2
 e56:	0d c0       	rjmp	.+26     	; 0xe72 <fputc+0x36>
 e58:	2e 81       	ldd	r18, Y+6	; 0x06
 e5a:	3f 81       	ldd	r19, Y+7	; 0x07
 e5c:	8c 81       	ldd	r24, Y+4	; 0x04
 e5e:	9d 81       	ldd	r25, Y+5	; 0x05
 e60:	28 17       	cp	r18, r24
 e62:	39 07       	cpc	r19, r25
 e64:	64 f4       	brge	.+24     	; 0xe7e <fputc+0x42>
 e66:	e8 81       	ld	r30, Y
 e68:	f9 81       	ldd	r31, Y+1	; 0x01
 e6a:	01 93       	st	Z+, r16
 e6c:	f9 83       	std	Y+1, r31	; 0x01
 e6e:	e8 83       	st	Y, r30
 e70:	06 c0       	rjmp	.+12     	; 0xe7e <fputc+0x42>
 e72:	e8 85       	ldd	r30, Y+8	; 0x08
 e74:	f9 85       	ldd	r31, Y+9	; 0x09
 e76:	80 2f       	mov	r24, r16
 e78:	09 95       	icall
 e7a:	89 2b       	or	r24, r25
 e7c:	41 f7       	brne	.-48     	; 0xe4e <fputc+0x12>
 e7e:	8e 81       	ldd	r24, Y+6	; 0x06
 e80:	9f 81       	ldd	r25, Y+7	; 0x07
 e82:	01 96       	adiw	r24, 0x01	; 1
 e84:	9f 83       	std	Y+7, r25	; 0x07
 e86:	8e 83       	std	Y+6, r24	; 0x06
 e88:	c8 01       	movw	r24, r16
 e8a:	df 91       	pop	r29
 e8c:	cf 91       	pop	r28
 e8e:	1f 91       	pop	r17
 e90:	0f 91       	pop	r16
 e92:	08 95       	ret

00000e94 <__ultoa_invert>:
 e94:	fa 01       	movw	r30, r20
 e96:	aa 27       	eor	r26, r26
 e98:	28 30       	cpi	r18, 0x08	; 8
 e9a:	51 f1       	breq	.+84     	; 0xef0 <__ultoa_invert+0x5c>
 e9c:	20 31       	cpi	r18, 0x10	; 16
 e9e:	81 f1       	breq	.+96     	; 0xf00 <__ultoa_invert+0x6c>
 ea0:	e8 94       	clt
 ea2:	6f 93       	push	r22
 ea4:	6e 7f       	andi	r22, 0xFE	; 254
 ea6:	6e 5f       	subi	r22, 0xFE	; 254
 ea8:	7f 4f       	sbci	r23, 0xFF	; 255
 eaa:	8f 4f       	sbci	r24, 0xFF	; 255
 eac:	9f 4f       	sbci	r25, 0xFF	; 255
 eae:	af 4f       	sbci	r26, 0xFF	; 255
 eb0:	b1 e0       	ldi	r27, 0x01	; 1
 eb2:	3e d0       	rcall	.+124    	; 0xf30 <__ultoa_invert+0x9c>
 eb4:	b4 e0       	ldi	r27, 0x04	; 4
 eb6:	3c d0       	rcall	.+120    	; 0xf30 <__ultoa_invert+0x9c>
 eb8:	67 0f       	add	r22, r23
 eba:	78 1f       	adc	r23, r24
 ebc:	89 1f       	adc	r24, r25
 ebe:	9a 1f       	adc	r25, r26
 ec0:	a1 1d       	adc	r26, r1
 ec2:	68 0f       	add	r22, r24
 ec4:	79 1f       	adc	r23, r25
 ec6:	8a 1f       	adc	r24, r26
 ec8:	91 1d       	adc	r25, r1
 eca:	a1 1d       	adc	r26, r1
 ecc:	6a 0f       	add	r22, r26
 ece:	71 1d       	adc	r23, r1
 ed0:	81 1d       	adc	r24, r1
 ed2:	91 1d       	adc	r25, r1
 ed4:	a1 1d       	adc	r26, r1
 ed6:	20 d0       	rcall	.+64     	; 0xf18 <__ultoa_invert+0x84>
 ed8:	09 f4       	brne	.+2      	; 0xedc <__ultoa_invert+0x48>
 eda:	68 94       	set
 edc:	3f 91       	pop	r19
 ede:	2a e0       	ldi	r18, 0x0A	; 10
 ee0:	26 9f       	mul	r18, r22
 ee2:	11 24       	eor	r1, r1
 ee4:	30 19       	sub	r19, r0
 ee6:	30 5d       	subi	r19, 0xD0	; 208
 ee8:	31 93       	st	Z+, r19
 eea:	de f6       	brtc	.-74     	; 0xea2 <__ultoa_invert+0xe>
 eec:	cf 01       	movw	r24, r30
 eee:	08 95       	ret
 ef0:	46 2f       	mov	r20, r22
 ef2:	47 70       	andi	r20, 0x07	; 7
 ef4:	40 5d       	subi	r20, 0xD0	; 208
 ef6:	41 93       	st	Z+, r20
 ef8:	b3 e0       	ldi	r27, 0x03	; 3
 efa:	0f d0       	rcall	.+30     	; 0xf1a <__ultoa_invert+0x86>
 efc:	c9 f7       	brne	.-14     	; 0xef0 <__ultoa_invert+0x5c>
 efe:	f6 cf       	rjmp	.-20     	; 0xeec <__ultoa_invert+0x58>
 f00:	46 2f       	mov	r20, r22
 f02:	4f 70       	andi	r20, 0x0F	; 15
 f04:	40 5d       	subi	r20, 0xD0	; 208
 f06:	4a 33       	cpi	r20, 0x3A	; 58
 f08:	18 f0       	brcs	.+6      	; 0xf10 <__ultoa_invert+0x7c>
 f0a:	49 5d       	subi	r20, 0xD9	; 217
 f0c:	31 fd       	sbrc	r19, 1
 f0e:	40 52       	subi	r20, 0x20	; 32
 f10:	41 93       	st	Z+, r20
 f12:	02 d0       	rcall	.+4      	; 0xf18 <__ultoa_invert+0x84>
 f14:	a9 f7       	brne	.-22     	; 0xf00 <__ultoa_invert+0x6c>
 f16:	ea cf       	rjmp	.-44     	; 0xeec <__ultoa_invert+0x58>
 f18:	b4 e0       	ldi	r27, 0x04	; 4
 f1a:	a6 95       	lsr	r26
 f1c:	97 95       	ror	r25
 f1e:	87 95       	ror	r24
 f20:	77 95       	ror	r23
 f22:	67 95       	ror	r22
 f24:	ba 95       	dec	r27
 f26:	c9 f7       	brne	.-14     	; 0xf1a <__ultoa_invert+0x86>
 f28:	00 97       	sbiw	r24, 0x00	; 0
 f2a:	61 05       	cpc	r22, r1
 f2c:	71 05       	cpc	r23, r1
 f2e:	08 95       	ret
 f30:	9b 01       	movw	r18, r22
 f32:	ac 01       	movw	r20, r24
 f34:	0a 2e       	mov	r0, r26
 f36:	06 94       	lsr	r0
 f38:	57 95       	ror	r21
 f3a:	47 95       	ror	r20
 f3c:	37 95       	ror	r19
 f3e:	27 95       	ror	r18
 f40:	ba 95       	dec	r27
 f42:	c9 f7       	brne	.-14     	; 0xf36 <__ultoa_invert+0xa2>
 f44:	62 0f       	add	r22, r18
 f46:	73 1f       	adc	r23, r19
 f48:	84 1f       	adc	r24, r20
 f4a:	95 1f       	adc	r25, r21
 f4c:	a0 1d       	adc	r26, r0
 f4e:	08 95       	ret

00000f50 <_exit>:
 f50:	f8 94       	cli

00000f52 <__stop_program>:
 f52:	ff cf       	rjmp	.-2      	; 0xf52 <__stop_program>
