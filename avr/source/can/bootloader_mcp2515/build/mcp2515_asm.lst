   1               	# 1 "mcp2515_asm.S"
   1               	; Copyright (c) 2010, Roboterclub Aachen e.V.
   0               	
   0               	
   2               	; All rights reserved.
   3               	;
   4               	; Redistribution and use in source and binary forms, with or without
   5               	; modification, are permitted provided that the following conditions are met:
   6               	;
   7               	;  * Redistributions of source code must retain the above copyright
   8               	;    notice, this list of conditions and the following disclaimer.
   9               	;  * Redistributions in binary form must reproduce the above copyright
  10               	;    notice, this list of conditions and the following disclaimer in the
  11               	;    documentation and/or other materials provided with the distribution.
  12               	;  * Neither the name of the Roboterclub Aachen e.V. nor the
  13               	;    names of its contributors may be used to endorse or promote products
  14               	;    derived from this software without specific prior written permission.
  15               	;
  16               	; THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
  17               	; EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  18               	; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  19               	; DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
  20               	; DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  21               	; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  22               	; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  23               	; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  24               	; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  25               	; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  26               	;
  27               	; $Id$
  28               	;
  29               	; ----------------------------------------------------------------------------
  30               	
  31               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h 2211 2011-02-14 14:04:25Z aboyapati $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    The last on-chip RAM address.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    The last possible RAM location that is addressable. This is equal to 
  75               	    RAMEND for devices that do not allow for external RAM. For devices 
  76               	    that allow external RAM, this will be larger than RAMEND.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    The last EEPROM address.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    The last byte address in the Flash program space.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. 
  90               	    - \b E2PAGESIZE
  91               	    <br>
  92               	    The size of the EEPROM page.
  93               	    
  94               	*/
  95               	
  96               	#ifndef _AVR_IO_H_
  97               	#define _AVR_IO_H_
  98               	
  99               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
 100               	
 101               	#if defined (__AVR_AT94K__)
 102               	#  include <avr/ioat94k.h>
 103               	#elif defined (__AVR_AT43USB320__)
 104               	#  include <avr/io43u32x.h>
 105               	#elif defined (__AVR_AT43USB355__)
 106               	#  include <avr/io43u35x.h>
 107               	#elif defined (__AVR_AT76C711__)
 108               	#  include <avr/io76c711.h>
 109               	#elif defined (__AVR_AT86RF401__)
 110               	#  include <avr/io86r401.h>
 111               	#elif defined (__AVR_AT90PWM1__)
 112               	#  include <avr/io90pwm1.h>
 113               	#elif defined (__AVR_AT90PWM2__)
 114               	#  include <avr/io90pwmx.h>
 115               	#elif defined (__AVR_AT90PWM2B__)
 116               	#  include <avr/io90pwm2b.h>
 117               	#elif defined (__AVR_AT90PWM3__)
 118               	#  include <avr/io90pwmx.h>
 119               	#elif defined (__AVR_AT90PWM3B__)
 120               	#  include <avr/io90pwm3b.h>
 121               	#elif defined (__AVR_AT90PWM216__)
 122               	#  include <avr/io90pwm216.h>
 123               	#elif defined (__AVR_AT90PWM316__)
 124               	#  include <avr/io90pwm316.h>
 125               	#elif defined (__AVR_AT90PWM81__)
 126               	#  include <avr/io90pwm81.h>
 127               	#elif defined (__AVR_ATmega8U2__)
 128               	#  include <avr/iom8u2.h>
 129               	#elif defined (__AVR_ATmega16M1__)
 130               	#  include <avr/iom16m1.h>
 131               	#elif defined (__AVR_ATmega16U2__)
 132               	#  include <avr/iom16u2.h>
 133               	#elif defined (__AVR_ATmega16U4__)
 134               	#  include <avr/iom16u4.h>
 135               	#elif defined (__AVR_ATmega32C1__)
 136               	#  include <avr/iom32c1.h>
 137               	#elif defined (__AVR_ATmega32M1__)
 138               	#  include <avr/iom32m1.h>
 139               	#elif defined (__AVR_ATmega32U2__)
 140               	#  include <avr/iom32u2.h>
 141               	#elif defined (__AVR_ATmega32U4__)
 142               	#  include <avr/iom32u4.h>
 143               	#elif defined (__AVR_ATmega32U6__)
 144               	#  include <avr/iom32u6.h>
 145               	#elif defined (__AVR_ATmega64C1__)
 146               	#  include <avr/iom64c1.h>
 147               	#elif defined (__AVR_ATmega64M1__)
 148               	#  include <avr/iom64m1.h>
 149               	#elif defined (__AVR_ATmega128__)
 150               	#  include <avr/iom128.h>
 151               	#elif defined (__AVR_ATmega1280__)
 152               	#  include <avr/iom1280.h>
 153               	#elif defined (__AVR_ATmega1281__)
 154               	#  include <avr/iom1281.h>
 155               	#elif defined (__AVR_ATmega1284P__)
 156               	#  include <avr/iom1284p.h>
 157               	#elif defined (__AVR_ATmega128RFA1__)
 158               	#  include <avr/iom128rfa1.h>
 159               	#elif defined (__AVR_ATmega2560__)
 160               	#  include <avr/iom2560.h>
 161               	#elif defined (__AVR_ATmega2561__)
 162               	#  include <avr/iom2561.h>
 163               	#elif defined (__AVR_AT90CAN32__)
 164               	#  include <avr/iocan32.h>
 165               	#elif defined (__AVR_AT90CAN64__)
 166               	#  include <avr/iocan64.h>
 167               	#elif defined (__AVR_AT90CAN128__)
 168               	#  include <avr/iocan128.h>
 169               	#elif defined (__AVR_AT90USB82__)
 170               	#  include <avr/iousb82.h>
 171               	#elif defined (__AVR_AT90USB162__)
 172               	#  include <avr/iousb162.h>
 173               	#elif defined (__AVR_AT90USB646__)
 174               	#  include <avr/iousb646.h>
 175               	#elif defined (__AVR_AT90USB647__)
 176               	#  include <avr/iousb647.h>
 177               	#elif defined (__AVR_AT90USB1286__)
 178               	#  include <avr/iousb1286.h>
 179               	#elif defined (__AVR_AT90USB1287__)
 180               	#  include <avr/iousb1287.h>
 181               	#elif defined (__AVR_ATmega64__)
 182               	#  include <avr/iom64.h>
 183               	#elif defined (__AVR_ATmega640__)
 184               	#  include <avr/iom640.h>
 185               	#elif defined (__AVR_ATmega644__) || defined (__AVR_ATmega644A__)
 186               	#  include <avr/iom644.h>
   1               	/* Copyright (c) 2005 Anatoly Sokolov
   2               	   All rights reserved.
   3               	
   4               	   Redistribution and use in source and binary forms, with or without
   5               	   modification, are permitted provided that the following conditions are met:
   6               	
   7               	   * Redistributions of source code must retain the above copyright
   8               	     notice, this list of conditions and the following disclaimer.
   9               	
  10               	   * Redistributions in binary form must reproduce the above copyright
  11               	     notice, this list of conditions and the following disclaimer in
  12               	     the documentation and/or other materials provided with the
  13               	     distribution.
  14               	
  15               	   * Neither the name of the copyright holders nor the names of
  16               	     contributors may be used to endorse or promote products derived
  17               	     from this software without specific prior written permission.
  18               	
  19               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29               	  POSSIBILITY OF SUCH DAMAGE. */
  30               	
  31               	/* avr/iom644.h - definitions for ATmega644 */
  32               	
  33               	/* $Id: iom644.h 2115 2010-04-05 23:19:53Z arcanum $ */
  34               	
  35               	#ifndef _AVR_IOM644_H_
  36               	#define _AVR_IOM644_H_ 1
  37               	
  38               	#include <avr/iomxx4.h>
   1               	/* Copyright (c) 2005, 2006, 2007 Anatoly Sokolov
  39               	
 187               	#elif defined (__AVR_ATmega644P__)
 188               	#  include <avr/iom644p.h>
 189               	#elif defined (__AVR_ATmega644PA__)
 190               	#  include <avr/iom644pa.h>
 191               	#elif defined (__AVR_ATmega645__) || defined (__AVR_ATmega645A__) || defined (__AVR_ATmega645P__)
 192               	#  include <avr/iom645.h>
 193               	#elif defined (__AVR_ATmega6450__) || defined (__AVR_ATmega6450A__) || defined (__AVR_ATmega6450P__
 194               	#  include <avr/iom6450.h>
 195               	#elif defined (__AVR_ATmega649__) || defined (__AVR_ATmega649A__)
 196               	#  include <avr/iom649.h>
 197               	#elif defined (__AVR_ATmega6490__) || defined (__AVR_ATmega6490A__) || defined (__AVR_ATmega6490P__
 198               	#  include <avr/iom6490.h>
 199               	#elif defined (__AVR_ATmega649P__)
 200               	#  include <avr/iom649p.h>
 201               	#elif defined (__AVR_ATmega64HVE__)
 202               	#  include <avr/iom64hve.h>
 203               	#elif defined (__AVR_ATmega103__)
 204               	#  include <avr/iom103.h>
 205               	#elif defined (__AVR_ATmega32__)
 206               	#  include <avr/iom32.h>
 207               	#elif defined (__AVR_ATmega323__)
 208               	#  include <avr/iom323.h>
 209               	#elif defined (__AVR_ATmega324P__) || defined (__AVR_ATmega324A__)
 210               	#  include <avr/iom324.h>
 211               	#elif defined (__AVR_ATmega324PA__)
 212               	#  include <avr/iom324pa.h>
 213               	#elif defined (__AVR_ATmega325__) || defined (__AVR_ATmega325A__)
 214               	#  include <avr/iom325.h>
 215               	#elif defined (__AVR_ATmega325P__)
 216               	#  include <avr/iom325.h>
 217               	#elif defined (__AVR_ATmega3250__) || defined (__AVR_ATmega3250A__)
 218               	#  include <avr/iom3250.h>
 219               	#elif defined (__AVR_ATmega3250P__)
 220               	#  include <avr/iom3250.h>
 221               	#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
 222               	#  include <avr/iom328p.h>
 223               	#elif defined (__AVR_ATmega329__) || defined (__AVR_ATmega329A__)
 224               	#  include <avr/iom329.h>
 225               	#elif defined (__AVR_ATmega329P__) || defined (__AVR_ATmega329PA__)
 226               	#  include <avr/iom329.h>
 227               	#elif defined (__AVR_ATmega3290__) || defined (__AVR_ATmega3290A__)
 228               	#  include <avr/iom3290.h>
 229               	#elif defined (__AVR_ATmega3290P__)
 230               	#  include <avr/iom3290.h>
 231               	#elif defined (__AVR_ATmega32HVB__)
 232               	#  include <avr/iom32hvb.h>
 233               	#elif defined (__AVR_ATmega32HVBREVB__)
 234               	#  include <avr/iom32hvbrevb.h>
 235               	#elif defined (__AVR_ATmega406__)
 236               	#  include <avr/iom406.h>
 237               	#elif defined (__AVR_ATmega16__)
 238               	#  include <avr/iom16.h>
 239               	#elif defined (__AVR_ATmega16A__)
 240               	#  include <avr/iom16a.h>
 241               	#elif defined (__AVR_ATmega161__)
 242               	#  include <avr/iom161.h>
 243               	#elif defined (__AVR_ATmega162__)
 244               	#  include <avr/iom162.h>
 245               	#elif defined (__AVR_ATmega163__)
 246               	#  include <avr/iom163.h>
 247               	#elif defined (__AVR_ATmega164P__) || defined (__AVR_ATmega164A__)
 248               	#  include <avr/iom164.h>
 249               	#elif defined (__AVR_ATmega165__) || defined (__AVR_ATmega165A__)
 250               	#  include <avr/iom165.h>
 251               	#elif defined (__AVR_ATmega165P__)
 252               	#  include <avr/iom165p.h>
 253               	#elif defined (__AVR_ATmega168__) || defined (__AVR_ATmega168A__)
 254               	#  include <avr/iom168.h>
 255               	#elif defined (__AVR_ATmega168P__)
 256               	#  include <avr/iom168p.h>
 257               	#elif defined (__AVR_ATmega169__) || defined (__AVR_ATmega169A__)
 258               	#  include <avr/iom169.h>
 259               	#elif defined (__AVR_ATmega169P__)
 260               	#  include <avr/iom169p.h>
 261               	#elif defined (__AVR_ATmega169PA__)
 262               	#  include <avr/iom169pa.h>
 263               	#elif defined (__AVR_ATmega8HVA__)
 264               	#  include <avr/iom8hva.h>
 265               	#elif defined (__AVR_ATmega16HVA__)
 266               	#  include <avr/iom16hva.h>
 267               	#elif defined (__AVR_ATmega16HVA2__)
 268               	#  include <avr/iom16hva2.h>
 269               	#elif defined (__AVR_ATmega16HVB__)
 270               	#  include <avr/iom16hvb.h>
 271               	#elif defined (__AVR_ATmega16HVBREVB__)
 272               	#  include <avr/iom16hvbrevb.h>
 273               	#elif defined (__AVR_ATmega8__)
 274               	#  include <avr/iom8.h>
 275               	#elif defined (__AVR_ATmega48__) || defined (__AVR_ATmega48A__)
 276               	#  include <avr/iom48.h>
 277               	#elif defined (__AVR_ATmega48P__)
 278               	#  include <avr/iom48p.h>
 279               	#elif defined (__AVR_ATmega88__) || defined (__AVR_ATmega88A__)
 280               	#  include <avr/iom88.h>
 281               	#elif defined (__AVR_ATmega88P__)
 282               	#  include <avr/iom88p.h>
 283               	#elif defined (__AVR_ATmega88PA__)
 284               	#  include <avr/iom88pa.h>
 285               	#elif defined (__AVR_ATmega8515__)
 286               	#  include <avr/iom8515.h>
 287               	#elif defined (__AVR_ATmega8535__)
 288               	#  include <avr/iom8535.h>
 289               	#elif defined (__AVR_AT90S8535__)
 290               	#  include <avr/io8535.h>
 291               	#elif defined (__AVR_AT90C8534__)
 292               	#  include <avr/io8534.h>
 293               	#elif defined (__AVR_AT90S8515__)
 294               	#  include <avr/io8515.h>
 295               	#elif defined (__AVR_AT90S4434__)
 296               	#  include <avr/io4434.h>
 297               	#elif defined (__AVR_AT90S4433__)
 298               	#  include <avr/io4433.h>
 299               	#elif defined (__AVR_AT90S4414__)
 300               	#  include <avr/io4414.h>
 301               	#elif defined (__AVR_ATtiny22__)
 302               	#  include <avr/iotn22.h>
 303               	#elif defined (__AVR_ATtiny26__)
 304               	#  include <avr/iotn26.h>
 305               	#elif defined (__AVR_AT90S2343__)
 306               	#  include <avr/io2343.h>
 307               	#elif defined (__AVR_AT90S2333__)
 308               	#  include <avr/io2333.h>
 309               	#elif defined (__AVR_AT90S2323__)
 310               	#  include <avr/io2323.h>
 311               	#elif defined (__AVR_AT90S2313__)
 312               	#  include <avr/io2313.h>
 313               	#elif defined (__AVR_ATtiny4__)
 314               	#  include <avr/iotn4.h>
 315               	#elif defined (__AVR_ATtiny5__)
 316               	#  include <avr/iotn5.h>
 317               	#elif defined (__AVR_ATtiny9__)
 318               	#  include <avr/iotn9.h>
 319               	#elif defined (__AVR_ATtiny10__)
 320               	#  include <avr/iotn10.h>
 321               	#elif defined (__AVR_ATtiny20__)
 322               	#  include <avr/iotn20.h>
 323               	#elif defined (__AVR_ATtiny40__)
 324               	#  include <avr/iotn40.h>
 325               	#elif defined (__AVR_ATtiny2313__)
 326               	#  include <avr/iotn2313.h>
 327               	#elif defined (__AVR_ATtiny2313A__)
 328               	#  include <avr/iotn2313a.h>
 329               	#elif defined (__AVR_ATtiny13__)
 330               	#  include <avr/iotn13.h>
 331               	#elif defined (__AVR_ATtiny13A__)
 332               	#  include <avr/iotn13a.h>
 333               	#elif defined (__AVR_ATtiny25__)
 334               	#  include <avr/iotn25.h>
 335               	#elif defined (__AVR_ATtiny4313__)
 336               	#  include <avr/iotn4313.h>
 337               	#elif defined (__AVR_ATtiny45__)
 338               	#  include <avr/iotn45.h>
 339               	#elif defined (__AVR_ATtiny85__)
 340               	#  include <avr/iotn85.h>
 341               	#elif defined (__AVR_ATtiny24__)
 342               	#  include <avr/iotn24.h>
 343               	#elif defined (__AVR_ATtiny24A__)
 344               	#  include <avr/iotn24a.h>
 345               	#elif defined (__AVR_ATtiny44__)
 346               	#  include <avr/iotn44.h>
 347               	#elif defined (__AVR_ATtiny44A__)
 348               	#  include <avr/iotn44a.h>
 349               	#elif defined (__AVR_ATtiny84__)
 350               	#  include <avr/iotn84.h>
 351               	#elif defined (__AVR_ATtiny84A__)
 352               	#  include <avr/iotn84a.h>  
 353               	#elif defined (__AVR_ATtiny261__)
 354               	#  include <avr/iotn261.h>
 355               	#elif defined (__AVR_ATtiny261A__)
 356               	#  include <avr/iotn261a.h>
 357               	#elif defined (__AVR_ATtiny461__)
 358               	#  include <avr/iotn461.h>
 359               	#elif defined (__AVR_ATtiny461A__)
 360               	#  include <avr/iotn461a.h>
 361               	#elif defined (__AVR_ATtiny861__)
 362               	#  include <avr/iotn861.h>
 363               	#elif defined (__AVR_ATtiny861A__)
 364               	#  include <avr/iotn861a.h>
 365               	#elif defined (__AVR_ATtiny43U__)
 366               	#  include <avr/iotn43u.h>
 367               	#elif defined (__AVR_ATtiny48__)
 368               	#  include <avr/iotn48.h>
 369               	#elif defined (__AVR_ATtiny88__)
 370               	#  include <avr/iotn88.h>
 371               	#elif defined (__AVR_ATtiny87__)
 372               	#  include <avr/iotn87.h>
 373               	#elif defined (__AVR_ATtiny167__)
 374               	#  include <avr/iotn167.h>
 375               	#elif defined (__AVR_AT90SCR100__)
 376               	#  include <avr/io90scr100.h>
 377               	#elif defined (__AVR_ATxmega16A4__)
 378               	#  include <avr/iox16a4.h>
 379               	#elif defined (__AVR_ATxmega16D4__)
 380               	#  include <avr/iox16d4.h>
 381               	#elif defined (__AVR_ATxmega32A4__)
 382               	#  include <avr/iox32a4.h>
 383               	#elif defined (__AVR_ATxmega32D4__)
 384               	#  include <avr/iox32d4.h>
 385               	#elif defined (__AVR_ATxmega64A1__)
 386               	#  include <avr/iox64a1.h>
 387               	#elif defined (__AVR_ATxmega64A1U__)
 388               	#  include <avr/iox64a1u.h>
 389               	#elif defined (__AVR_ATxmega64A3__)
 390               	#  include <avr/iox64a3.h>
 391               	#elif defined (__AVR_ATxmega64D3__)
 392               	#  include <avr/iox64d3.h>
 393               	#elif defined (__AVR_ATxmega128A1__)
 394               	#  include <avr/iox128a1.h>
 395               	#elif defined (__AVR_ATxmega128A1U__)
 396               	#  include <avr/iox128a1u.h>
 397               	#elif defined (__AVR_ATxmega128A3__)
 398               	#  include <avr/iox128a3.h>
 399               	#elif defined (__AVR_ATxmega128D3__)
 400               	#  include <avr/iox128d3.h>
 401               	#elif defined (__AVR_ATxmega192A3__)
 402               	#  include <avr/iox192a3.h>
 403               	#elif defined (__AVR_ATxmega192D3__)
 404               	#  include <avr/iox192d3.h>
 405               	#elif defined (__AVR_ATxmega256A3__)
 406               	#  include <avr/iox256a3.h>
 407               	#elif defined (__AVR_ATxmega256A3B__)
 408               	#  include <avr/iox256a3b.h>
 409               	#elif defined (__AVR_ATxmega256D3__)
 410               	#  include <avr/iox256d3.h>
 411               	#elif defined (__AVR_ATA6289__)
 412               	#  include <avr/ioa6289.h>
 413               	/* avr1: the following only supported for assembler programs */
 414               	#elif defined (__AVR_ATtiny28__)
 415               	#  include <avr/iotn28.h>
 416               	#elif defined (__AVR_AT90S1200__)
 417               	#  include <avr/io1200.h>
 418               	#elif defined (__AVR_ATtiny15__)
 419               	#  include <avr/iotn15.h>
 420               	#elif defined (__AVR_ATtiny12__)
 421               	#  include <avr/iotn12.h>
 422               	#elif defined (__AVR_ATtiny11__)
 423               	#  include <avr/iotn11.h>
 424               	#elif defined (__AVR_M3000__)
 425               	#  include <avr/iom3000.h>
 426               	#else
 427               	#  if !defined(__COMPILING_AVR_LIBC__)
 428               	#    warning "device type not defined"
 429               	#  endif
 430               	#endif
 431               	
 432               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 433               	
 434               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 435               	
 436               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 437               	
 438               	/* Include fuse.h after individual IO header files. */
 439               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 440               	
 441               	/* Include lock.h after individual IO header files. */
 442               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 443               	
  32               	
  33               	#include "config.h"
   1               	
  34               	#include "mcp2515_defs.h"
   1               	// coding: utf-8
  35               	
  36               	; -----------------------------------------------------------------------------
  37               	
  38               	#define	RESET(x)	_XRS(x)
  39               	#define	SET(x)		_XS(x)
  40               	#define	TOGGLE(x)	_XT(x)
  41               	
  42               	#define	_port2(x)	PORT ## x
  43               	#define	_pin2(x)	PIN ## x
  44               	
  45               	#define	_XRS(x,y)	cbi		_SFR_IO_ADDR(_port2(x)), y
  46               	#define	_XS(x,y)	sbi		_SFR_IO_ADDR(_port2(x)), y
  47               	#define	_XT(x,y)	sbi		_SFR_IO_ADDR(_pin2(x)), y
  48               	
  49               	#define _FUNCTION(A) \
  50               		.global A $ \
  51               		.func   A
  52               	#define _ENDFUNC .endfunc
  53               	
  54               	#define _GLOBAL(label, size) .comm label, size
  55               	#define _STATIC(label, size) .lcomm label, size
  56               	
  57               	#define	_DATA_SECTION	.section .bss
  58               	#define	_CODE_SECTION	.section .text
  59               	
  60               	#define	NO_MESSAGE		0x3f
  61               	
  62               	; -----------------------------------------------------------------------------
  63               	
  64               	.equ	Zh,	31
  65               	.equ	Zl,	30
  66               	.equ	Yh,	29
  67               	.equ	Yl,	28
  68               	.equ	Xh,	27
  69               	.equ	Xl, 26
  70               	
  71               	.equ	temp_reg,	0
  72               	
  73               	; -----------------------------------------------------------------------------
  74               	; Variables
  75               	; -----------------------------------------------------------------------------
  76               		.section .bss
  77               	
  78               		_GLOBAL( message_number, 1 )
  79               		_GLOBAL( message_data_counter, 1 )
  80               		_GLOBAL( message_data_length, 1 )
  81               		_GLOBAL( message_data, 4 )
  82               	
  83               		.section .text
  84               	; -----------------------------------------------------------------------------
  85               	; writes one byte per SPI
  86               	
  87               		_FUNCTION(spi_putc)
  88               	spi_putc_rs:
  89:mcp2515_asm.S **** 	RESET(MCP2515_CS)
  90               	spi_putc:
  91:mcp2515_asm.S **** 	out		_SFR_IO_ADDR(SPDR), 24
  92               	spi_putc_1:
  93:mcp2515_asm.S **** 	in		temp_reg, _SFR_IO_ADDR(SPSR)
  94:mcp2515_asm.S **** 	sbrs	temp_reg, SPIF
  95:mcp2515_asm.S **** 	rjmp	spi_putc_1
  96:mcp2515_asm.S **** 	in		24, _SFR_IO_ADDR(SPDR)
  97:mcp2515_asm.S **** 	clr		25
  98:mcp2515_asm.S **** 	ret
  99               		_ENDFUNC
 100               	
 101               	; -----------------------------------------------------------------------------
 102               	; adress in r24 and data in r22
 103               	
 104               		_FUNCTION(mcp2515_write_register)
 105               	mcp2515_write_register:
 106:mcp2515_asm.S **** 	RESET(MCP2515_CS)
 107:mcp2515_asm.S **** 	mov		18,	24
 108:mcp2515_asm.S **** 	ldi		24, SPI_WRITE
 109:mcp2515_asm.S **** 	rcall	spi_putc
 110:mcp2515_asm.S **** 	mov		24, 18
 111:mcp2515_asm.S **** 	rcall	spi_putc
 112:mcp2515_asm.S **** 	mov		24, 22
 113:mcp2515_asm.S **** 	rcall	spi_putc
 114:mcp2515_asm.S **** 	rjmp	cs_ret
 115               	;	SET(MCP2515_CS)
 116               	;	ret
 117               		_ENDFUNC
 118               	
 119               	; -----------------------------------------------------------------------------
 120               	; type in r24, return status in r24
 121               	
 122               		_FUNCTION(mcp2515_read_status)
 123               	mcp2515_read_status:
 124               		;RESET(MCP2515_CS)
 125               	
 126               		; the value is already in r24
 127:mcp2515_asm.S **** 	rcall	spi_putc_rs
 128               	
 129               		; write a undefined value => only the return value is interesting
 130:mcp2515_asm.S **** 	rcall	spi_putc
 131:mcp2515_asm.S **** 	rjmp	cs_ret
 132               	
 133               	;	SET(MCP2515_CS)
 134               	;	ret
 135               		_ENDFUNC
 136               	
 137               	; -----------------------------------------------------------------------------
 138               	; return type of message, 0x3f = no message
 139               	
 140               		_FUNCTION(mcp2515_get_message)
 141               	
 142               	get_message_ret_:
 143:mcp2515_asm.S **** 	ldi		24, NO_MESSAGE
 144:mcp2515_asm.S **** 	ret
 145               		
 146               	mcp2515_get_message:
 147               	
 148               		; read status
 149:mcp2515_asm.S **** 	ldi		24, SPI_RX_STATUS
 150:mcp2515_asm.S **** 	rcall	mcp2515_read_status
 151               	
 152:mcp2515_asm.S **** 	mov		20, 24
 153               	
 154:mcp2515_asm.S **** 	clr		18
 155:mcp2515_asm.S **** 	sbrc	20, 7
 156:mcp2515_asm.S **** 	ldi		18, RXB1DLC
 157:mcp2515_asm.S **** 	sbrc	20, 6
 158:mcp2515_asm.S **** 	ldi		18, RXB0DLC
 159               	
 160:mcp2515_asm.S **** 	tst		18
 161:mcp2515_asm.S **** 	breq	get_message_ret_		; no message avilable
 162               	
 163               		; check for rtr-frames
 164:mcp2515_asm.S **** 	andi	24, 0x18
 165:mcp2515_asm.S **** 	tst		24
 166:mcp2515_asm.S **** 	brne	get_message_reject
 167               	
 168               		; read message
 169               		;RESET(MCP2515_CS)
 170:mcp2515_asm.S **** 	ldi		24, SPI_READ
 171:mcp2515_asm.S **** 	rcall	spi_putc_rs
 172               	
 173:mcp2515_asm.S **** 	mov		24, 18
 174:mcp2515_asm.S **** 	rcall	spi_putc
 175               	
 176               		; read DLC
 177:mcp2515_asm.S **** 	rcall	spi_putc
 178               	
 179               		; length must be greater than 4
 180:mcp2515_asm.S **** 	mov		18, 24
 181:mcp2515_asm.S **** 	andi	18, 0x0F
 182:mcp2515_asm.S **** 	subi	18, 4
 183               	
 184:mcp2515_asm.S **** 	cpi		18, 5
 185:mcp2515_asm.S **** 	brge	get_message_reject
 186               	
 187               		; store length
 188:mcp2515_asm.S **** 	sts		message_data_length, 18
 189               	
 190               		; first byte is the board-id
 191:mcp2515_asm.S **** 	rcall	spi_putc
 192               	
 193:mcp2515_asm.S **** 	cpi		24, BOOTLOADER_BOARD_ID
 194:mcp2515_asm.S **** 	brne	get_message_reject
 195               	
 196               		; second byte is the type of the message
 197               		; (which will be return at the end)
 198:mcp2515_asm.S **** 	rcall	spi_putc
 199:mcp2515_asm.S **** 	mov		19, 24
 200               	
 201               		; third byte is the message number
 202:mcp2515_asm.S **** 	rcall	spi_putc
 203:mcp2515_asm.S **** 	sts		message_number, 24
 204               	
 205               		; next one is the counter for multi-data-commands
 206:mcp2515_asm.S **** 	rcall	spi_putc
 207:mcp2515_asm.S **** 	sts		message_data_counter, 24
 208               	
 209               		; read data
 210:mcp2515_asm.S **** 	ldi		Zh, hi8(message_data)
 211:mcp2515_asm.S **** 	ldi		Zl, lo8(message_data)
 212               	
 213               	read_data_loop:
 214:mcp2515_asm.S **** 	dec		18
 215:mcp2515_asm.S **** 	brlt	read_data_end
 216               	
 217:mcp2515_asm.S **** 	rcall	spi_putc
 218:mcp2515_asm.S **** 	st		Z+, 24
 219               	
 220:mcp2515_asm.S **** 	rjmp	read_data_loop
 221               	read_data_end:
 222               	
 223               	get_message_reject:
 224:mcp2515_asm.S **** 	SET(MCP2515_CS)
 225               	
 226               		; clear interrupt flag
 227:mcp2515_asm.S **** 	sbrc	20, 7
 228:mcp2515_asm.S **** 	ldi		21, (1<<RX1IF)
 229:mcp2515_asm.S **** 	sbrc	20, 6
 230:mcp2515_asm.S **** 	ldi		21, (1<<RX0IF)
 231               	
 232               		; Reset interrupt flag (bit-modifiy command)
 233               		;RESET(MCP2515_CS)
 234:mcp2515_asm.S **** 	ldi		24, SPI_BIT_MODIFY
 235:mcp2515_asm.S **** 	rcall	spi_putc_rs
 236:mcp2515_asm.S **** 	ldi		24, CANINTF
 237:mcp2515_asm.S **** 	rcall	spi_putc
 238:mcp2515_asm.S **** 	mov		24, 21
 239:mcp2515_asm.S **** 	rcall	spi_putc
 240:mcp2515_asm.S **** 	ldi		24, 0x00
 241:mcp2515_asm.S **** 	rcall	spi_putc
 242               	;	SET(MCP2515_CS)
 243               	
 244:mcp2515_asm.S **** 	mov		24, 19
 245:mcp2515_asm.S **** 	rjmp	cs_ret
 246               	;	ret
 247               	
 248               	get_message_ret:
 249:mcp2515_asm.S **** 	ldi		24, NO_MESSAGE
 250:mcp2515_asm.S **** 	ret
 251               		_ENDFUNC
 252               	
 253               	; -----------------------------------------------------------------------------
 254               	
 255               		_FUNCTION(mcp2515_send_message)
 256               	mcp2515_send_message:
 257:mcp2515_asm.S **** 	mov		19, 24		; save type-byte
 258               		
 259               	send_message2:
 260               		; wait until the send buffer is free
 261:mcp2515_asm.S **** 	ldi		24, SPI_READ_STATUS
 262:mcp2515_asm.S **** 	rcall	mcp2515_read_status
 263               	
 264:mcp2515_asm.S **** 	sbrc	24, 2
 265:mcp2515_asm.S **** 	rjmp	send_message2
 266               	
 267               		; write message
 268               		;RESET(MCP2515_CS)
 269:mcp2515_asm.S **** 	ldi		24, SPI_WRITE_TX
 270:mcp2515_asm.S **** 	rcall	spi_putc_rs
 271               	
 272               		; write identifier
 273:mcp2515_asm.S **** 	ldi		24, 0xff
 274:mcp2515_asm.S **** 	rcall	spi_putc
 275:mcp2515_asm.S **** 	ldi		24, 0xc0
 276:mcp2515_asm.S **** 	rcall	spi_putc
 277:mcp2515_asm.S **** 	rcall	spi_putc
 278:mcp2515_asm.S **** 	rcall	spi_putc
 279               	
 280               		; write DLC => TODO check length
 281:mcp2515_asm.S **** 	mov		24, 22
 282:mcp2515_asm.S **** 	subi	24, 256-4		; four extra bytes
 283:mcp2515_asm.S **** 	rcall	spi_putc
 284               	
 285               		; write board-id and type
 286:mcp2515_asm.S **** 	ldi		24, BOOTLOADER_BOARD_ID
 287:mcp2515_asm.S **** 	rcall	spi_putc
 288:mcp2515_asm.S **** 	mov		24, 19
 289:mcp2515_asm.S **** 	rcall	spi_putc
 290               	
 291:mcp2515_asm.S **** 	lds		24, message_number
 292:mcp2515_asm.S **** 	rcall	spi_putc
 293:mcp2515_asm.S **** 	lds		24, message_data_counter
 294:mcp2515_asm.S **** 	rcall	spi_putc
 295               	
 296               		; write payload-data
 297:mcp2515_asm.S **** 	ldi		Zh, hi8(message_data)
 298:mcp2515_asm.S **** 	ldi		Zl, lo8(message_data)
 299               	write_data_loop:
 300:mcp2515_asm.S **** 	dec		22
 301:mcp2515_asm.S **** 	brlt	write_data_end
 302               	
 303:mcp2515_asm.S **** 	ld		24, Z+
 304:mcp2515_asm.S **** 	rcall	spi_putc
 305               	
 306:mcp2515_asm.S **** 	rjmp	write_data_loop
 307               	write_data_end:
 308:mcp2515_asm.S **** 	SET(MCP2515_CS)
 309               	
 310               	;	nop
 311               	;	nop
 312:mcp2515_asm.S **** 	ldi		24, SPI_RTS | 1
 313               	
 314               		; send buffer
 315:mcp2515_asm.S **** 	rcall	spi_putc_rs
 316               	cs_ret:
 317:mcp2515_asm.S **** 	SET(MCP2515_CS)
 318               	
 319:mcp2515_asm.S **** 	ret
 320               		_ENDFUNC
DEFINED SYMBOLS
       mcp2515_asm.S:64     *ABS*:0000001f Zh
       mcp2515_asm.S:65     *ABS*:0000001e Zl
       mcp2515_asm.S:66     *ABS*:0000001d Yh
       mcp2515_asm.S:67     *ABS*:0000001c Yl
       mcp2515_asm.S:68     *ABS*:0000001b Xh
       mcp2515_asm.S:69     *ABS*:0000001a Xl
       mcp2515_asm.S:71     *ABS*:00000000 temp_reg
                            *COM*:00000001 message_number
                            *COM*:00000001 message_data_counter
                            *COM*:00000001 message_data_length
                            *COM*:00000004 message_data
       mcp2515_asm.S:90     .text:00000002 spi_putc
       mcp2515_asm.S:88     .text:00000000 spi_putc_rs
       mcp2515_asm.S:92     .text:00000004 spi_putc_1
       mcp2515_asm.S:105    .text:00000010 mcp2515_write_register
       mcp2515_asm.S:316    .text:000000ec cs_ret
       mcp2515_asm.S:123    .text:00000022 mcp2515_read_status
       mcp2515_asm.S:146    .text:0000002c mcp2515_get_message
       mcp2515_asm.S:142    .text:00000028 get_message_ret_
       mcp2515_asm.S:223    .text:00000082 get_message_reject
       mcp2515_asm.S:213    .text:00000078 read_data_loop
       mcp2515_asm.S:221    .text:00000082 read_data_end
       mcp2515_asm.S:248    .text:000000a0 get_message_ret
       mcp2515_asm.S:256    .text:000000a4 mcp2515_send_message
       mcp2515_asm.S:259    .text:000000a6 send_message2
       mcp2515_asm.S:299    .text:000000dc write_data_loop
       mcp2515_asm.S:307    .text:000000e6 write_data_end

NO UNDEFINED SYMBOLS
